// This file was auto-generated by Fern from our API Definition.

package ittybit

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/ittybit/sdk-go/internal"
	time "time"
)

type MediaCreateRequest struct {
	// Specifies the API Version
	Title         *string                `json:"title,omitempty" url:"-"`
	Alt           *string                `json:"alt,omitempty" url:"-"`
	Metadata      map[string]interface{} `json:"metadata,omitempty" url:"-"`
	acceptVersion string
}

func (m *MediaCreateRequest) AcceptVersion() string {
	return m.acceptVersion
}

func (m *MediaCreateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MediaCreateRequest
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*m = MediaCreateRequest(body)
	m.acceptVersion = "2025-08-20"
	return nil
}

func (m *MediaCreateRequest) MarshalJSON() ([]byte, error) {
	type embed MediaCreateRequest
	var marshaler = struct {
		embed
		AcceptVersion string `json:"Accept-Version"`
	}{
		embed:         embed(*m),
		AcceptVersion: "2025-08-20",
	}
	return json.Marshal(marshaler)
}

type MediaListRequest struct {
	// Specifies the API Version
	Page          *int `json:"-" url:"page,omitempty"`
	Limit         *int `json:"-" url:"limit,omitempty"`
	acceptVersion string
}

func (m *MediaListRequest) AcceptVersion() string {
	return m.acceptVersion
}

type MediaListResponse = []*MediaListResponseItem

type MediaListResponseItem struct {
	ID         string                            `json:"id" url:"id"`
	Object     string                            `json:"object" url:"object"`
	Kind       *MediaListResponseItemKind        `json:"kind,omitempty" url:"kind,omitempty"`
	Title      *string                           `json:"title,omitempty" url:"title,omitempty"`
	Alt        *string                           `json:"alt,omitempty" url:"alt,omitempty"`
	Width      *int                              `json:"width,omitempty" url:"width,omitempty"`
	Height     *int                              `json:"height,omitempty" url:"height,omitempty"`
	Duration   *float64                          `json:"duration,omitempty" url:"duration,omitempty"`
	Files      []*MediaListResponseItemFilesItem `json:"files,omitempty" url:"files,omitempty"`
	URLs       map[string]interface{}            `json:"urls,omitempty" url:"urls,omitempty"`
	Background *string                           `json:"background,omitempty" url:"background,omitempty"`
	Metadata   map[string]interface{}            `json:"metadata,omitempty" url:"metadata,omitempty"`
	Created    time.Time                         `json:"created" url:"created"`
	Updated    time.Time                         `json:"updated" url:"updated"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MediaListResponseItem) GetID() string {
	if m == nil {
		return ""
	}
	return m.ID
}

func (m *MediaListResponseItem) GetObject() string {
	if m == nil {
		return ""
	}
	return m.Object
}

func (m *MediaListResponseItem) GetKind() *MediaListResponseItemKind {
	if m == nil {
		return nil
	}
	return m.Kind
}

func (m *MediaListResponseItem) GetTitle() *string {
	if m == nil {
		return nil
	}
	return m.Title
}

func (m *MediaListResponseItem) GetAlt() *string {
	if m == nil {
		return nil
	}
	return m.Alt
}

func (m *MediaListResponseItem) GetWidth() *int {
	if m == nil {
		return nil
	}
	return m.Width
}

func (m *MediaListResponseItem) GetHeight() *int {
	if m == nil {
		return nil
	}
	return m.Height
}

func (m *MediaListResponseItem) GetDuration() *float64 {
	if m == nil {
		return nil
	}
	return m.Duration
}

func (m *MediaListResponseItem) GetFiles() []*MediaListResponseItemFilesItem {
	if m == nil {
		return nil
	}
	return m.Files
}

func (m *MediaListResponseItem) GetURLs() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.URLs
}

func (m *MediaListResponseItem) GetBackground() *string {
	if m == nil {
		return nil
	}
	return m.Background
}

func (m *MediaListResponseItem) GetMetadata() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.Metadata
}

func (m *MediaListResponseItem) GetCreated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Created
}

func (m *MediaListResponseItem) GetUpdated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Updated
}

func (m *MediaListResponseItem) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MediaListResponseItem) UnmarshalJSON(data []byte) error {
	type embed MediaListResponseItem
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MediaListResponseItem(unmarshaler.embed)
	m.Created = unmarshaler.Created.Time()
	m.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MediaListResponseItem) MarshalJSON() ([]byte, error) {
	type embed MediaListResponseItem
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*m),
		Created: internal.NewDateTime(m.Created),
		Updated: internal.NewDateTime(m.Updated),
	}
	return json.Marshal(marshaler)
}

func (m *MediaListResponseItem) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MediaListResponseItemFilesItem struct {
	ID           string                                     `json:"id" url:"id"`
	Object       MediaListResponseItemFilesItemObject       `json:"object" url:"object"`
	Kind         MediaListResponseItemFilesItemKind         `json:"kind" url:"kind"`
	Type         string                                     `json:"type" url:"type"`
	Codec        *string                                    `json:"codec,omitempty" url:"codec,omitempty"`
	Container    *string                                    `json:"container,omitempty" url:"container,omitempty"`
	Width        *int                                       `json:"width,omitempty" url:"width,omitempty"`
	Height       *int                                       `json:"height,omitempty" url:"height,omitempty"`
	Orientation  *MediaListResponseItemFilesItemOrientation `json:"orientation,omitempty" url:"orientation,omitempty"`
	Rotation     *float64                                   `json:"rotation,omitempty" url:"rotation,omitempty"`
	Transparency *bool                                      `json:"transparency,omitempty" url:"transparency,omitempty"`
	Frames       *int                                       `json:"frames,omitempty" url:"frames,omitempty"`
	Duration     *float64                                   `json:"duration,omitempty" url:"duration,omitempty"`
	Fps          *float64                                   `json:"fps,omitempty" url:"fps,omitempty"`
	Filesize     int                                        `json:"filesize" url:"filesize"`
	Bitrate      *int                                       `json:"bitrate,omitempty" url:"bitrate,omitempty"`
	Ref          *string                                    `json:"ref,omitempty" url:"ref,omitempty"`
	Folder       *string                                    `json:"folder,omitempty" url:"folder,omitempty"`
	Filename     *string                                    `json:"filename,omitempty" url:"filename,omitempty"`
	URL          string                                     `json:"url" url:"url"`
	Metadata     map[string]interface{}                     `json:"metadata,omitempty" url:"metadata,omitempty"`
	Original     *bool                                      `json:"original,omitempty" url:"original,omitempty"`
	Created      time.Time                                  `json:"created" url:"created"`
	Updated      time.Time                                  `json:"updated" url:"updated"`
	Status       MediaListResponseItemFilesItemStatus       `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MediaListResponseItemFilesItem) GetID() string {
	if m == nil {
		return ""
	}
	return m.ID
}

func (m *MediaListResponseItemFilesItem) GetObject() MediaListResponseItemFilesItemObject {
	if m == nil {
		return ""
	}
	return m.Object
}

func (m *MediaListResponseItemFilesItem) GetKind() MediaListResponseItemFilesItemKind {
	if m == nil {
		return ""
	}
	return m.Kind
}

func (m *MediaListResponseItemFilesItem) GetType() string {
	if m == nil {
		return ""
	}
	return m.Type
}

func (m *MediaListResponseItemFilesItem) GetCodec() *string {
	if m == nil {
		return nil
	}
	return m.Codec
}

func (m *MediaListResponseItemFilesItem) GetContainer() *string {
	if m == nil {
		return nil
	}
	return m.Container
}

func (m *MediaListResponseItemFilesItem) GetWidth() *int {
	if m == nil {
		return nil
	}
	return m.Width
}

func (m *MediaListResponseItemFilesItem) GetHeight() *int {
	if m == nil {
		return nil
	}
	return m.Height
}

func (m *MediaListResponseItemFilesItem) GetOrientation() *MediaListResponseItemFilesItemOrientation {
	if m == nil {
		return nil
	}
	return m.Orientation
}

func (m *MediaListResponseItemFilesItem) GetRotation() *float64 {
	if m == nil {
		return nil
	}
	return m.Rotation
}

func (m *MediaListResponseItemFilesItem) GetTransparency() *bool {
	if m == nil {
		return nil
	}
	return m.Transparency
}

func (m *MediaListResponseItemFilesItem) GetFrames() *int {
	if m == nil {
		return nil
	}
	return m.Frames
}

func (m *MediaListResponseItemFilesItem) GetDuration() *float64 {
	if m == nil {
		return nil
	}
	return m.Duration
}

func (m *MediaListResponseItemFilesItem) GetFps() *float64 {
	if m == nil {
		return nil
	}
	return m.Fps
}

func (m *MediaListResponseItemFilesItem) GetFilesize() int {
	if m == nil {
		return 0
	}
	return m.Filesize
}

func (m *MediaListResponseItemFilesItem) GetBitrate() *int {
	if m == nil {
		return nil
	}
	return m.Bitrate
}

func (m *MediaListResponseItemFilesItem) GetRef() *string {
	if m == nil {
		return nil
	}
	return m.Ref
}

func (m *MediaListResponseItemFilesItem) GetFolder() *string {
	if m == nil {
		return nil
	}
	return m.Folder
}

func (m *MediaListResponseItemFilesItem) GetFilename() *string {
	if m == nil {
		return nil
	}
	return m.Filename
}

func (m *MediaListResponseItemFilesItem) GetURL() string {
	if m == nil {
		return ""
	}
	return m.URL
}

func (m *MediaListResponseItemFilesItem) GetMetadata() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.Metadata
}

func (m *MediaListResponseItemFilesItem) GetOriginal() *bool {
	if m == nil {
		return nil
	}
	return m.Original
}

func (m *MediaListResponseItemFilesItem) GetCreated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Created
}

func (m *MediaListResponseItemFilesItem) GetUpdated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Updated
}

func (m *MediaListResponseItemFilesItem) GetStatus() MediaListResponseItemFilesItemStatus {
	if m == nil {
		return ""
	}
	return m.Status
}

func (m *MediaListResponseItemFilesItem) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MediaListResponseItemFilesItem) UnmarshalJSON(data []byte) error {
	type embed MediaListResponseItemFilesItem
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MediaListResponseItemFilesItem(unmarshaler.embed)
	m.Created = unmarshaler.Created.Time()
	m.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MediaListResponseItemFilesItem) MarshalJSON() ([]byte, error) {
	type embed MediaListResponseItemFilesItem
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*m),
		Created: internal.NewDateTime(m.Created),
		Updated: internal.NewDateTime(m.Updated),
	}
	return json.Marshal(marshaler)
}

func (m *MediaListResponseItemFilesItem) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MediaListResponseItemFilesItemKind string

const (
	MediaListResponseItemFilesItemKindVideo MediaListResponseItemFilesItemKind = "video"
	MediaListResponseItemFilesItemKindImage MediaListResponseItemFilesItemKind = "image"
	MediaListResponseItemFilesItemKindAudio MediaListResponseItemFilesItemKind = "audio"
)

func NewMediaListResponseItemFilesItemKindFromString(s string) (MediaListResponseItemFilesItemKind, error) {
	switch s {
	case "video":
		return MediaListResponseItemFilesItemKindVideo, nil
	case "image":
		return MediaListResponseItemFilesItemKindImage, nil
	case "audio":
		return MediaListResponseItemFilesItemKindAudio, nil
	}
	var t MediaListResponseItemFilesItemKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaListResponseItemFilesItemKind) Ptr() *MediaListResponseItemFilesItemKind {
	return &m
}

type MediaListResponseItemFilesItemObject string

const (
	MediaListResponseItemFilesItemObjectSource       MediaListResponseItemFilesItemObject = "source"
	MediaListResponseItemFilesItemObjectTrack        MediaListResponseItemFilesItemObject = "track"
	MediaListResponseItemFilesItemObjectIntelligence MediaListResponseItemFilesItemObject = "intelligence"
)

func NewMediaListResponseItemFilesItemObjectFromString(s string) (MediaListResponseItemFilesItemObject, error) {
	switch s {
	case "source":
		return MediaListResponseItemFilesItemObjectSource, nil
	case "track":
		return MediaListResponseItemFilesItemObjectTrack, nil
	case "intelligence":
		return MediaListResponseItemFilesItemObjectIntelligence, nil
	}
	var t MediaListResponseItemFilesItemObject
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaListResponseItemFilesItemObject) Ptr() *MediaListResponseItemFilesItemObject {
	return &m
}

type MediaListResponseItemFilesItemOrientation string

const (
	MediaListResponseItemFilesItemOrientationLandscape MediaListResponseItemFilesItemOrientation = "landscape"
	MediaListResponseItemFilesItemOrientationPortrait  MediaListResponseItemFilesItemOrientation = "portrait"
	MediaListResponseItemFilesItemOrientationSquare    MediaListResponseItemFilesItemOrientation = "square"
)

func NewMediaListResponseItemFilesItemOrientationFromString(s string) (MediaListResponseItemFilesItemOrientation, error) {
	switch s {
	case "landscape":
		return MediaListResponseItemFilesItemOrientationLandscape, nil
	case "portrait":
		return MediaListResponseItemFilesItemOrientationPortrait, nil
	case "square":
		return MediaListResponseItemFilesItemOrientationSquare, nil
	}
	var t MediaListResponseItemFilesItemOrientation
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaListResponseItemFilesItemOrientation) Ptr() *MediaListResponseItemFilesItemOrientation {
	return &m
}

type MediaListResponseItemFilesItemStatus string

const (
	MediaListResponseItemFilesItemStatusWaiting    MediaListResponseItemFilesItemStatus = "waiting"
	MediaListResponseItemFilesItemStatusProcessing MediaListResponseItemFilesItemStatus = "processing"
	MediaListResponseItemFilesItemStatusReady      MediaListResponseItemFilesItemStatus = "ready"
	MediaListResponseItemFilesItemStatusFailed     MediaListResponseItemFilesItemStatus = "failed"
)

func NewMediaListResponseItemFilesItemStatusFromString(s string) (MediaListResponseItemFilesItemStatus, error) {
	switch s {
	case "waiting":
		return MediaListResponseItemFilesItemStatusWaiting, nil
	case "processing":
		return MediaListResponseItemFilesItemStatusProcessing, nil
	case "ready":
		return MediaListResponseItemFilesItemStatusReady, nil
	case "failed":
		return MediaListResponseItemFilesItemStatusFailed, nil
	}
	var t MediaListResponseItemFilesItemStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaListResponseItemFilesItemStatus) Ptr() *MediaListResponseItemFilesItemStatus {
	return &m
}

type MediaListResponseItemKind string

const (
	MediaListResponseItemKindVideo MediaListResponseItemKind = "video"
	MediaListResponseItemKindImage MediaListResponseItemKind = "image"
	MediaListResponseItemKindAudio MediaListResponseItemKind = "audio"
)

func NewMediaListResponseItemKindFromString(s string) (MediaListResponseItemKind, error) {
	switch s {
	case "video":
		return MediaListResponseItemKindVideo, nil
	case "image":
		return MediaListResponseItemKindImage, nil
	case "audio":
		return MediaListResponseItemKindAudio, nil
	}
	var t MediaListResponseItemKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaListResponseItemKind) Ptr() *MediaListResponseItemKind {
	return &m
}

type MediaCreateResponse struct {
	ID         string                          `json:"id" url:"id"`
	Object     string                          `json:"object" url:"object"`
	Kind       *MediaCreateResponseKind        `json:"kind,omitempty" url:"kind,omitempty"`
	Title      *string                         `json:"title,omitempty" url:"title,omitempty"`
	Alt        *string                         `json:"alt,omitempty" url:"alt,omitempty"`
	Width      *int                            `json:"width,omitempty" url:"width,omitempty"`
	Height     *int                            `json:"height,omitempty" url:"height,omitempty"`
	Duration   *float64                        `json:"duration,omitempty" url:"duration,omitempty"`
	Files      []*MediaCreateResponseFilesItem `json:"files,omitempty" url:"files,omitempty"`
	URLs       map[string]interface{}          `json:"urls,omitempty" url:"urls,omitempty"`
	Background *string                         `json:"background,omitempty" url:"background,omitempty"`
	Metadata   map[string]interface{}          `json:"metadata,omitempty" url:"metadata,omitempty"`
	Created    time.Time                       `json:"created" url:"created"`
	Updated    time.Time                       `json:"updated" url:"updated"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MediaCreateResponse) GetID() string {
	if m == nil {
		return ""
	}
	return m.ID
}

func (m *MediaCreateResponse) GetObject() string {
	if m == nil {
		return ""
	}
	return m.Object
}

func (m *MediaCreateResponse) GetKind() *MediaCreateResponseKind {
	if m == nil {
		return nil
	}
	return m.Kind
}

func (m *MediaCreateResponse) GetTitle() *string {
	if m == nil {
		return nil
	}
	return m.Title
}

func (m *MediaCreateResponse) GetAlt() *string {
	if m == nil {
		return nil
	}
	return m.Alt
}

func (m *MediaCreateResponse) GetWidth() *int {
	if m == nil {
		return nil
	}
	return m.Width
}

func (m *MediaCreateResponse) GetHeight() *int {
	if m == nil {
		return nil
	}
	return m.Height
}

func (m *MediaCreateResponse) GetDuration() *float64 {
	if m == nil {
		return nil
	}
	return m.Duration
}

func (m *MediaCreateResponse) GetFiles() []*MediaCreateResponseFilesItem {
	if m == nil {
		return nil
	}
	return m.Files
}

func (m *MediaCreateResponse) GetURLs() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.URLs
}

func (m *MediaCreateResponse) GetBackground() *string {
	if m == nil {
		return nil
	}
	return m.Background
}

func (m *MediaCreateResponse) GetMetadata() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.Metadata
}

func (m *MediaCreateResponse) GetCreated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Created
}

func (m *MediaCreateResponse) GetUpdated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Updated
}

func (m *MediaCreateResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MediaCreateResponse) UnmarshalJSON(data []byte) error {
	type embed MediaCreateResponse
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MediaCreateResponse(unmarshaler.embed)
	m.Created = unmarshaler.Created.Time()
	m.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MediaCreateResponse) MarshalJSON() ([]byte, error) {
	type embed MediaCreateResponse
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*m),
		Created: internal.NewDateTime(m.Created),
		Updated: internal.NewDateTime(m.Updated),
	}
	return json.Marshal(marshaler)
}

func (m *MediaCreateResponse) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MediaCreateResponseFilesItem struct {
	ID           string                                   `json:"id" url:"id"`
	Object       MediaCreateResponseFilesItemObject       `json:"object" url:"object"`
	Kind         MediaCreateResponseFilesItemKind         `json:"kind" url:"kind"`
	Type         string                                   `json:"type" url:"type"`
	Codec        *string                                  `json:"codec,omitempty" url:"codec,omitempty"`
	Container    *string                                  `json:"container,omitempty" url:"container,omitempty"`
	Width        *int                                     `json:"width,omitempty" url:"width,omitempty"`
	Height       *int                                     `json:"height,omitempty" url:"height,omitempty"`
	Orientation  *MediaCreateResponseFilesItemOrientation `json:"orientation,omitempty" url:"orientation,omitempty"`
	Rotation     *float64                                 `json:"rotation,omitempty" url:"rotation,omitempty"`
	Transparency *bool                                    `json:"transparency,omitempty" url:"transparency,omitempty"`
	Frames       *int                                     `json:"frames,omitempty" url:"frames,omitempty"`
	Duration     *float64                                 `json:"duration,omitempty" url:"duration,omitempty"`
	Fps          *float64                                 `json:"fps,omitempty" url:"fps,omitempty"`
	Filesize     int                                      `json:"filesize" url:"filesize"`
	Bitrate      *int                                     `json:"bitrate,omitempty" url:"bitrate,omitempty"`
	Ref          *string                                  `json:"ref,omitempty" url:"ref,omitempty"`
	Folder       *string                                  `json:"folder,omitempty" url:"folder,omitempty"`
	Filename     *string                                  `json:"filename,omitempty" url:"filename,omitempty"`
	URL          string                                   `json:"url" url:"url"`
	Metadata     map[string]interface{}                   `json:"metadata,omitempty" url:"metadata,omitempty"`
	Original     *bool                                    `json:"original,omitempty" url:"original,omitempty"`
	Created      time.Time                                `json:"created" url:"created"`
	Updated      time.Time                                `json:"updated" url:"updated"`
	Status       MediaCreateResponseFilesItemStatus       `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MediaCreateResponseFilesItem) GetID() string {
	if m == nil {
		return ""
	}
	return m.ID
}

func (m *MediaCreateResponseFilesItem) GetObject() MediaCreateResponseFilesItemObject {
	if m == nil {
		return ""
	}
	return m.Object
}

func (m *MediaCreateResponseFilesItem) GetKind() MediaCreateResponseFilesItemKind {
	if m == nil {
		return ""
	}
	return m.Kind
}

func (m *MediaCreateResponseFilesItem) GetType() string {
	if m == nil {
		return ""
	}
	return m.Type
}

func (m *MediaCreateResponseFilesItem) GetCodec() *string {
	if m == nil {
		return nil
	}
	return m.Codec
}

func (m *MediaCreateResponseFilesItem) GetContainer() *string {
	if m == nil {
		return nil
	}
	return m.Container
}

func (m *MediaCreateResponseFilesItem) GetWidth() *int {
	if m == nil {
		return nil
	}
	return m.Width
}

func (m *MediaCreateResponseFilesItem) GetHeight() *int {
	if m == nil {
		return nil
	}
	return m.Height
}

func (m *MediaCreateResponseFilesItem) GetOrientation() *MediaCreateResponseFilesItemOrientation {
	if m == nil {
		return nil
	}
	return m.Orientation
}

func (m *MediaCreateResponseFilesItem) GetRotation() *float64 {
	if m == nil {
		return nil
	}
	return m.Rotation
}

func (m *MediaCreateResponseFilesItem) GetTransparency() *bool {
	if m == nil {
		return nil
	}
	return m.Transparency
}

func (m *MediaCreateResponseFilesItem) GetFrames() *int {
	if m == nil {
		return nil
	}
	return m.Frames
}

func (m *MediaCreateResponseFilesItem) GetDuration() *float64 {
	if m == nil {
		return nil
	}
	return m.Duration
}

func (m *MediaCreateResponseFilesItem) GetFps() *float64 {
	if m == nil {
		return nil
	}
	return m.Fps
}

func (m *MediaCreateResponseFilesItem) GetFilesize() int {
	if m == nil {
		return 0
	}
	return m.Filesize
}

func (m *MediaCreateResponseFilesItem) GetBitrate() *int {
	if m == nil {
		return nil
	}
	return m.Bitrate
}

func (m *MediaCreateResponseFilesItem) GetRef() *string {
	if m == nil {
		return nil
	}
	return m.Ref
}

func (m *MediaCreateResponseFilesItem) GetFolder() *string {
	if m == nil {
		return nil
	}
	return m.Folder
}

func (m *MediaCreateResponseFilesItem) GetFilename() *string {
	if m == nil {
		return nil
	}
	return m.Filename
}

func (m *MediaCreateResponseFilesItem) GetURL() string {
	if m == nil {
		return ""
	}
	return m.URL
}

func (m *MediaCreateResponseFilesItem) GetMetadata() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.Metadata
}

func (m *MediaCreateResponseFilesItem) GetOriginal() *bool {
	if m == nil {
		return nil
	}
	return m.Original
}

func (m *MediaCreateResponseFilesItem) GetCreated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Created
}

func (m *MediaCreateResponseFilesItem) GetUpdated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Updated
}

func (m *MediaCreateResponseFilesItem) GetStatus() MediaCreateResponseFilesItemStatus {
	if m == nil {
		return ""
	}
	return m.Status
}

func (m *MediaCreateResponseFilesItem) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MediaCreateResponseFilesItem) UnmarshalJSON(data []byte) error {
	type embed MediaCreateResponseFilesItem
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MediaCreateResponseFilesItem(unmarshaler.embed)
	m.Created = unmarshaler.Created.Time()
	m.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MediaCreateResponseFilesItem) MarshalJSON() ([]byte, error) {
	type embed MediaCreateResponseFilesItem
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*m),
		Created: internal.NewDateTime(m.Created),
		Updated: internal.NewDateTime(m.Updated),
	}
	return json.Marshal(marshaler)
}

func (m *MediaCreateResponseFilesItem) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MediaCreateResponseFilesItemKind string

const (
	MediaCreateResponseFilesItemKindVideo MediaCreateResponseFilesItemKind = "video"
	MediaCreateResponseFilesItemKindImage MediaCreateResponseFilesItemKind = "image"
	MediaCreateResponseFilesItemKindAudio MediaCreateResponseFilesItemKind = "audio"
)

func NewMediaCreateResponseFilesItemKindFromString(s string) (MediaCreateResponseFilesItemKind, error) {
	switch s {
	case "video":
		return MediaCreateResponseFilesItemKindVideo, nil
	case "image":
		return MediaCreateResponseFilesItemKindImage, nil
	case "audio":
		return MediaCreateResponseFilesItemKindAudio, nil
	}
	var t MediaCreateResponseFilesItemKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaCreateResponseFilesItemKind) Ptr() *MediaCreateResponseFilesItemKind {
	return &m
}

type MediaCreateResponseFilesItemObject string

const (
	MediaCreateResponseFilesItemObjectSource       MediaCreateResponseFilesItemObject = "source"
	MediaCreateResponseFilesItemObjectTrack        MediaCreateResponseFilesItemObject = "track"
	MediaCreateResponseFilesItemObjectIntelligence MediaCreateResponseFilesItemObject = "intelligence"
)

func NewMediaCreateResponseFilesItemObjectFromString(s string) (MediaCreateResponseFilesItemObject, error) {
	switch s {
	case "source":
		return MediaCreateResponseFilesItemObjectSource, nil
	case "track":
		return MediaCreateResponseFilesItemObjectTrack, nil
	case "intelligence":
		return MediaCreateResponseFilesItemObjectIntelligence, nil
	}
	var t MediaCreateResponseFilesItemObject
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaCreateResponseFilesItemObject) Ptr() *MediaCreateResponseFilesItemObject {
	return &m
}

type MediaCreateResponseFilesItemOrientation string

const (
	MediaCreateResponseFilesItemOrientationLandscape MediaCreateResponseFilesItemOrientation = "landscape"
	MediaCreateResponseFilesItemOrientationPortrait  MediaCreateResponseFilesItemOrientation = "portrait"
	MediaCreateResponseFilesItemOrientationSquare    MediaCreateResponseFilesItemOrientation = "square"
)

func NewMediaCreateResponseFilesItemOrientationFromString(s string) (MediaCreateResponseFilesItemOrientation, error) {
	switch s {
	case "landscape":
		return MediaCreateResponseFilesItemOrientationLandscape, nil
	case "portrait":
		return MediaCreateResponseFilesItemOrientationPortrait, nil
	case "square":
		return MediaCreateResponseFilesItemOrientationSquare, nil
	}
	var t MediaCreateResponseFilesItemOrientation
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaCreateResponseFilesItemOrientation) Ptr() *MediaCreateResponseFilesItemOrientation {
	return &m
}

type MediaCreateResponseFilesItemStatus string

const (
	MediaCreateResponseFilesItemStatusWaiting    MediaCreateResponseFilesItemStatus = "waiting"
	MediaCreateResponseFilesItemStatusProcessing MediaCreateResponseFilesItemStatus = "processing"
	MediaCreateResponseFilesItemStatusReady      MediaCreateResponseFilesItemStatus = "ready"
	MediaCreateResponseFilesItemStatusFailed     MediaCreateResponseFilesItemStatus = "failed"
)

func NewMediaCreateResponseFilesItemStatusFromString(s string) (MediaCreateResponseFilesItemStatus, error) {
	switch s {
	case "waiting":
		return MediaCreateResponseFilesItemStatusWaiting, nil
	case "processing":
		return MediaCreateResponseFilesItemStatusProcessing, nil
	case "ready":
		return MediaCreateResponseFilesItemStatusReady, nil
	case "failed":
		return MediaCreateResponseFilesItemStatusFailed, nil
	}
	var t MediaCreateResponseFilesItemStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaCreateResponseFilesItemStatus) Ptr() *MediaCreateResponseFilesItemStatus {
	return &m
}

type MediaCreateResponseKind string

const (
	MediaCreateResponseKindVideo MediaCreateResponseKind = "video"
	MediaCreateResponseKindImage MediaCreateResponseKind = "image"
	MediaCreateResponseKindAudio MediaCreateResponseKind = "audio"
)

func NewMediaCreateResponseKindFromString(s string) (MediaCreateResponseKind, error) {
	switch s {
	case "video":
		return MediaCreateResponseKindVideo, nil
	case "image":
		return MediaCreateResponseKindImage, nil
	case "audio":
		return MediaCreateResponseKindAudio, nil
	}
	var t MediaCreateResponseKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaCreateResponseKind) Ptr() *MediaCreateResponseKind {
	return &m
}

type MediaDeleteResponse struct {
	Message *string `json:"message,omitempty" url:"message,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MediaDeleteResponse) GetMessage() *string {
	if m == nil {
		return nil
	}
	return m.Message
}

func (m *MediaDeleteResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MediaDeleteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MediaDeleteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MediaDeleteResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MediaDeleteResponse) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MediaGetResponse struct {
	ID         string                       `json:"id" url:"id"`
	Object     string                       `json:"object" url:"object"`
	Kind       *MediaGetResponseKind        `json:"kind,omitempty" url:"kind,omitempty"`
	Title      *string                      `json:"title,omitempty" url:"title,omitempty"`
	Alt        *string                      `json:"alt,omitempty" url:"alt,omitempty"`
	Width      *int                         `json:"width,omitempty" url:"width,omitempty"`
	Height     *int                         `json:"height,omitempty" url:"height,omitempty"`
	Duration   *float64                     `json:"duration,omitempty" url:"duration,omitempty"`
	Files      []*MediaGetResponseFilesItem `json:"files,omitempty" url:"files,omitempty"`
	URLs       map[string]interface{}       `json:"urls,omitempty" url:"urls,omitempty"`
	Background *string                      `json:"background,omitempty" url:"background,omitempty"`
	Metadata   map[string]interface{}       `json:"metadata,omitempty" url:"metadata,omitempty"`
	Created    time.Time                    `json:"created" url:"created"`
	Updated    time.Time                    `json:"updated" url:"updated"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MediaGetResponse) GetID() string {
	if m == nil {
		return ""
	}
	return m.ID
}

func (m *MediaGetResponse) GetObject() string {
	if m == nil {
		return ""
	}
	return m.Object
}

func (m *MediaGetResponse) GetKind() *MediaGetResponseKind {
	if m == nil {
		return nil
	}
	return m.Kind
}

func (m *MediaGetResponse) GetTitle() *string {
	if m == nil {
		return nil
	}
	return m.Title
}

func (m *MediaGetResponse) GetAlt() *string {
	if m == nil {
		return nil
	}
	return m.Alt
}

func (m *MediaGetResponse) GetWidth() *int {
	if m == nil {
		return nil
	}
	return m.Width
}

func (m *MediaGetResponse) GetHeight() *int {
	if m == nil {
		return nil
	}
	return m.Height
}

func (m *MediaGetResponse) GetDuration() *float64 {
	if m == nil {
		return nil
	}
	return m.Duration
}

func (m *MediaGetResponse) GetFiles() []*MediaGetResponseFilesItem {
	if m == nil {
		return nil
	}
	return m.Files
}

func (m *MediaGetResponse) GetURLs() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.URLs
}

func (m *MediaGetResponse) GetBackground() *string {
	if m == nil {
		return nil
	}
	return m.Background
}

func (m *MediaGetResponse) GetMetadata() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.Metadata
}

func (m *MediaGetResponse) GetCreated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Created
}

func (m *MediaGetResponse) GetUpdated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Updated
}

func (m *MediaGetResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MediaGetResponse) UnmarshalJSON(data []byte) error {
	type embed MediaGetResponse
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MediaGetResponse(unmarshaler.embed)
	m.Created = unmarshaler.Created.Time()
	m.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MediaGetResponse) MarshalJSON() ([]byte, error) {
	type embed MediaGetResponse
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*m),
		Created: internal.NewDateTime(m.Created),
		Updated: internal.NewDateTime(m.Updated),
	}
	return json.Marshal(marshaler)
}

func (m *MediaGetResponse) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MediaGetResponseFilesItem struct {
	ID           string                                `json:"id" url:"id"`
	Object       MediaGetResponseFilesItemObject       `json:"object" url:"object"`
	Kind         MediaGetResponseFilesItemKind         `json:"kind" url:"kind"`
	Type         string                                `json:"type" url:"type"`
	Codec        *string                               `json:"codec,omitempty" url:"codec,omitempty"`
	Container    *string                               `json:"container,omitempty" url:"container,omitempty"`
	Width        *int                                  `json:"width,omitempty" url:"width,omitempty"`
	Height       *int                                  `json:"height,omitempty" url:"height,omitempty"`
	Orientation  *MediaGetResponseFilesItemOrientation `json:"orientation,omitempty" url:"orientation,omitempty"`
	Rotation     *float64                              `json:"rotation,omitempty" url:"rotation,omitempty"`
	Transparency *bool                                 `json:"transparency,omitempty" url:"transparency,omitempty"`
	Frames       *int                                  `json:"frames,omitempty" url:"frames,omitempty"`
	Duration     *float64                              `json:"duration,omitempty" url:"duration,omitempty"`
	Fps          *float64                              `json:"fps,omitempty" url:"fps,omitempty"`
	Filesize     int                                   `json:"filesize" url:"filesize"`
	Bitrate      *int                                  `json:"bitrate,omitempty" url:"bitrate,omitempty"`
	Ref          *string                               `json:"ref,omitempty" url:"ref,omitempty"`
	Folder       *string                               `json:"folder,omitempty" url:"folder,omitempty"`
	Filename     *string                               `json:"filename,omitempty" url:"filename,omitempty"`
	URL          string                                `json:"url" url:"url"`
	Metadata     map[string]interface{}                `json:"metadata,omitempty" url:"metadata,omitempty"`
	Original     *bool                                 `json:"original,omitempty" url:"original,omitempty"`
	Created      time.Time                             `json:"created" url:"created"`
	Updated      time.Time                             `json:"updated" url:"updated"`
	Status       MediaGetResponseFilesItemStatus       `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MediaGetResponseFilesItem) GetID() string {
	if m == nil {
		return ""
	}
	return m.ID
}

func (m *MediaGetResponseFilesItem) GetObject() MediaGetResponseFilesItemObject {
	if m == nil {
		return ""
	}
	return m.Object
}

func (m *MediaGetResponseFilesItem) GetKind() MediaGetResponseFilesItemKind {
	if m == nil {
		return ""
	}
	return m.Kind
}

func (m *MediaGetResponseFilesItem) GetType() string {
	if m == nil {
		return ""
	}
	return m.Type
}

func (m *MediaGetResponseFilesItem) GetCodec() *string {
	if m == nil {
		return nil
	}
	return m.Codec
}

func (m *MediaGetResponseFilesItem) GetContainer() *string {
	if m == nil {
		return nil
	}
	return m.Container
}

func (m *MediaGetResponseFilesItem) GetWidth() *int {
	if m == nil {
		return nil
	}
	return m.Width
}

func (m *MediaGetResponseFilesItem) GetHeight() *int {
	if m == nil {
		return nil
	}
	return m.Height
}

func (m *MediaGetResponseFilesItem) GetOrientation() *MediaGetResponseFilesItemOrientation {
	if m == nil {
		return nil
	}
	return m.Orientation
}

func (m *MediaGetResponseFilesItem) GetRotation() *float64 {
	if m == nil {
		return nil
	}
	return m.Rotation
}

func (m *MediaGetResponseFilesItem) GetTransparency() *bool {
	if m == nil {
		return nil
	}
	return m.Transparency
}

func (m *MediaGetResponseFilesItem) GetFrames() *int {
	if m == nil {
		return nil
	}
	return m.Frames
}

func (m *MediaGetResponseFilesItem) GetDuration() *float64 {
	if m == nil {
		return nil
	}
	return m.Duration
}

func (m *MediaGetResponseFilesItem) GetFps() *float64 {
	if m == nil {
		return nil
	}
	return m.Fps
}

func (m *MediaGetResponseFilesItem) GetFilesize() int {
	if m == nil {
		return 0
	}
	return m.Filesize
}

func (m *MediaGetResponseFilesItem) GetBitrate() *int {
	if m == nil {
		return nil
	}
	return m.Bitrate
}

func (m *MediaGetResponseFilesItem) GetRef() *string {
	if m == nil {
		return nil
	}
	return m.Ref
}

func (m *MediaGetResponseFilesItem) GetFolder() *string {
	if m == nil {
		return nil
	}
	return m.Folder
}

func (m *MediaGetResponseFilesItem) GetFilename() *string {
	if m == nil {
		return nil
	}
	return m.Filename
}

func (m *MediaGetResponseFilesItem) GetURL() string {
	if m == nil {
		return ""
	}
	return m.URL
}

func (m *MediaGetResponseFilesItem) GetMetadata() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.Metadata
}

func (m *MediaGetResponseFilesItem) GetOriginal() *bool {
	if m == nil {
		return nil
	}
	return m.Original
}

func (m *MediaGetResponseFilesItem) GetCreated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Created
}

func (m *MediaGetResponseFilesItem) GetUpdated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Updated
}

func (m *MediaGetResponseFilesItem) GetStatus() MediaGetResponseFilesItemStatus {
	if m == nil {
		return ""
	}
	return m.Status
}

func (m *MediaGetResponseFilesItem) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MediaGetResponseFilesItem) UnmarshalJSON(data []byte) error {
	type embed MediaGetResponseFilesItem
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MediaGetResponseFilesItem(unmarshaler.embed)
	m.Created = unmarshaler.Created.Time()
	m.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MediaGetResponseFilesItem) MarshalJSON() ([]byte, error) {
	type embed MediaGetResponseFilesItem
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*m),
		Created: internal.NewDateTime(m.Created),
		Updated: internal.NewDateTime(m.Updated),
	}
	return json.Marshal(marshaler)
}

func (m *MediaGetResponseFilesItem) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MediaGetResponseFilesItemKind string

const (
	MediaGetResponseFilesItemKindVideo MediaGetResponseFilesItemKind = "video"
	MediaGetResponseFilesItemKindImage MediaGetResponseFilesItemKind = "image"
	MediaGetResponseFilesItemKindAudio MediaGetResponseFilesItemKind = "audio"
)

func NewMediaGetResponseFilesItemKindFromString(s string) (MediaGetResponseFilesItemKind, error) {
	switch s {
	case "video":
		return MediaGetResponseFilesItemKindVideo, nil
	case "image":
		return MediaGetResponseFilesItemKindImage, nil
	case "audio":
		return MediaGetResponseFilesItemKindAudio, nil
	}
	var t MediaGetResponseFilesItemKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaGetResponseFilesItemKind) Ptr() *MediaGetResponseFilesItemKind {
	return &m
}

type MediaGetResponseFilesItemObject string

const (
	MediaGetResponseFilesItemObjectSource       MediaGetResponseFilesItemObject = "source"
	MediaGetResponseFilesItemObjectTrack        MediaGetResponseFilesItemObject = "track"
	MediaGetResponseFilesItemObjectIntelligence MediaGetResponseFilesItemObject = "intelligence"
)

func NewMediaGetResponseFilesItemObjectFromString(s string) (MediaGetResponseFilesItemObject, error) {
	switch s {
	case "source":
		return MediaGetResponseFilesItemObjectSource, nil
	case "track":
		return MediaGetResponseFilesItemObjectTrack, nil
	case "intelligence":
		return MediaGetResponseFilesItemObjectIntelligence, nil
	}
	var t MediaGetResponseFilesItemObject
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaGetResponseFilesItemObject) Ptr() *MediaGetResponseFilesItemObject {
	return &m
}

type MediaGetResponseFilesItemOrientation string

const (
	MediaGetResponseFilesItemOrientationLandscape MediaGetResponseFilesItemOrientation = "landscape"
	MediaGetResponseFilesItemOrientationPortrait  MediaGetResponseFilesItemOrientation = "portrait"
	MediaGetResponseFilesItemOrientationSquare    MediaGetResponseFilesItemOrientation = "square"
)

func NewMediaGetResponseFilesItemOrientationFromString(s string) (MediaGetResponseFilesItemOrientation, error) {
	switch s {
	case "landscape":
		return MediaGetResponseFilesItemOrientationLandscape, nil
	case "portrait":
		return MediaGetResponseFilesItemOrientationPortrait, nil
	case "square":
		return MediaGetResponseFilesItemOrientationSquare, nil
	}
	var t MediaGetResponseFilesItemOrientation
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaGetResponseFilesItemOrientation) Ptr() *MediaGetResponseFilesItemOrientation {
	return &m
}

type MediaGetResponseFilesItemStatus string

const (
	MediaGetResponseFilesItemStatusWaiting    MediaGetResponseFilesItemStatus = "waiting"
	MediaGetResponseFilesItemStatusProcessing MediaGetResponseFilesItemStatus = "processing"
	MediaGetResponseFilesItemStatusReady      MediaGetResponseFilesItemStatus = "ready"
	MediaGetResponseFilesItemStatusFailed     MediaGetResponseFilesItemStatus = "failed"
)

func NewMediaGetResponseFilesItemStatusFromString(s string) (MediaGetResponseFilesItemStatus, error) {
	switch s {
	case "waiting":
		return MediaGetResponseFilesItemStatusWaiting, nil
	case "processing":
		return MediaGetResponseFilesItemStatusProcessing, nil
	case "ready":
		return MediaGetResponseFilesItemStatusReady, nil
	case "failed":
		return MediaGetResponseFilesItemStatusFailed, nil
	}
	var t MediaGetResponseFilesItemStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaGetResponseFilesItemStatus) Ptr() *MediaGetResponseFilesItemStatus {
	return &m
}

type MediaGetResponseKind string

const (
	MediaGetResponseKindVideo MediaGetResponseKind = "video"
	MediaGetResponseKindImage MediaGetResponseKind = "image"
	MediaGetResponseKindAudio MediaGetResponseKind = "audio"
)

func NewMediaGetResponseKindFromString(s string) (MediaGetResponseKind, error) {
	switch s {
	case "video":
		return MediaGetResponseKindVideo, nil
	case "image":
		return MediaGetResponseKindImage, nil
	case "audio":
		return MediaGetResponseKindAudio, nil
	}
	var t MediaGetResponseKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaGetResponseKind) Ptr() *MediaGetResponseKind {
	return &m
}

type MediaUpdateResponse struct {
	ID         string                          `json:"id" url:"id"`
	Object     string                          `json:"object" url:"object"`
	Kind       *MediaUpdateResponseKind        `json:"kind,omitempty" url:"kind,omitempty"`
	Title      *string                         `json:"title,omitempty" url:"title,omitempty"`
	Alt        *string                         `json:"alt,omitempty" url:"alt,omitempty"`
	Width      *int                            `json:"width,omitempty" url:"width,omitempty"`
	Height     *int                            `json:"height,omitempty" url:"height,omitempty"`
	Duration   *float64                        `json:"duration,omitempty" url:"duration,omitempty"`
	Files      []*MediaUpdateResponseFilesItem `json:"files,omitempty" url:"files,omitempty"`
	URLs       map[string]interface{}          `json:"urls,omitempty" url:"urls,omitempty"`
	Background *string                         `json:"background,omitempty" url:"background,omitempty"`
	Metadata   map[string]interface{}          `json:"metadata,omitempty" url:"metadata,omitempty"`
	Created    time.Time                       `json:"created" url:"created"`
	Updated    time.Time                       `json:"updated" url:"updated"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MediaUpdateResponse) GetID() string {
	if m == nil {
		return ""
	}
	return m.ID
}

func (m *MediaUpdateResponse) GetObject() string {
	if m == nil {
		return ""
	}
	return m.Object
}

func (m *MediaUpdateResponse) GetKind() *MediaUpdateResponseKind {
	if m == nil {
		return nil
	}
	return m.Kind
}

func (m *MediaUpdateResponse) GetTitle() *string {
	if m == nil {
		return nil
	}
	return m.Title
}

func (m *MediaUpdateResponse) GetAlt() *string {
	if m == nil {
		return nil
	}
	return m.Alt
}

func (m *MediaUpdateResponse) GetWidth() *int {
	if m == nil {
		return nil
	}
	return m.Width
}

func (m *MediaUpdateResponse) GetHeight() *int {
	if m == nil {
		return nil
	}
	return m.Height
}

func (m *MediaUpdateResponse) GetDuration() *float64 {
	if m == nil {
		return nil
	}
	return m.Duration
}

func (m *MediaUpdateResponse) GetFiles() []*MediaUpdateResponseFilesItem {
	if m == nil {
		return nil
	}
	return m.Files
}

func (m *MediaUpdateResponse) GetURLs() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.URLs
}

func (m *MediaUpdateResponse) GetBackground() *string {
	if m == nil {
		return nil
	}
	return m.Background
}

func (m *MediaUpdateResponse) GetMetadata() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.Metadata
}

func (m *MediaUpdateResponse) GetCreated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Created
}

func (m *MediaUpdateResponse) GetUpdated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Updated
}

func (m *MediaUpdateResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MediaUpdateResponse) UnmarshalJSON(data []byte) error {
	type embed MediaUpdateResponse
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MediaUpdateResponse(unmarshaler.embed)
	m.Created = unmarshaler.Created.Time()
	m.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MediaUpdateResponse) MarshalJSON() ([]byte, error) {
	type embed MediaUpdateResponse
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*m),
		Created: internal.NewDateTime(m.Created),
		Updated: internal.NewDateTime(m.Updated),
	}
	return json.Marshal(marshaler)
}

func (m *MediaUpdateResponse) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MediaUpdateResponseFilesItem struct {
	ID           string                                   `json:"id" url:"id"`
	Object       MediaUpdateResponseFilesItemObject       `json:"object" url:"object"`
	Kind         MediaUpdateResponseFilesItemKind         `json:"kind" url:"kind"`
	Type         string                                   `json:"type" url:"type"`
	Codec        *string                                  `json:"codec,omitempty" url:"codec,omitempty"`
	Container    *string                                  `json:"container,omitempty" url:"container,omitempty"`
	Width        *int                                     `json:"width,omitempty" url:"width,omitempty"`
	Height       *int                                     `json:"height,omitempty" url:"height,omitempty"`
	Orientation  *MediaUpdateResponseFilesItemOrientation `json:"orientation,omitempty" url:"orientation,omitempty"`
	Rotation     *float64                                 `json:"rotation,omitempty" url:"rotation,omitempty"`
	Transparency *bool                                    `json:"transparency,omitempty" url:"transparency,omitempty"`
	Frames       *int                                     `json:"frames,omitempty" url:"frames,omitempty"`
	Duration     *float64                                 `json:"duration,omitempty" url:"duration,omitempty"`
	Fps          *float64                                 `json:"fps,omitempty" url:"fps,omitempty"`
	Filesize     int                                      `json:"filesize" url:"filesize"`
	Bitrate      *int                                     `json:"bitrate,omitempty" url:"bitrate,omitempty"`
	Ref          *string                                  `json:"ref,omitempty" url:"ref,omitempty"`
	Folder       *string                                  `json:"folder,omitempty" url:"folder,omitempty"`
	Filename     *string                                  `json:"filename,omitempty" url:"filename,omitempty"`
	URL          string                                   `json:"url" url:"url"`
	Metadata     map[string]interface{}                   `json:"metadata,omitempty" url:"metadata,omitempty"`
	Original     *bool                                    `json:"original,omitempty" url:"original,omitempty"`
	Created      time.Time                                `json:"created" url:"created"`
	Updated      time.Time                                `json:"updated" url:"updated"`
	Status       MediaUpdateResponseFilesItemStatus       `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MediaUpdateResponseFilesItem) GetID() string {
	if m == nil {
		return ""
	}
	return m.ID
}

func (m *MediaUpdateResponseFilesItem) GetObject() MediaUpdateResponseFilesItemObject {
	if m == nil {
		return ""
	}
	return m.Object
}

func (m *MediaUpdateResponseFilesItem) GetKind() MediaUpdateResponseFilesItemKind {
	if m == nil {
		return ""
	}
	return m.Kind
}

func (m *MediaUpdateResponseFilesItem) GetType() string {
	if m == nil {
		return ""
	}
	return m.Type
}

func (m *MediaUpdateResponseFilesItem) GetCodec() *string {
	if m == nil {
		return nil
	}
	return m.Codec
}

func (m *MediaUpdateResponseFilesItem) GetContainer() *string {
	if m == nil {
		return nil
	}
	return m.Container
}

func (m *MediaUpdateResponseFilesItem) GetWidth() *int {
	if m == nil {
		return nil
	}
	return m.Width
}

func (m *MediaUpdateResponseFilesItem) GetHeight() *int {
	if m == nil {
		return nil
	}
	return m.Height
}

func (m *MediaUpdateResponseFilesItem) GetOrientation() *MediaUpdateResponseFilesItemOrientation {
	if m == nil {
		return nil
	}
	return m.Orientation
}

func (m *MediaUpdateResponseFilesItem) GetRotation() *float64 {
	if m == nil {
		return nil
	}
	return m.Rotation
}

func (m *MediaUpdateResponseFilesItem) GetTransparency() *bool {
	if m == nil {
		return nil
	}
	return m.Transparency
}

func (m *MediaUpdateResponseFilesItem) GetFrames() *int {
	if m == nil {
		return nil
	}
	return m.Frames
}

func (m *MediaUpdateResponseFilesItem) GetDuration() *float64 {
	if m == nil {
		return nil
	}
	return m.Duration
}

func (m *MediaUpdateResponseFilesItem) GetFps() *float64 {
	if m == nil {
		return nil
	}
	return m.Fps
}

func (m *MediaUpdateResponseFilesItem) GetFilesize() int {
	if m == nil {
		return 0
	}
	return m.Filesize
}

func (m *MediaUpdateResponseFilesItem) GetBitrate() *int {
	if m == nil {
		return nil
	}
	return m.Bitrate
}

func (m *MediaUpdateResponseFilesItem) GetRef() *string {
	if m == nil {
		return nil
	}
	return m.Ref
}

func (m *MediaUpdateResponseFilesItem) GetFolder() *string {
	if m == nil {
		return nil
	}
	return m.Folder
}

func (m *MediaUpdateResponseFilesItem) GetFilename() *string {
	if m == nil {
		return nil
	}
	return m.Filename
}

func (m *MediaUpdateResponseFilesItem) GetURL() string {
	if m == nil {
		return ""
	}
	return m.URL
}

func (m *MediaUpdateResponseFilesItem) GetMetadata() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.Metadata
}

func (m *MediaUpdateResponseFilesItem) GetOriginal() *bool {
	if m == nil {
		return nil
	}
	return m.Original
}

func (m *MediaUpdateResponseFilesItem) GetCreated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Created
}

func (m *MediaUpdateResponseFilesItem) GetUpdated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Updated
}

func (m *MediaUpdateResponseFilesItem) GetStatus() MediaUpdateResponseFilesItemStatus {
	if m == nil {
		return ""
	}
	return m.Status
}

func (m *MediaUpdateResponseFilesItem) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MediaUpdateResponseFilesItem) UnmarshalJSON(data []byte) error {
	type embed MediaUpdateResponseFilesItem
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MediaUpdateResponseFilesItem(unmarshaler.embed)
	m.Created = unmarshaler.Created.Time()
	m.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MediaUpdateResponseFilesItem) MarshalJSON() ([]byte, error) {
	type embed MediaUpdateResponseFilesItem
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*m),
		Created: internal.NewDateTime(m.Created),
		Updated: internal.NewDateTime(m.Updated),
	}
	return json.Marshal(marshaler)
}

func (m *MediaUpdateResponseFilesItem) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MediaUpdateResponseFilesItemKind string

const (
	MediaUpdateResponseFilesItemKindVideo MediaUpdateResponseFilesItemKind = "video"
	MediaUpdateResponseFilesItemKindImage MediaUpdateResponseFilesItemKind = "image"
	MediaUpdateResponseFilesItemKindAudio MediaUpdateResponseFilesItemKind = "audio"
)

func NewMediaUpdateResponseFilesItemKindFromString(s string) (MediaUpdateResponseFilesItemKind, error) {
	switch s {
	case "video":
		return MediaUpdateResponseFilesItemKindVideo, nil
	case "image":
		return MediaUpdateResponseFilesItemKindImage, nil
	case "audio":
		return MediaUpdateResponseFilesItemKindAudio, nil
	}
	var t MediaUpdateResponseFilesItemKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaUpdateResponseFilesItemKind) Ptr() *MediaUpdateResponseFilesItemKind {
	return &m
}

type MediaUpdateResponseFilesItemObject string

const (
	MediaUpdateResponseFilesItemObjectSource       MediaUpdateResponseFilesItemObject = "source"
	MediaUpdateResponseFilesItemObjectTrack        MediaUpdateResponseFilesItemObject = "track"
	MediaUpdateResponseFilesItemObjectIntelligence MediaUpdateResponseFilesItemObject = "intelligence"
)

func NewMediaUpdateResponseFilesItemObjectFromString(s string) (MediaUpdateResponseFilesItemObject, error) {
	switch s {
	case "source":
		return MediaUpdateResponseFilesItemObjectSource, nil
	case "track":
		return MediaUpdateResponseFilesItemObjectTrack, nil
	case "intelligence":
		return MediaUpdateResponseFilesItemObjectIntelligence, nil
	}
	var t MediaUpdateResponseFilesItemObject
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaUpdateResponseFilesItemObject) Ptr() *MediaUpdateResponseFilesItemObject {
	return &m
}

type MediaUpdateResponseFilesItemOrientation string

const (
	MediaUpdateResponseFilesItemOrientationLandscape MediaUpdateResponseFilesItemOrientation = "landscape"
	MediaUpdateResponseFilesItemOrientationPortrait  MediaUpdateResponseFilesItemOrientation = "portrait"
	MediaUpdateResponseFilesItemOrientationSquare    MediaUpdateResponseFilesItemOrientation = "square"
)

func NewMediaUpdateResponseFilesItemOrientationFromString(s string) (MediaUpdateResponseFilesItemOrientation, error) {
	switch s {
	case "landscape":
		return MediaUpdateResponseFilesItemOrientationLandscape, nil
	case "portrait":
		return MediaUpdateResponseFilesItemOrientationPortrait, nil
	case "square":
		return MediaUpdateResponseFilesItemOrientationSquare, nil
	}
	var t MediaUpdateResponseFilesItemOrientation
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaUpdateResponseFilesItemOrientation) Ptr() *MediaUpdateResponseFilesItemOrientation {
	return &m
}

type MediaUpdateResponseFilesItemStatus string

const (
	MediaUpdateResponseFilesItemStatusWaiting    MediaUpdateResponseFilesItemStatus = "waiting"
	MediaUpdateResponseFilesItemStatusProcessing MediaUpdateResponseFilesItemStatus = "processing"
	MediaUpdateResponseFilesItemStatusReady      MediaUpdateResponseFilesItemStatus = "ready"
	MediaUpdateResponseFilesItemStatusFailed     MediaUpdateResponseFilesItemStatus = "failed"
)

func NewMediaUpdateResponseFilesItemStatusFromString(s string) (MediaUpdateResponseFilesItemStatus, error) {
	switch s {
	case "waiting":
		return MediaUpdateResponseFilesItemStatusWaiting, nil
	case "processing":
		return MediaUpdateResponseFilesItemStatusProcessing, nil
	case "ready":
		return MediaUpdateResponseFilesItemStatusReady, nil
	case "failed":
		return MediaUpdateResponseFilesItemStatusFailed, nil
	}
	var t MediaUpdateResponseFilesItemStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaUpdateResponseFilesItemStatus) Ptr() *MediaUpdateResponseFilesItemStatus {
	return &m
}

type MediaUpdateResponseKind string

const (
	MediaUpdateResponseKindVideo MediaUpdateResponseKind = "video"
	MediaUpdateResponseKindImage MediaUpdateResponseKind = "image"
	MediaUpdateResponseKindAudio MediaUpdateResponseKind = "audio"
)

func NewMediaUpdateResponseKindFromString(s string) (MediaUpdateResponseKind, error) {
	switch s {
	case "video":
		return MediaUpdateResponseKindVideo, nil
	case "image":
		return MediaUpdateResponseKindImage, nil
	case "audio":
		return MediaUpdateResponseKindAudio, nil
	}
	var t MediaUpdateResponseKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaUpdateResponseKind) Ptr() *MediaUpdateResponseKind {
	return &m
}

type MediaUpdateRequest struct {
	// Specifies the API Version
	Title         *string                `json:"title,omitempty" url:"-"`
	Alt           *string                `json:"alt,omitempty" url:"-"`
	Metadata      map[string]interface{} `json:"metadata,omitempty" url:"-"`
	acceptVersion string
}

func (m *MediaUpdateRequest) AcceptVersion() string {
	return m.acceptVersion
}

func (m *MediaUpdateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MediaUpdateRequest
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*m = MediaUpdateRequest(body)
	m.acceptVersion = "2025-08-20"
	return nil
}

func (m *MediaUpdateRequest) MarshalJSON() ([]byte, error) {
	type embed MediaUpdateRequest
	var marshaler = struct {
		embed
		AcceptVersion string `json:"Accept-Version"`
	}{
		embed:         embed(*m),
		AcceptVersion: "2025-08-20",
	}
	return json.Marshal(marshaler)
}
