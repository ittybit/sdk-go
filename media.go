// This file was auto-generated by Fern from our API Definition.

package ittybit

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/ittybit/sdk-go/internal"
	time "time"
)

type MediaCreateRequest struct {
	Title    *string                `json:"title,omitempty" url:"-"`
	Alt      *string                `json:"alt,omitempty" url:"-"`
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"-"`
}

type MediaListRequest struct {
	Page  *int `json:"-" url:"page,omitempty"`
	Limit *int `json:"-" url:"limit,omitempty"`
}

type Media struct {
	ID         string                 `json:"id" url:"id"`
	Object     string                 `json:"object" url:"object"`
	Kind       *MediaKind             `json:"kind,omitempty" url:"kind,omitempty"`
	Title      *string                `json:"title,omitempty" url:"title,omitempty"`
	Alt        *string                `json:"alt,omitempty" url:"alt,omitempty"`
	Width      *int                   `json:"width,omitempty" url:"width,omitempty"`
	Height     *int                   `json:"height,omitempty" url:"height,omitempty"`
	Duration   *float64               `json:"duration,omitempty" url:"duration,omitempty"`
	Files      []*MediaSource         `json:"files,omitempty" url:"files,omitempty"`
	URLs       map[string]interface{} `json:"urls,omitempty" url:"urls,omitempty"`
	Background *string                `json:"background,omitempty" url:"background,omitempty"`
	Metadata   map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	Created    time.Time              `json:"created" url:"created"`
	Updated    time.Time              `json:"updated" url:"updated"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *Media) GetID() string {
	if m == nil {
		return ""
	}
	return m.ID
}

func (m *Media) GetObject() string {
	if m == nil {
		return ""
	}
	return m.Object
}

func (m *Media) GetKind() *MediaKind {
	if m == nil {
		return nil
	}
	return m.Kind
}

func (m *Media) GetTitle() *string {
	if m == nil {
		return nil
	}
	return m.Title
}

func (m *Media) GetAlt() *string {
	if m == nil {
		return nil
	}
	return m.Alt
}

func (m *Media) GetWidth() *int {
	if m == nil {
		return nil
	}
	return m.Width
}

func (m *Media) GetHeight() *int {
	if m == nil {
		return nil
	}
	return m.Height
}

func (m *Media) GetDuration() *float64 {
	if m == nil {
		return nil
	}
	return m.Duration
}

func (m *Media) GetFiles() []*MediaSource {
	if m == nil {
		return nil
	}
	return m.Files
}

func (m *Media) GetURLs() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.URLs
}

func (m *Media) GetBackground() *string {
	if m == nil {
		return nil
	}
	return m.Background
}

func (m *Media) GetMetadata() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.Metadata
}

func (m *Media) GetCreated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Created
}

func (m *Media) GetUpdated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Updated
}

func (m *Media) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *Media) UnmarshalJSON(data []byte) error {
	type embed Media
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = Media(unmarshaler.embed)
	m.Created = unmarshaler.Created.Time()
	m.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *Media) MarshalJSON() ([]byte, error) {
	type embed Media
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*m),
		Created: internal.NewDateTime(m.Created),
		Updated: internal.NewDateTime(m.Updated),
	}
	return json.Marshal(marshaler)
}

func (m *Media) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MediaKind string

const (
	MediaKindVideo MediaKind = "video"
	MediaKindImage MediaKind = "image"
	MediaKindAudio MediaKind = "audio"
)

func NewMediaKindFromString(s string) (MediaKind, error) {
	switch s {
	case "video":
		return MediaKindVideo, nil
	case "image":
		return MediaKindImage, nil
	case "audio":
		return MediaKindAudio, nil
	}
	var t MediaKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaKind) Ptr() *MediaKind {
	return &m
}

type MediaListResponse struct {
	Meta  *MetaList  `json:"meta,omitempty" url:"meta,omitempty"`
	Data  []*Media   `json:"data,omitempty" url:"data,omitempty"`
	Error *Error     `json:"error,omitempty" url:"error,omitempty"`
	Links *LinksList `json:"links,omitempty" url:"links,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MediaListResponse) GetMeta() *MetaList {
	if m == nil {
		return nil
	}
	return m.Meta
}

func (m *MediaListResponse) GetData() []*Media {
	if m == nil {
		return nil
	}
	return m.Data
}

func (m *MediaListResponse) GetError() *Error {
	if m == nil {
		return nil
	}
	return m.Error
}

func (m *MediaListResponse) GetLinks() *LinksList {
	if m == nil {
		return nil
	}
	return m.Links
}

func (m *MediaListResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MediaListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MediaListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MediaListResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MediaListResponse) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MediaResponse struct {
	Meta  *Meta  `json:"meta,omitempty" url:"meta,omitempty"`
	Data  *Media `json:"data,omitempty" url:"data,omitempty"`
	Error *Error `json:"error,omitempty" url:"error,omitempty"`
	Links *Links `json:"links,omitempty" url:"links,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MediaResponse) GetMeta() *Meta {
	if m == nil {
		return nil
	}
	return m.Meta
}

func (m *MediaResponse) GetData() *Media {
	if m == nil {
		return nil
	}
	return m.Data
}

func (m *MediaResponse) GetError() *Error {
	if m == nil {
		return nil
	}
	return m.Error
}

func (m *MediaResponse) GetLinks() *Links {
	if m == nil {
		return nil
	}
	return m.Links
}

func (m *MediaResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MediaResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MediaResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MediaResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MediaResponse) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MediaSource struct {
	ID           string                  `json:"id" url:"id"`
	Object       MediaSourceObject       `json:"object" url:"object"`
	Kind         MediaSourceKind         `json:"kind" url:"kind"`
	Type         string                  `json:"type" url:"type"`
	Codec        *string                 `json:"codec,omitempty" url:"codec,omitempty"`
	Container    *string                 `json:"container,omitempty" url:"container,omitempty"`
	Width        *int                    `json:"width,omitempty" url:"width,omitempty"`
	Height       *int                    `json:"height,omitempty" url:"height,omitempty"`
	Orientation  *MediaSourceOrientation `json:"orientation,omitempty" url:"orientation,omitempty"`
	Rotation     *float64                `json:"rotation,omitempty" url:"rotation,omitempty"`
	Transparency *bool                   `json:"transparency,omitempty" url:"transparency,omitempty"`
	Frames       *int                    `json:"frames,omitempty" url:"frames,omitempty"`
	Duration     *float64                `json:"duration,omitempty" url:"duration,omitempty"`
	Fps          *float64                `json:"fps,omitempty" url:"fps,omitempty"`
	Filesize     int                     `json:"filesize" url:"filesize"`
	Bitrate      *int                    `json:"bitrate,omitempty" url:"bitrate,omitempty"`
	Ref          *string                 `json:"ref,omitempty" url:"ref,omitempty"`
	Folder       *string                 `json:"folder,omitempty" url:"folder,omitempty"`
	Filename     *string                 `json:"filename,omitempty" url:"filename,omitempty"`
	URL          string                  `json:"url" url:"url"`
	Metadata     map[string]interface{}  `json:"metadata,omitempty" url:"metadata,omitempty"`
	Original     *bool                   `json:"original,omitempty" url:"original,omitempty"`
	Created      time.Time               `json:"created" url:"created"`
	Updated      time.Time               `json:"updated" url:"updated"`
	Status       MediaSourceStatus       `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MediaSource) GetID() string {
	if m == nil {
		return ""
	}
	return m.ID
}

func (m *MediaSource) GetObject() MediaSourceObject {
	if m == nil {
		return ""
	}
	return m.Object
}

func (m *MediaSource) GetKind() MediaSourceKind {
	if m == nil {
		return ""
	}
	return m.Kind
}

func (m *MediaSource) GetType() string {
	if m == nil {
		return ""
	}
	return m.Type
}

func (m *MediaSource) GetCodec() *string {
	if m == nil {
		return nil
	}
	return m.Codec
}

func (m *MediaSource) GetContainer() *string {
	if m == nil {
		return nil
	}
	return m.Container
}

func (m *MediaSource) GetWidth() *int {
	if m == nil {
		return nil
	}
	return m.Width
}

func (m *MediaSource) GetHeight() *int {
	if m == nil {
		return nil
	}
	return m.Height
}

func (m *MediaSource) GetOrientation() *MediaSourceOrientation {
	if m == nil {
		return nil
	}
	return m.Orientation
}

func (m *MediaSource) GetRotation() *float64 {
	if m == nil {
		return nil
	}
	return m.Rotation
}

func (m *MediaSource) GetTransparency() *bool {
	if m == nil {
		return nil
	}
	return m.Transparency
}

func (m *MediaSource) GetFrames() *int {
	if m == nil {
		return nil
	}
	return m.Frames
}

func (m *MediaSource) GetDuration() *float64 {
	if m == nil {
		return nil
	}
	return m.Duration
}

func (m *MediaSource) GetFps() *float64 {
	if m == nil {
		return nil
	}
	return m.Fps
}

func (m *MediaSource) GetFilesize() int {
	if m == nil {
		return 0
	}
	return m.Filesize
}

func (m *MediaSource) GetBitrate() *int {
	if m == nil {
		return nil
	}
	return m.Bitrate
}

func (m *MediaSource) GetRef() *string {
	if m == nil {
		return nil
	}
	return m.Ref
}

func (m *MediaSource) GetFolder() *string {
	if m == nil {
		return nil
	}
	return m.Folder
}

func (m *MediaSource) GetFilename() *string {
	if m == nil {
		return nil
	}
	return m.Filename
}

func (m *MediaSource) GetURL() string {
	if m == nil {
		return ""
	}
	return m.URL
}

func (m *MediaSource) GetMetadata() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.Metadata
}

func (m *MediaSource) GetOriginal() *bool {
	if m == nil {
		return nil
	}
	return m.Original
}

func (m *MediaSource) GetCreated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Created
}

func (m *MediaSource) GetUpdated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Updated
}

func (m *MediaSource) GetStatus() MediaSourceStatus {
	if m == nil {
		return ""
	}
	return m.Status
}

func (m *MediaSource) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MediaSource) UnmarshalJSON(data []byte) error {
	type embed MediaSource
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MediaSource(unmarshaler.embed)
	m.Created = unmarshaler.Created.Time()
	m.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MediaSource) MarshalJSON() ([]byte, error) {
	type embed MediaSource
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*m),
		Created: internal.NewDateTime(m.Created),
		Updated: internal.NewDateTime(m.Updated),
	}
	return json.Marshal(marshaler)
}

func (m *MediaSource) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MediaSourceKind string

const (
	MediaSourceKindVideo MediaSourceKind = "video"
	MediaSourceKindImage MediaSourceKind = "image"
	MediaSourceKindAudio MediaSourceKind = "audio"
)

func NewMediaSourceKindFromString(s string) (MediaSourceKind, error) {
	switch s {
	case "video":
		return MediaSourceKindVideo, nil
	case "image":
		return MediaSourceKindImage, nil
	case "audio":
		return MediaSourceKindAudio, nil
	}
	var t MediaSourceKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaSourceKind) Ptr() *MediaSourceKind {
	return &m
}

type MediaSourceObject string

const (
	MediaSourceObjectSource       MediaSourceObject = "source"
	MediaSourceObjectTrack        MediaSourceObject = "track"
	MediaSourceObjectIntelligence MediaSourceObject = "intelligence"
)

func NewMediaSourceObjectFromString(s string) (MediaSourceObject, error) {
	switch s {
	case "source":
		return MediaSourceObjectSource, nil
	case "track":
		return MediaSourceObjectTrack, nil
	case "intelligence":
		return MediaSourceObjectIntelligence, nil
	}
	var t MediaSourceObject
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaSourceObject) Ptr() *MediaSourceObject {
	return &m
}

type MediaSourceOrientation string

const (
	MediaSourceOrientationLandscape MediaSourceOrientation = "landscape"
	MediaSourceOrientationPortrait  MediaSourceOrientation = "portrait"
	MediaSourceOrientationSquare    MediaSourceOrientation = "square"
)

func NewMediaSourceOrientationFromString(s string) (MediaSourceOrientation, error) {
	switch s {
	case "landscape":
		return MediaSourceOrientationLandscape, nil
	case "portrait":
		return MediaSourceOrientationPortrait, nil
	case "square":
		return MediaSourceOrientationSquare, nil
	}
	var t MediaSourceOrientation
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaSourceOrientation) Ptr() *MediaSourceOrientation {
	return &m
}

type MediaSourceStatus string

const (
	MediaSourceStatusWaiting    MediaSourceStatus = "waiting"
	MediaSourceStatusProcessing MediaSourceStatus = "processing"
	MediaSourceStatusReady      MediaSourceStatus = "ready"
	MediaSourceStatusFailed     MediaSourceStatus = "failed"
)

func NewMediaSourceStatusFromString(s string) (MediaSourceStatus, error) {
	switch s {
	case "waiting":
		return MediaSourceStatusWaiting, nil
	case "processing":
		return MediaSourceStatusProcessing, nil
	case "ready":
		return MediaSourceStatusReady, nil
	case "failed":
		return MediaSourceStatusFailed, nil
	}
	var t MediaSourceStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaSourceStatus) Ptr() *MediaSourceStatus {
	return &m
}

type MediaUpdateRequest struct {
	Title    *string                `json:"title,omitempty" url:"-"`
	Alt      *string                `json:"alt,omitempty" url:"-"`
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"-"`
}
