// This file was auto-generated by Fern from our API Definition.

package files

import (
	context "context"
	ittybitgosdk "github.com/fern-demo/ittybit-go-sdk"
	core "github.com/fern-demo/ittybit-go-sdk/core"
	internal "github.com/fern-demo/ittybit-go-sdk/internal"
	option "github.com/fern-demo/ittybit-go-sdk/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Retrieves a paginated list of all files associated with the current project. Files can be filtered using query parameters.
func (c *Client) List(
	ctx context.Context,
	request *ittybitgosdk.FilesListRequest,
	opts ...option.RequestOption,
) (*ittybitgosdk.FileListResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.ittybit.com",
	)
	endpointURL := baseURL + "/files"
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &ittybitgosdk.BadRequestError{
				APIError: apiError,
			}
		},
	}

	var response *ittybitgosdk.FileListResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Registers a file from a publicly accessible URL. The file will be ingested asynchronously.
func (c *Client) Create(
	ctx context.Context,
	request *ittybitgosdk.FilesCreateRequest,
	opts ...option.RequestOption,
) (*ittybitgosdk.FileResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.ittybit.com",
	)
	endpointURL := baseURL + "/files"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &ittybitgosdk.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &ittybitgosdk.UnauthorizedError{
				APIError: apiError,
			}
		},
		403: func(apiError *core.APIError) error {
			return &ittybitgosdk.ForbiddenError{
				APIError: apiError,
			}
		},
		404: func(apiError *core.APIError) error {
			return &ittybitgosdk.NotFoundError{
				APIError: apiError,
			}
		},
	}

	var response *ittybitgosdk.FileResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Retrieves detailed information about a specific file identified by its unique ID, including its metadata, media associations, and technical properties.
func (c *Client) Get(
	ctx context.Context,
	id string,
	opts ...option.RequestOption,
) (*ittybitgosdk.FileResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.ittybit.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/files/%v",
		id,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		404: func(apiError *core.APIError) error {
			return &ittybitgosdk.NotFoundError{
				APIError: apiError,
			}
		},
	}

	var response *ittybitgosdk.FileResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Permanently removes a file from the system. This action cannot be undone. Associated media entries may still reference this file ID.
func (c *Client) Delete(
	ctx context.Context,
	id string,
	opts ...option.RequestOption,
) (*ittybitgosdk.FilesDeleteResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.ittybit.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/files/%v",
		id,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		401: func(apiError *core.APIError) error {
			return &ittybitgosdk.UnauthorizedError{
				APIError: apiError,
			}
		},
		403: func(apiError *core.APIError) error {
			return &ittybitgosdk.ForbiddenError{
				APIError: apiError,
			}
		},
		404: func(apiError *core.APIError) error {
			return &ittybitgosdk.NotFoundError{
				APIError: apiError,
			}
		},
	}

	var response *ittybitgosdk.FilesDeleteResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Updates metadata, filename, or folder properties of an existing file. Only the specified fields will be updated.
func (c *Client) Update(
	ctx context.Context,
	id string,
	request *ittybitgosdk.FilesUpdateRequest,
	opts ...option.RequestOption,
) (*ittybitgosdk.FileResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.ittybit.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/files/%v",
		id,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &ittybitgosdk.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &ittybitgosdk.UnauthorizedError{
				APIError: apiError,
			}
		},
		403: func(apiError *core.APIError) error {
			return &ittybitgosdk.ForbiddenError{
				APIError: apiError,
			}
		},
		404: func(apiError *core.APIError) error {
			return &ittybitgosdk.NotFoundError{
				APIError: apiError,
			}
		},
	}

	var response *ittybitgosdk.FileResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPatch,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
