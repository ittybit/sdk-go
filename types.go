// This file was auto-generated by Fern from our API Definition.

package ittybit

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/ittybit/sdk-go/internal"
	time "time"
)

type APIResponseBase = interface{}

type Automation struct {
	ID          string                    `json:"id" url:"id"`
	Name        *string                   `json:"name,omitempty" url:"name,omitempty"`
	Description *string                   `json:"description,omitempty" url:"description,omitempty"`
	Trigger     *AutomationTrigger        `json:"trigger,omitempty" url:"trigger,omitempty"`
	Workflow    []*AutomationWorkflowItem `json:"workflow,omitempty" url:"workflow,omitempty"`
	Status      AutomationStatus          `json:"status" url:"status"`
	Created     time.Time                 `json:"created" url:"created"`
	Updated     time.Time                 `json:"updated" url:"updated"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Automation) GetID() string {
	if a == nil {
		return ""
	}
	return a.ID
}

func (a *Automation) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *Automation) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *Automation) GetTrigger() *AutomationTrigger {
	if a == nil {
		return nil
	}
	return a.Trigger
}

func (a *Automation) GetWorkflow() []*AutomationWorkflowItem {
	if a == nil {
		return nil
	}
	return a.Workflow
}

func (a *Automation) GetStatus() AutomationStatus {
	if a == nil {
		return ""
	}
	return a.Status
}

func (a *Automation) GetCreated() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.Created
}

func (a *Automation) GetUpdated() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.Updated
}

func (a *Automation) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Automation) UnmarshalJSON(data []byte) error {
	type embed Automation
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = Automation(unmarshaler.embed)
	a.Created = unmarshaler.Created.Time()
	a.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Automation) MarshalJSON() ([]byte, error) {
	type embed Automation
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*a),
		Created: internal.NewDateTime(a.Created),
		Updated: internal.NewDateTime(a.Updated),
	}
	return json.Marshal(marshaler)
}

func (a *Automation) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationListResponse = []*AutomationListResponseItem

type AutomationListResponseItem struct {
	ID          string                                    `json:"id" url:"id"`
	Name        *string                                   `json:"name,omitempty" url:"name,omitempty"`
	Description *string                                   `json:"description,omitempty" url:"description,omitempty"`
	Trigger     *AutomationListResponseItemTrigger        `json:"trigger,omitempty" url:"trigger,omitempty"`
	Workflow    []*AutomationListResponseItemWorkflowItem `json:"workflow,omitempty" url:"workflow,omitempty"`
	Status      AutomationListResponseItemStatus          `json:"status" url:"status"`
	Created     time.Time                                 `json:"created" url:"created"`
	Updated     time.Time                                 `json:"updated" url:"updated"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationListResponseItem) GetID() string {
	if a == nil {
		return ""
	}
	return a.ID
}

func (a *AutomationListResponseItem) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AutomationListResponseItem) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *AutomationListResponseItem) GetTrigger() *AutomationListResponseItemTrigger {
	if a == nil {
		return nil
	}
	return a.Trigger
}

func (a *AutomationListResponseItem) GetWorkflow() []*AutomationListResponseItemWorkflowItem {
	if a == nil {
		return nil
	}
	return a.Workflow
}

func (a *AutomationListResponseItem) GetStatus() AutomationListResponseItemStatus {
	if a == nil {
		return ""
	}
	return a.Status
}

func (a *AutomationListResponseItem) GetCreated() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.Created
}

func (a *AutomationListResponseItem) GetUpdated() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.Updated
}

func (a *AutomationListResponseItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationListResponseItem) UnmarshalJSON(data []byte) error {
	type embed AutomationListResponseItem
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationListResponseItem(unmarshaler.embed)
	a.Created = unmarshaler.Created.Time()
	a.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationListResponseItem) MarshalJSON() ([]byte, error) {
	type embed AutomationListResponseItem
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*a),
		Created: internal.NewDateTime(a.Created),
		Updated: internal.NewDateTime(a.Updated),
	}
	return json.Marshal(marshaler)
}

func (a *AutomationListResponseItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationListResponseItemStatus string

const (
	AutomationListResponseItemStatusActive AutomationListResponseItemStatus = "active"
	AutomationListResponseItemStatusPaused AutomationListResponseItemStatus = "paused"
)

func NewAutomationListResponseItemStatusFromString(s string) (AutomationListResponseItemStatus, error) {
	switch s {
	case "active":
		return AutomationListResponseItemStatusActive, nil
	case "paused":
		return AutomationListResponseItemStatusPaused, nil
	}
	var t AutomationListResponseItemStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationListResponseItemStatus) Ptr() *AutomationListResponseItemStatus {
	return &a
}

type AutomationListResponseItemTrigger struct {
	kind  string
	event string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationListResponseItemTrigger) Kind() string {
	return a.kind
}

func (a *AutomationListResponseItemTrigger) Event() string {
	return a.event
}

func (a *AutomationListResponseItemTrigger) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationListResponseItemTrigger) UnmarshalJSON(data []byte) error {
	type embed AutomationListResponseItemTrigger
	var unmarshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationListResponseItemTrigger(unmarshaler.embed)
	if unmarshaler.Kind != "event" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "event", unmarshaler.Kind)
	}
	a.kind = unmarshaler.Kind
	if unmarshaler.Event != "media.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "media.created", unmarshaler.Event)
	}
	a.event = unmarshaler.Event
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "kind", "event")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationListResponseItemTrigger) MarshalJSON() ([]byte, error) {
	type embed AutomationListResponseItemTrigger
	var marshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
		Kind:  "event",
		Event: "media.created",
	}
	return json.Marshal(marshaler)
}

func (a *AutomationListResponseItemTrigger) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationListResponseItemWorkflowItem struct {
	AutomationListResponseItemWorkflowItemRef        *AutomationListResponseItemWorkflowItemRef
	AutomationListResponseItemWorkflowItemConditions *AutomationListResponseItemWorkflowItemConditions

	typ string
}

func NewAutomationListResponseItemWorkflowItemFromAutomationListResponseItemWorkflowItemRef(value *AutomationListResponseItemWorkflowItemRef) *AutomationListResponseItemWorkflowItem {
	return &AutomationListResponseItemWorkflowItem{typ: "AutomationListResponseItemWorkflowItemRef", AutomationListResponseItemWorkflowItemRef: value}
}

func NewAutomationListResponseItemWorkflowItemFromAutomationListResponseItemWorkflowItemConditions(value *AutomationListResponseItemWorkflowItemConditions) *AutomationListResponseItemWorkflowItem {
	return &AutomationListResponseItemWorkflowItem{typ: "AutomationListResponseItemWorkflowItemConditions", AutomationListResponseItemWorkflowItemConditions: value}
}

func (a *AutomationListResponseItemWorkflowItem) GetAutomationListResponseItemWorkflowItemRef() *AutomationListResponseItemWorkflowItemRef {
	if a == nil {
		return nil
	}
	return a.AutomationListResponseItemWorkflowItemRef
}

func (a *AutomationListResponseItemWorkflowItem) GetAutomationListResponseItemWorkflowItemConditions() *AutomationListResponseItemWorkflowItemConditions {
	if a == nil {
		return nil
	}
	return a.AutomationListResponseItemWorkflowItemConditions
}

func (a *AutomationListResponseItemWorkflowItem) UnmarshalJSON(data []byte) error {
	valueAutomationListResponseItemWorkflowItemRef := new(AutomationListResponseItemWorkflowItemRef)
	if err := json.Unmarshal(data, &valueAutomationListResponseItemWorkflowItemRef); err == nil {
		a.typ = "AutomationListResponseItemWorkflowItemRef"
		a.AutomationListResponseItemWorkflowItemRef = valueAutomationListResponseItemWorkflowItemRef
		return nil
	}
	valueAutomationListResponseItemWorkflowItemConditions := new(AutomationListResponseItemWorkflowItemConditions)
	if err := json.Unmarshal(data, &valueAutomationListResponseItemWorkflowItemConditions); err == nil {
		a.typ = "AutomationListResponseItemWorkflowItemConditions"
		a.AutomationListResponseItemWorkflowItemConditions = valueAutomationListResponseItemWorkflowItemConditions
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AutomationListResponseItemWorkflowItem) MarshalJSON() ([]byte, error) {
	if a.typ == "AutomationListResponseItemWorkflowItemRef" || a.AutomationListResponseItemWorkflowItemRef != nil {
		return json.Marshal(a.AutomationListResponseItemWorkflowItemRef)
	}
	if a.typ == "AutomationListResponseItemWorkflowItemConditions" || a.AutomationListResponseItemWorkflowItemConditions != nil {
		return json.Marshal(a.AutomationListResponseItemWorkflowItemConditions)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AutomationListResponseItemWorkflowItemVisitor interface {
	VisitAutomationListResponseItemWorkflowItemRef(*AutomationListResponseItemWorkflowItemRef) error
	VisitAutomationListResponseItemWorkflowItemConditions(*AutomationListResponseItemWorkflowItemConditions) error
}

func (a *AutomationListResponseItemWorkflowItem) Accept(visitor AutomationListResponseItemWorkflowItemVisitor) error {
	if a.typ == "AutomationListResponseItemWorkflowItemRef" || a.AutomationListResponseItemWorkflowItemRef != nil {
		return visitor.VisitAutomationListResponseItemWorkflowItemRef(a.AutomationListResponseItemWorkflowItemRef)
	}
	if a.typ == "AutomationListResponseItemWorkflowItemConditions" || a.AutomationListResponseItemWorkflowItemConditions != nil {
		return visitor.VisitAutomationListResponseItemWorkflowItemConditions(a.AutomationListResponseItemWorkflowItemConditions)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AutomationListResponseItemWorkflowItemConditions struct {
	Conditions []*AutomationListResponseItemWorkflowItemConditionsConditionsItem `json:"conditions,omitempty" url:"conditions,omitempty"`
	Next       []*AutomationListResponseItemWorkflowItemConditionsNextItem       `json:"next,omitempty" url:"next,omitempty"`
	kind       string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationListResponseItemWorkflowItemConditions) GetConditions() []*AutomationListResponseItemWorkflowItemConditionsConditionsItem {
	if a == nil {
		return nil
	}
	return a.Conditions
}

func (a *AutomationListResponseItemWorkflowItemConditions) GetNext() []*AutomationListResponseItemWorkflowItemConditionsNextItem {
	if a == nil {
		return nil
	}
	return a.Next
}

func (a *AutomationListResponseItemWorkflowItemConditions) Kind() string {
	return a.kind
}

func (a *AutomationListResponseItemWorkflowItemConditions) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationListResponseItemWorkflowItemConditions) UnmarshalJSON(data []byte) error {
	type embed AutomationListResponseItemWorkflowItemConditions
	var unmarshaler = struct {
		embed
		Kind string `json:"kind"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationListResponseItemWorkflowItemConditions(unmarshaler.embed)
	if unmarshaler.Kind != "conditions" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "conditions", unmarshaler.Kind)
	}
	a.kind = unmarshaler.Kind
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "kind")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationListResponseItemWorkflowItemConditions) MarshalJSON() ([]byte, error) {
	type embed AutomationListResponseItemWorkflowItemConditions
	var marshaler = struct {
		embed
		Kind string `json:"kind"`
	}{
		embed: embed(*a),
		Kind:  "conditions",
	}
	return json.Marshal(marshaler)
}

func (a *AutomationListResponseItemWorkflowItemConditions) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationListResponseItemWorkflowItemConditionsConditionsItem struct {
	Prop  *string `json:"prop,omitempty" url:"prop,omitempty"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationListResponseItemWorkflowItemConditionsConditionsItem) GetProp() *string {
	if a == nil {
		return nil
	}
	return a.Prop
}

func (a *AutomationListResponseItemWorkflowItemConditionsConditionsItem) GetValue() *string {
	if a == nil {
		return nil
	}
	return a.Value
}

func (a *AutomationListResponseItemWorkflowItemConditionsConditionsItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationListResponseItemWorkflowItemConditionsConditionsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationListResponseItemWorkflowItemConditionsConditionsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationListResponseItemWorkflowItemConditionsConditionsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationListResponseItemWorkflowItemConditionsConditionsItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationListResponseItemWorkflowItemConditionsNextItem struct {
	Kind *string `json:"kind,omitempty" url:"kind,omitempty"`
	Ref  *string `json:"ref,omitempty" url:"ref,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationListResponseItemWorkflowItemConditionsNextItem) GetKind() *string {
	if a == nil {
		return nil
	}
	return a.Kind
}

func (a *AutomationListResponseItemWorkflowItemConditionsNextItem) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationListResponseItemWorkflowItemConditionsNextItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationListResponseItemWorkflowItemConditionsNextItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationListResponseItemWorkflowItemConditionsNextItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationListResponseItemWorkflowItemConditionsNextItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationListResponseItemWorkflowItemConditionsNextItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationListResponseItemWorkflowItemRef struct {
	Kind AutomationListResponseItemWorkflowItemRefKind        `json:"kind" url:"kind"`
	Ref  *string                                              `json:"ref,omitempty" url:"ref,omitempty"`
	Next []*AutomationListResponseItemWorkflowItemRefNextItem `json:"next,omitempty" url:"next,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationListResponseItemWorkflowItemRef) GetKind() AutomationListResponseItemWorkflowItemRefKind {
	if a == nil {
		return ""
	}
	return a.Kind
}

func (a *AutomationListResponseItemWorkflowItemRef) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationListResponseItemWorkflowItemRef) GetNext() []*AutomationListResponseItemWorkflowItemRefNextItem {
	if a == nil {
		return nil
	}
	return a.Next
}

func (a *AutomationListResponseItemWorkflowItemRef) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationListResponseItemWorkflowItemRef) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationListResponseItemWorkflowItemRef
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationListResponseItemWorkflowItemRef(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationListResponseItemWorkflowItemRef) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationListResponseItemWorkflowItemRefKind string

const (
	AutomationListResponseItemWorkflowItemRefKindVideo       AutomationListResponseItemWorkflowItemRefKind = "video"
	AutomationListResponseItemWorkflowItemRefKindImage       AutomationListResponseItemWorkflowItemRefKind = "image"
	AutomationListResponseItemWorkflowItemRefKindAudio       AutomationListResponseItemWorkflowItemRefKind = "audio"
	AutomationListResponseItemWorkflowItemRefKindChapters    AutomationListResponseItemWorkflowItemRefKind = "chapters"
	AutomationListResponseItemWorkflowItemRefKindSubtitles   AutomationListResponseItemWorkflowItemRefKind = "subtitles"
	AutomationListResponseItemWorkflowItemRefKindThumbnails  AutomationListResponseItemWorkflowItemRefKind = "thumbnails"
	AutomationListResponseItemWorkflowItemRefKindNsfw        AutomationListResponseItemWorkflowItemRefKind = "nsfw"
	AutomationListResponseItemWorkflowItemRefKindSpeech      AutomationListResponseItemWorkflowItemRefKind = "speech"
	AutomationListResponseItemWorkflowItemRefKindDescription AutomationListResponseItemWorkflowItemRefKind = "description"
	AutomationListResponseItemWorkflowItemRefKindOutline     AutomationListResponseItemWorkflowItemRefKind = "outline"
	AutomationListResponseItemWorkflowItemRefKindPrompt      AutomationListResponseItemWorkflowItemRefKind = "prompt"
	AutomationListResponseItemWorkflowItemRefKindHTTP        AutomationListResponseItemWorkflowItemRefKind = "http"
)

func NewAutomationListResponseItemWorkflowItemRefKindFromString(s string) (AutomationListResponseItemWorkflowItemRefKind, error) {
	switch s {
	case "video":
		return AutomationListResponseItemWorkflowItemRefKindVideo, nil
	case "image":
		return AutomationListResponseItemWorkflowItemRefKindImage, nil
	case "audio":
		return AutomationListResponseItemWorkflowItemRefKindAudio, nil
	case "chapters":
		return AutomationListResponseItemWorkflowItemRefKindChapters, nil
	case "subtitles":
		return AutomationListResponseItemWorkflowItemRefKindSubtitles, nil
	case "thumbnails":
		return AutomationListResponseItemWorkflowItemRefKindThumbnails, nil
	case "nsfw":
		return AutomationListResponseItemWorkflowItemRefKindNsfw, nil
	case "speech":
		return AutomationListResponseItemWorkflowItemRefKindSpeech, nil
	case "description":
		return AutomationListResponseItemWorkflowItemRefKindDescription, nil
	case "outline":
		return AutomationListResponseItemWorkflowItemRefKindOutline, nil
	case "prompt":
		return AutomationListResponseItemWorkflowItemRefKindPrompt, nil
	case "http":
		return AutomationListResponseItemWorkflowItemRefKindHTTP, nil
	}
	var t AutomationListResponseItemWorkflowItemRefKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationListResponseItemWorkflowItemRefKind) Ptr() *AutomationListResponseItemWorkflowItemRefKind {
	return &a
}

type AutomationListResponseItemWorkflowItemRefNextItem struct {
	Kind *string `json:"kind,omitempty" url:"kind,omitempty"`
	Ref  *string `json:"ref,omitempty" url:"ref,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationListResponseItemWorkflowItemRefNextItem) GetKind() *string {
	if a == nil {
		return nil
	}
	return a.Kind
}

func (a *AutomationListResponseItemWorkflowItemRefNextItem) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationListResponseItemWorkflowItemRefNextItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationListResponseItemWorkflowItemRefNextItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationListResponseItemWorkflowItemRefNextItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationListResponseItemWorkflowItemRefNextItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationListResponseItemWorkflowItemRefNextItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationResponse struct {
	ID          string                            `json:"id" url:"id"`
	Name        *string                           `json:"name,omitempty" url:"name,omitempty"`
	Description *string                           `json:"description,omitempty" url:"description,omitempty"`
	Trigger     *AutomationResponseTrigger        `json:"trigger,omitempty" url:"trigger,omitempty"`
	Workflow    []*AutomationResponseWorkflowItem `json:"workflow,omitempty" url:"workflow,omitempty"`
	Status      AutomationResponseStatus          `json:"status" url:"status"`
	Created     time.Time                         `json:"created" url:"created"`
	Updated     time.Time                         `json:"updated" url:"updated"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationResponse) GetID() string {
	if a == nil {
		return ""
	}
	return a.ID
}

func (a *AutomationResponse) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AutomationResponse) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *AutomationResponse) GetTrigger() *AutomationResponseTrigger {
	if a == nil {
		return nil
	}
	return a.Trigger
}

func (a *AutomationResponse) GetWorkflow() []*AutomationResponseWorkflowItem {
	if a == nil {
		return nil
	}
	return a.Workflow
}

func (a *AutomationResponse) GetStatus() AutomationResponseStatus {
	if a == nil {
		return ""
	}
	return a.Status
}

func (a *AutomationResponse) GetCreated() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.Created
}

func (a *AutomationResponse) GetUpdated() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.Updated
}

func (a *AutomationResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationResponse) UnmarshalJSON(data []byte) error {
	type embed AutomationResponse
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationResponse(unmarshaler.embed)
	a.Created = unmarshaler.Created.Time()
	a.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationResponse) MarshalJSON() ([]byte, error) {
	type embed AutomationResponse
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*a),
		Created: internal.NewDateTime(a.Created),
		Updated: internal.NewDateTime(a.Updated),
	}
	return json.Marshal(marshaler)
}

func (a *AutomationResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationResponseStatus string

const (
	AutomationResponseStatusActive AutomationResponseStatus = "active"
	AutomationResponseStatusPaused AutomationResponseStatus = "paused"
)

func NewAutomationResponseStatusFromString(s string) (AutomationResponseStatus, error) {
	switch s {
	case "active":
		return AutomationResponseStatusActive, nil
	case "paused":
		return AutomationResponseStatusPaused, nil
	}
	var t AutomationResponseStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationResponseStatus) Ptr() *AutomationResponseStatus {
	return &a
}

type AutomationResponseTrigger struct {
	kind  string
	event string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationResponseTrigger) Kind() string {
	return a.kind
}

func (a *AutomationResponseTrigger) Event() string {
	return a.event
}

func (a *AutomationResponseTrigger) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationResponseTrigger) UnmarshalJSON(data []byte) error {
	type embed AutomationResponseTrigger
	var unmarshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationResponseTrigger(unmarshaler.embed)
	if unmarshaler.Kind != "event" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "event", unmarshaler.Kind)
	}
	a.kind = unmarshaler.Kind
	if unmarshaler.Event != "media.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "media.created", unmarshaler.Event)
	}
	a.event = unmarshaler.Event
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "kind", "event")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationResponseTrigger) MarshalJSON() ([]byte, error) {
	type embed AutomationResponseTrigger
	var marshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
		Kind:  "event",
		Event: "media.created",
	}
	return json.Marshal(marshaler)
}

func (a *AutomationResponseTrigger) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationResponseWorkflowItem struct {
	AutomationResponseWorkflowItemRef        *AutomationResponseWorkflowItemRef
	AutomationResponseWorkflowItemConditions *AutomationResponseWorkflowItemConditions

	typ string
}

func NewAutomationResponseWorkflowItemFromAutomationResponseWorkflowItemRef(value *AutomationResponseWorkflowItemRef) *AutomationResponseWorkflowItem {
	return &AutomationResponseWorkflowItem{typ: "AutomationResponseWorkflowItemRef", AutomationResponseWorkflowItemRef: value}
}

func NewAutomationResponseWorkflowItemFromAutomationResponseWorkflowItemConditions(value *AutomationResponseWorkflowItemConditions) *AutomationResponseWorkflowItem {
	return &AutomationResponseWorkflowItem{typ: "AutomationResponseWorkflowItemConditions", AutomationResponseWorkflowItemConditions: value}
}

func (a *AutomationResponseWorkflowItem) GetAutomationResponseWorkflowItemRef() *AutomationResponseWorkflowItemRef {
	if a == nil {
		return nil
	}
	return a.AutomationResponseWorkflowItemRef
}

func (a *AutomationResponseWorkflowItem) GetAutomationResponseWorkflowItemConditions() *AutomationResponseWorkflowItemConditions {
	if a == nil {
		return nil
	}
	return a.AutomationResponseWorkflowItemConditions
}

func (a *AutomationResponseWorkflowItem) UnmarshalJSON(data []byte) error {
	valueAutomationResponseWorkflowItemRef := new(AutomationResponseWorkflowItemRef)
	if err := json.Unmarshal(data, &valueAutomationResponseWorkflowItemRef); err == nil {
		a.typ = "AutomationResponseWorkflowItemRef"
		a.AutomationResponseWorkflowItemRef = valueAutomationResponseWorkflowItemRef
		return nil
	}
	valueAutomationResponseWorkflowItemConditions := new(AutomationResponseWorkflowItemConditions)
	if err := json.Unmarshal(data, &valueAutomationResponseWorkflowItemConditions); err == nil {
		a.typ = "AutomationResponseWorkflowItemConditions"
		a.AutomationResponseWorkflowItemConditions = valueAutomationResponseWorkflowItemConditions
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AutomationResponseWorkflowItem) MarshalJSON() ([]byte, error) {
	if a.typ == "AutomationResponseWorkflowItemRef" || a.AutomationResponseWorkflowItemRef != nil {
		return json.Marshal(a.AutomationResponseWorkflowItemRef)
	}
	if a.typ == "AutomationResponseWorkflowItemConditions" || a.AutomationResponseWorkflowItemConditions != nil {
		return json.Marshal(a.AutomationResponseWorkflowItemConditions)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AutomationResponseWorkflowItemVisitor interface {
	VisitAutomationResponseWorkflowItemRef(*AutomationResponseWorkflowItemRef) error
	VisitAutomationResponseWorkflowItemConditions(*AutomationResponseWorkflowItemConditions) error
}

func (a *AutomationResponseWorkflowItem) Accept(visitor AutomationResponseWorkflowItemVisitor) error {
	if a.typ == "AutomationResponseWorkflowItemRef" || a.AutomationResponseWorkflowItemRef != nil {
		return visitor.VisitAutomationResponseWorkflowItemRef(a.AutomationResponseWorkflowItemRef)
	}
	if a.typ == "AutomationResponseWorkflowItemConditions" || a.AutomationResponseWorkflowItemConditions != nil {
		return visitor.VisitAutomationResponseWorkflowItemConditions(a.AutomationResponseWorkflowItemConditions)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AutomationResponseWorkflowItemConditions struct {
	Conditions []*AutomationResponseWorkflowItemConditionsConditionsItem `json:"conditions,omitempty" url:"conditions,omitempty"`
	Next       []*AutomationResponseWorkflowItemConditionsNextItem       `json:"next,omitempty" url:"next,omitempty"`
	kind       string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationResponseWorkflowItemConditions) GetConditions() []*AutomationResponseWorkflowItemConditionsConditionsItem {
	if a == nil {
		return nil
	}
	return a.Conditions
}

func (a *AutomationResponseWorkflowItemConditions) GetNext() []*AutomationResponseWorkflowItemConditionsNextItem {
	if a == nil {
		return nil
	}
	return a.Next
}

func (a *AutomationResponseWorkflowItemConditions) Kind() string {
	return a.kind
}

func (a *AutomationResponseWorkflowItemConditions) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationResponseWorkflowItemConditions) UnmarshalJSON(data []byte) error {
	type embed AutomationResponseWorkflowItemConditions
	var unmarshaler = struct {
		embed
		Kind string `json:"kind"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationResponseWorkflowItemConditions(unmarshaler.embed)
	if unmarshaler.Kind != "conditions" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "conditions", unmarshaler.Kind)
	}
	a.kind = unmarshaler.Kind
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "kind")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationResponseWorkflowItemConditions) MarshalJSON() ([]byte, error) {
	type embed AutomationResponseWorkflowItemConditions
	var marshaler = struct {
		embed
		Kind string `json:"kind"`
	}{
		embed: embed(*a),
		Kind:  "conditions",
	}
	return json.Marshal(marshaler)
}

func (a *AutomationResponseWorkflowItemConditions) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationResponseWorkflowItemConditionsConditionsItem struct {
	Prop  *string `json:"prop,omitempty" url:"prop,omitempty"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationResponseWorkflowItemConditionsConditionsItem) GetProp() *string {
	if a == nil {
		return nil
	}
	return a.Prop
}

func (a *AutomationResponseWorkflowItemConditionsConditionsItem) GetValue() *string {
	if a == nil {
		return nil
	}
	return a.Value
}

func (a *AutomationResponseWorkflowItemConditionsConditionsItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationResponseWorkflowItemConditionsConditionsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationResponseWorkflowItemConditionsConditionsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationResponseWorkflowItemConditionsConditionsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationResponseWorkflowItemConditionsConditionsItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationResponseWorkflowItemConditionsNextItem struct {
	Kind *string `json:"kind,omitempty" url:"kind,omitempty"`
	Ref  *string `json:"ref,omitempty" url:"ref,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationResponseWorkflowItemConditionsNextItem) GetKind() *string {
	if a == nil {
		return nil
	}
	return a.Kind
}

func (a *AutomationResponseWorkflowItemConditionsNextItem) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationResponseWorkflowItemConditionsNextItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationResponseWorkflowItemConditionsNextItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationResponseWorkflowItemConditionsNextItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationResponseWorkflowItemConditionsNextItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationResponseWorkflowItemConditionsNextItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationResponseWorkflowItemRef struct {
	Kind AutomationResponseWorkflowItemRefKind        `json:"kind" url:"kind"`
	Ref  *string                                      `json:"ref,omitempty" url:"ref,omitempty"`
	Next []*AutomationResponseWorkflowItemRefNextItem `json:"next,omitempty" url:"next,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationResponseWorkflowItemRef) GetKind() AutomationResponseWorkflowItemRefKind {
	if a == nil {
		return ""
	}
	return a.Kind
}

func (a *AutomationResponseWorkflowItemRef) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationResponseWorkflowItemRef) GetNext() []*AutomationResponseWorkflowItemRefNextItem {
	if a == nil {
		return nil
	}
	return a.Next
}

func (a *AutomationResponseWorkflowItemRef) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationResponseWorkflowItemRef) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationResponseWorkflowItemRef
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationResponseWorkflowItemRef(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationResponseWorkflowItemRef) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationResponseWorkflowItemRefKind string

const (
	AutomationResponseWorkflowItemRefKindVideo       AutomationResponseWorkflowItemRefKind = "video"
	AutomationResponseWorkflowItemRefKindImage       AutomationResponseWorkflowItemRefKind = "image"
	AutomationResponseWorkflowItemRefKindAudio       AutomationResponseWorkflowItemRefKind = "audio"
	AutomationResponseWorkflowItemRefKindChapters    AutomationResponseWorkflowItemRefKind = "chapters"
	AutomationResponseWorkflowItemRefKindSubtitles   AutomationResponseWorkflowItemRefKind = "subtitles"
	AutomationResponseWorkflowItemRefKindThumbnails  AutomationResponseWorkflowItemRefKind = "thumbnails"
	AutomationResponseWorkflowItemRefKindNsfw        AutomationResponseWorkflowItemRefKind = "nsfw"
	AutomationResponseWorkflowItemRefKindSpeech      AutomationResponseWorkflowItemRefKind = "speech"
	AutomationResponseWorkflowItemRefKindDescription AutomationResponseWorkflowItemRefKind = "description"
	AutomationResponseWorkflowItemRefKindOutline     AutomationResponseWorkflowItemRefKind = "outline"
	AutomationResponseWorkflowItemRefKindPrompt      AutomationResponseWorkflowItemRefKind = "prompt"
	AutomationResponseWorkflowItemRefKindHTTP        AutomationResponseWorkflowItemRefKind = "http"
)

func NewAutomationResponseWorkflowItemRefKindFromString(s string) (AutomationResponseWorkflowItemRefKind, error) {
	switch s {
	case "video":
		return AutomationResponseWorkflowItemRefKindVideo, nil
	case "image":
		return AutomationResponseWorkflowItemRefKindImage, nil
	case "audio":
		return AutomationResponseWorkflowItemRefKindAudio, nil
	case "chapters":
		return AutomationResponseWorkflowItemRefKindChapters, nil
	case "subtitles":
		return AutomationResponseWorkflowItemRefKindSubtitles, nil
	case "thumbnails":
		return AutomationResponseWorkflowItemRefKindThumbnails, nil
	case "nsfw":
		return AutomationResponseWorkflowItemRefKindNsfw, nil
	case "speech":
		return AutomationResponseWorkflowItemRefKindSpeech, nil
	case "description":
		return AutomationResponseWorkflowItemRefKindDescription, nil
	case "outline":
		return AutomationResponseWorkflowItemRefKindOutline, nil
	case "prompt":
		return AutomationResponseWorkflowItemRefKindPrompt, nil
	case "http":
		return AutomationResponseWorkflowItemRefKindHTTP, nil
	}
	var t AutomationResponseWorkflowItemRefKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationResponseWorkflowItemRefKind) Ptr() *AutomationResponseWorkflowItemRefKind {
	return &a
}

type AutomationResponseWorkflowItemRefNextItem struct {
	Kind *string `json:"kind,omitempty" url:"kind,omitempty"`
	Ref  *string `json:"ref,omitempty" url:"ref,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationResponseWorkflowItemRefNextItem) GetKind() *string {
	if a == nil {
		return nil
	}
	return a.Kind
}

func (a *AutomationResponseWorkflowItemRefNextItem) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationResponseWorkflowItemRefNextItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationResponseWorkflowItemRefNextItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationResponseWorkflowItemRefNextItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationResponseWorkflowItemRefNextItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationResponseWorkflowItemRefNextItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationStatus string

const (
	AutomationStatusActive AutomationStatus = "active"
	AutomationStatusPaused AutomationStatus = "paused"
)

func NewAutomationStatusFromString(s string) (AutomationStatus, error) {
	switch s {
	case "active":
		return AutomationStatusActive, nil
	case "paused":
		return AutomationStatusPaused, nil
	}
	var t AutomationStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationStatus) Ptr() *AutomationStatus {
	return &a
}

type AutomationTrigger struct {
	kind  string
	event string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationTrigger) Kind() string {
	return a.kind
}

func (a *AutomationTrigger) Event() string {
	return a.event
}

func (a *AutomationTrigger) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationTrigger) UnmarshalJSON(data []byte) error {
	type embed AutomationTrigger
	var unmarshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationTrigger(unmarshaler.embed)
	if unmarshaler.Kind != "event" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "event", unmarshaler.Kind)
	}
	a.kind = unmarshaler.Kind
	if unmarshaler.Event != "media.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "media.created", unmarshaler.Event)
	}
	a.event = unmarshaler.Event
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "kind", "event")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationTrigger) MarshalJSON() ([]byte, error) {
	type embed AutomationTrigger
	var marshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
		Kind:  "event",
		Event: "media.created",
	}
	return json.Marshal(marshaler)
}

func (a *AutomationTrigger) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationWorkflowItem struct {
	AutomationWorkflowItemRef        *AutomationWorkflowItemRef
	AutomationWorkflowItemConditions *AutomationWorkflowItemConditions

	typ string
}

func NewAutomationWorkflowItemFromAutomationWorkflowItemRef(value *AutomationWorkflowItemRef) *AutomationWorkflowItem {
	return &AutomationWorkflowItem{typ: "AutomationWorkflowItemRef", AutomationWorkflowItemRef: value}
}

func NewAutomationWorkflowItemFromAutomationWorkflowItemConditions(value *AutomationWorkflowItemConditions) *AutomationWorkflowItem {
	return &AutomationWorkflowItem{typ: "AutomationWorkflowItemConditions", AutomationWorkflowItemConditions: value}
}

func (a *AutomationWorkflowItem) GetAutomationWorkflowItemRef() *AutomationWorkflowItemRef {
	if a == nil {
		return nil
	}
	return a.AutomationWorkflowItemRef
}

func (a *AutomationWorkflowItem) GetAutomationWorkflowItemConditions() *AutomationWorkflowItemConditions {
	if a == nil {
		return nil
	}
	return a.AutomationWorkflowItemConditions
}

func (a *AutomationWorkflowItem) UnmarshalJSON(data []byte) error {
	valueAutomationWorkflowItemRef := new(AutomationWorkflowItemRef)
	if err := json.Unmarshal(data, &valueAutomationWorkflowItemRef); err == nil {
		a.typ = "AutomationWorkflowItemRef"
		a.AutomationWorkflowItemRef = valueAutomationWorkflowItemRef
		return nil
	}
	valueAutomationWorkflowItemConditions := new(AutomationWorkflowItemConditions)
	if err := json.Unmarshal(data, &valueAutomationWorkflowItemConditions); err == nil {
		a.typ = "AutomationWorkflowItemConditions"
		a.AutomationWorkflowItemConditions = valueAutomationWorkflowItemConditions
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AutomationWorkflowItem) MarshalJSON() ([]byte, error) {
	if a.typ == "AutomationWorkflowItemRef" || a.AutomationWorkflowItemRef != nil {
		return json.Marshal(a.AutomationWorkflowItemRef)
	}
	if a.typ == "AutomationWorkflowItemConditions" || a.AutomationWorkflowItemConditions != nil {
		return json.Marshal(a.AutomationWorkflowItemConditions)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AutomationWorkflowItemVisitor interface {
	VisitAutomationWorkflowItemRef(*AutomationWorkflowItemRef) error
	VisitAutomationWorkflowItemConditions(*AutomationWorkflowItemConditions) error
}

func (a *AutomationWorkflowItem) Accept(visitor AutomationWorkflowItemVisitor) error {
	if a.typ == "AutomationWorkflowItemRef" || a.AutomationWorkflowItemRef != nil {
		return visitor.VisitAutomationWorkflowItemRef(a.AutomationWorkflowItemRef)
	}
	if a.typ == "AutomationWorkflowItemConditions" || a.AutomationWorkflowItemConditions != nil {
		return visitor.VisitAutomationWorkflowItemConditions(a.AutomationWorkflowItemConditions)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AutomationWorkflowItemConditions struct {
	Conditions []*AutomationWorkflowItemConditionsConditionsItem `json:"conditions,omitempty" url:"conditions,omitempty"`
	Next       []*AutomationWorkflowItemConditionsNextItem       `json:"next,omitempty" url:"next,omitempty"`
	kind       string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationWorkflowItemConditions) GetConditions() []*AutomationWorkflowItemConditionsConditionsItem {
	if a == nil {
		return nil
	}
	return a.Conditions
}

func (a *AutomationWorkflowItemConditions) GetNext() []*AutomationWorkflowItemConditionsNextItem {
	if a == nil {
		return nil
	}
	return a.Next
}

func (a *AutomationWorkflowItemConditions) Kind() string {
	return a.kind
}

func (a *AutomationWorkflowItemConditions) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationWorkflowItemConditions) UnmarshalJSON(data []byte) error {
	type embed AutomationWorkflowItemConditions
	var unmarshaler = struct {
		embed
		Kind string `json:"kind"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationWorkflowItemConditions(unmarshaler.embed)
	if unmarshaler.Kind != "conditions" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "conditions", unmarshaler.Kind)
	}
	a.kind = unmarshaler.Kind
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "kind")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationWorkflowItemConditions) MarshalJSON() ([]byte, error) {
	type embed AutomationWorkflowItemConditions
	var marshaler = struct {
		embed
		Kind string `json:"kind"`
	}{
		embed: embed(*a),
		Kind:  "conditions",
	}
	return json.Marshal(marshaler)
}

func (a *AutomationWorkflowItemConditions) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationWorkflowItemConditionsConditionsItem struct {
	Prop  *string `json:"prop,omitempty" url:"prop,omitempty"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationWorkflowItemConditionsConditionsItem) GetProp() *string {
	if a == nil {
		return nil
	}
	return a.Prop
}

func (a *AutomationWorkflowItemConditionsConditionsItem) GetValue() *string {
	if a == nil {
		return nil
	}
	return a.Value
}

func (a *AutomationWorkflowItemConditionsConditionsItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationWorkflowItemConditionsConditionsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationWorkflowItemConditionsConditionsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationWorkflowItemConditionsConditionsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationWorkflowItemConditionsConditionsItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationWorkflowItemConditionsNextItem struct {
	Kind *string `json:"kind,omitempty" url:"kind,omitempty"`
	Ref  *string `json:"ref,omitempty" url:"ref,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationWorkflowItemConditionsNextItem) GetKind() *string {
	if a == nil {
		return nil
	}
	return a.Kind
}

func (a *AutomationWorkflowItemConditionsNextItem) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationWorkflowItemConditionsNextItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationWorkflowItemConditionsNextItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationWorkflowItemConditionsNextItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationWorkflowItemConditionsNextItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationWorkflowItemConditionsNextItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationWorkflowItemRef struct {
	Kind AutomationWorkflowItemRefKind        `json:"kind" url:"kind"`
	Ref  *string                              `json:"ref,omitempty" url:"ref,omitempty"`
	Next []*AutomationWorkflowItemRefNextItem `json:"next,omitempty" url:"next,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationWorkflowItemRef) GetKind() AutomationWorkflowItemRefKind {
	if a == nil {
		return ""
	}
	return a.Kind
}

func (a *AutomationWorkflowItemRef) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationWorkflowItemRef) GetNext() []*AutomationWorkflowItemRefNextItem {
	if a == nil {
		return nil
	}
	return a.Next
}

func (a *AutomationWorkflowItemRef) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationWorkflowItemRef) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationWorkflowItemRef
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationWorkflowItemRef(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationWorkflowItemRef) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationWorkflowItemRefKind string

const (
	AutomationWorkflowItemRefKindVideo       AutomationWorkflowItemRefKind = "video"
	AutomationWorkflowItemRefKindImage       AutomationWorkflowItemRefKind = "image"
	AutomationWorkflowItemRefKindAudio       AutomationWorkflowItemRefKind = "audio"
	AutomationWorkflowItemRefKindChapters    AutomationWorkflowItemRefKind = "chapters"
	AutomationWorkflowItemRefKindSubtitles   AutomationWorkflowItemRefKind = "subtitles"
	AutomationWorkflowItemRefKindThumbnails  AutomationWorkflowItemRefKind = "thumbnails"
	AutomationWorkflowItemRefKindNsfw        AutomationWorkflowItemRefKind = "nsfw"
	AutomationWorkflowItemRefKindSpeech      AutomationWorkflowItemRefKind = "speech"
	AutomationWorkflowItemRefKindDescription AutomationWorkflowItemRefKind = "description"
	AutomationWorkflowItemRefKindOutline     AutomationWorkflowItemRefKind = "outline"
	AutomationWorkflowItemRefKindPrompt      AutomationWorkflowItemRefKind = "prompt"
	AutomationWorkflowItemRefKindHTTP        AutomationWorkflowItemRefKind = "http"
)

func NewAutomationWorkflowItemRefKindFromString(s string) (AutomationWorkflowItemRefKind, error) {
	switch s {
	case "video":
		return AutomationWorkflowItemRefKindVideo, nil
	case "image":
		return AutomationWorkflowItemRefKindImage, nil
	case "audio":
		return AutomationWorkflowItemRefKindAudio, nil
	case "chapters":
		return AutomationWorkflowItemRefKindChapters, nil
	case "subtitles":
		return AutomationWorkflowItemRefKindSubtitles, nil
	case "thumbnails":
		return AutomationWorkflowItemRefKindThumbnails, nil
	case "nsfw":
		return AutomationWorkflowItemRefKindNsfw, nil
	case "speech":
		return AutomationWorkflowItemRefKindSpeech, nil
	case "description":
		return AutomationWorkflowItemRefKindDescription, nil
	case "outline":
		return AutomationWorkflowItemRefKindOutline, nil
	case "prompt":
		return AutomationWorkflowItemRefKindPrompt, nil
	case "http":
		return AutomationWorkflowItemRefKindHTTP, nil
	}
	var t AutomationWorkflowItemRefKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationWorkflowItemRefKind) Ptr() *AutomationWorkflowItemRefKind {
	return &a
}

type AutomationWorkflowItemRefNextItem struct {
	Kind *string `json:"kind,omitempty" url:"kind,omitempty"`
	Ref  *string `json:"ref,omitempty" url:"ref,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationWorkflowItemRefNextItem) GetKind() *string {
	if a == nil {
		return nil
	}
	return a.Kind
}

func (a *AutomationWorkflowItemRefNextItem) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationWorkflowItemRefNextItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationWorkflowItemRefNextItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationWorkflowItemRefNextItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationWorkflowItemRefNextItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationWorkflowItemRefNextItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ConditionsTaskStep struct {
	Conditions []*ConditionsTaskStepConditionsItem `json:"conditions,omitempty" url:"conditions,omitempty"`
	Next       []*ConditionsTaskStepNextItem       `json:"next,omitempty" url:"next,omitempty"`
	kind       string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConditionsTaskStep) GetConditions() []*ConditionsTaskStepConditionsItem {
	if c == nil {
		return nil
	}
	return c.Conditions
}

func (c *ConditionsTaskStep) GetNext() []*ConditionsTaskStepNextItem {
	if c == nil {
		return nil
	}
	return c.Next
}

func (c *ConditionsTaskStep) Kind() string {
	return c.kind
}

func (c *ConditionsTaskStep) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConditionsTaskStep) UnmarshalJSON(data []byte) error {
	type embed ConditionsTaskStep
	var unmarshaler = struct {
		embed
		Kind string `json:"kind"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ConditionsTaskStep(unmarshaler.embed)
	if unmarshaler.Kind != "conditions" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "conditions", unmarshaler.Kind)
	}
	c.kind = unmarshaler.Kind
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "kind")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConditionsTaskStep) MarshalJSON() ([]byte, error) {
	type embed ConditionsTaskStep
	var marshaler = struct {
		embed
		Kind string `json:"kind"`
	}{
		embed: embed(*c),
		Kind:  "conditions",
	}
	return json.Marshal(marshaler)
}

func (c *ConditionsTaskStep) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConditionsTaskStepConditionsItem struct {
	Prop  *string `json:"prop,omitempty" url:"prop,omitempty"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConditionsTaskStepConditionsItem) GetProp() *string {
	if c == nil {
		return nil
	}
	return c.Prop
}

func (c *ConditionsTaskStepConditionsItem) GetValue() *string {
	if c == nil {
		return nil
	}
	return c.Value
}

func (c *ConditionsTaskStepConditionsItem) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConditionsTaskStepConditionsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler ConditionsTaskStepConditionsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConditionsTaskStepConditionsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConditionsTaskStepConditionsItem) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConditionsTaskStepNextItem struct {
	Kind *string `json:"kind,omitempty" url:"kind,omitempty"`
	Ref  *string `json:"ref,omitempty" url:"ref,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConditionsTaskStepNextItem) GetKind() *string {
	if c == nil {
		return nil
	}
	return c.Kind
}

func (c *ConditionsTaskStepNextItem) GetRef() *string {
	if c == nil {
		return nil
	}
	return c.Ref
}

func (c *ConditionsTaskStepNextItem) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConditionsTaskStepNextItem) UnmarshalJSON(data []byte) error {
	type unmarshaler ConditionsTaskStepNextItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConditionsTaskStepNextItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConditionsTaskStepNextItem) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type Confirmation struct {
	Message *string `json:"message,omitempty" url:"message,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *Confirmation) GetMessage() *string {
	if c == nil {
		return nil
	}
	return c.Message
}

func (c *Confirmation) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Confirmation) UnmarshalJSON(data []byte) error {
	type unmarshaler Confirmation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Confirmation(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *Confirmation) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConfirmationResponse struct {
	Message *string `json:"message,omitempty" url:"message,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConfirmationResponse) GetMessage() *string {
	if c == nil {
		return nil
	}
	return c.Message
}

func (c *ConfirmationResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConfirmationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ConfirmationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConfirmationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConfirmationResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type Created = time.Time

type CreatedBy = *string

type Error = *string

type File struct {
	ID           string                 `json:"id" url:"id"`
	MediaID      string                 `json:"media_id" url:"media_id"`
	Object       FileObject             `json:"object" url:"object"`
	Kind         FileKind               `json:"kind" url:"kind"`
	Type         string                 `json:"type" url:"type"`
	Codec        *string                `json:"codec,omitempty" url:"codec,omitempty"`
	Container    *string                `json:"container,omitempty" url:"container,omitempty"`
	Width        *int                   `json:"width,omitempty" url:"width,omitempty"`
	Height       *int                   `json:"height,omitempty" url:"height,omitempty"`
	Orientation  *string                `json:"orientation,omitempty" url:"orientation,omitempty"`
	Rotation     *float64               `json:"rotation,omitempty" url:"rotation,omitempty"`
	Transparency *bool                  `json:"transparency,omitempty" url:"transparency,omitempty"`
	Animated     *bool                  `json:"animated,omitempty" url:"animated,omitempty"`
	Frames       *int                   `json:"frames,omitempty" url:"frames,omitempty"`
	Duration     *float64               `json:"duration,omitempty" url:"duration,omitempty"`
	Fps          *float64               `json:"fps,omitempty" url:"fps,omitempty"`
	Filesize     int                    `json:"filesize" url:"filesize"`
	Bitrate      *int                   `json:"bitrate,omitempty" url:"bitrate,omitempty"`
	Language     *string                `json:"language,omitempty" url:"language,omitempty"`
	Label        *string                `json:"label,omitempty" url:"label,omitempty"`
	Ref          *string                `json:"ref,omitempty" url:"ref,omitempty"`
	Folder       *string                `json:"folder,omitempty" url:"folder,omitempty"`
	Filename     *string                `json:"filename,omitempty" url:"filename,omitempty"`
	URL          string                 `json:"url" url:"url"`
	Placeholder  *string                `json:"placeholder,omitempty" url:"placeholder,omitempty"`
	Background   *string                `json:"background,omitempty" url:"background,omitempty"`
	Metadata     map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	Original     *bool                  `json:"original,omitempty" url:"original,omitempty"`
	CreatedBy    *string                `json:"created_by,omitempty" url:"created_by,omitempty"`
	Created      time.Time              `json:"created" url:"created"`
	Updated      time.Time              `json:"updated" url:"updated"`
	Status       FileStatus             `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *File) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *File) GetMediaID() string {
	if f == nil {
		return ""
	}
	return f.MediaID
}

func (f *File) GetObject() FileObject {
	if f == nil {
		return ""
	}
	return f.Object
}

func (f *File) GetKind() FileKind {
	if f == nil {
		return ""
	}
	return f.Kind
}

func (f *File) GetType() string {
	if f == nil {
		return ""
	}
	return f.Type
}

func (f *File) GetCodec() *string {
	if f == nil {
		return nil
	}
	return f.Codec
}

func (f *File) GetContainer() *string {
	if f == nil {
		return nil
	}
	return f.Container
}

func (f *File) GetWidth() *int {
	if f == nil {
		return nil
	}
	return f.Width
}

func (f *File) GetHeight() *int {
	if f == nil {
		return nil
	}
	return f.Height
}

func (f *File) GetOrientation() *string {
	if f == nil {
		return nil
	}
	return f.Orientation
}

func (f *File) GetRotation() *float64 {
	if f == nil {
		return nil
	}
	return f.Rotation
}

func (f *File) GetTransparency() *bool {
	if f == nil {
		return nil
	}
	return f.Transparency
}

func (f *File) GetAnimated() *bool {
	if f == nil {
		return nil
	}
	return f.Animated
}

func (f *File) GetFrames() *int {
	if f == nil {
		return nil
	}
	return f.Frames
}

func (f *File) GetDuration() *float64 {
	if f == nil {
		return nil
	}
	return f.Duration
}

func (f *File) GetFps() *float64 {
	if f == nil {
		return nil
	}
	return f.Fps
}

func (f *File) GetFilesize() int {
	if f == nil {
		return 0
	}
	return f.Filesize
}

func (f *File) GetBitrate() *int {
	if f == nil {
		return nil
	}
	return f.Bitrate
}

func (f *File) GetLanguage() *string {
	if f == nil {
		return nil
	}
	return f.Language
}

func (f *File) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *File) GetRef() *string {
	if f == nil {
		return nil
	}
	return f.Ref
}

func (f *File) GetFolder() *string {
	if f == nil {
		return nil
	}
	return f.Folder
}

func (f *File) GetFilename() *string {
	if f == nil {
		return nil
	}
	return f.Filename
}

func (f *File) GetURL() string {
	if f == nil {
		return ""
	}
	return f.URL
}

func (f *File) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *File) GetBackground() *string {
	if f == nil {
		return nil
	}
	return f.Background
}

func (f *File) GetMetadata() map[string]interface{} {
	if f == nil {
		return nil
	}
	return f.Metadata
}

func (f *File) GetOriginal() *bool {
	if f == nil {
		return nil
	}
	return f.Original
}

func (f *File) GetCreatedBy() *string {
	if f == nil {
		return nil
	}
	return f.CreatedBy
}

func (f *File) GetCreated() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.Created
}

func (f *File) GetUpdated() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.Updated
}

func (f *File) GetStatus() FileStatus {
	if f == nil {
		return ""
	}
	return f.Status
}

func (f *File) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *File) UnmarshalJSON(data []byte) error {
	type embed File
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = File(unmarshaler.embed)
	f.Created = unmarshaler.Created.Time()
	f.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *File) MarshalJSON() ([]byte, error) {
	type embed File
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*f),
		Created: internal.NewDateTime(f.Created),
		Updated: internal.NewDateTime(f.Updated),
	}
	return json.Marshal(marshaler)
}

func (f *File) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FileKind string

const (
	FileKindVideo FileKind = "video"
	FileKindImage FileKind = "image"
	FileKindAudio FileKind = "audio"
)

func NewFileKindFromString(s string) (FileKind, error) {
	switch s {
	case "video":
		return FileKindVideo, nil
	case "image":
		return FileKindImage, nil
	case "audio":
		return FileKindAudio, nil
	}
	var t FileKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FileKind) Ptr() *FileKind {
	return &f
}

type FileListResponse = []*FileListResponseItem

type FileListResponseItem struct {
	ID           string                     `json:"id" url:"id"`
	MediaID      string                     `json:"media_id" url:"media_id"`
	Object       FileListResponseItemObject `json:"object" url:"object"`
	Kind         FileListResponseItemKind   `json:"kind" url:"kind"`
	Type         string                     `json:"type" url:"type"`
	Codec        *string                    `json:"codec,omitempty" url:"codec,omitempty"`
	Container    *string                    `json:"container,omitempty" url:"container,omitempty"`
	Width        *int                       `json:"width,omitempty" url:"width,omitempty"`
	Height       *int                       `json:"height,omitempty" url:"height,omitempty"`
	Orientation  *string                    `json:"orientation,omitempty" url:"orientation,omitempty"`
	Rotation     *float64                   `json:"rotation,omitempty" url:"rotation,omitempty"`
	Transparency *bool                      `json:"transparency,omitempty" url:"transparency,omitempty"`
	Animated     *bool                      `json:"animated,omitempty" url:"animated,omitempty"`
	Frames       *int                       `json:"frames,omitempty" url:"frames,omitempty"`
	Duration     *float64                   `json:"duration,omitempty" url:"duration,omitempty"`
	Fps          *float64                   `json:"fps,omitempty" url:"fps,omitempty"`
	Filesize     int                        `json:"filesize" url:"filesize"`
	Bitrate      *int                       `json:"bitrate,omitempty" url:"bitrate,omitempty"`
	Language     *string                    `json:"language,omitempty" url:"language,omitempty"`
	Label        *string                    `json:"label,omitempty" url:"label,omitempty"`
	Ref          *string                    `json:"ref,omitempty" url:"ref,omitempty"`
	Folder       *string                    `json:"folder,omitempty" url:"folder,omitempty"`
	Filename     *string                    `json:"filename,omitempty" url:"filename,omitempty"`
	URL          string                     `json:"url" url:"url"`
	Placeholder  *string                    `json:"placeholder,omitempty" url:"placeholder,omitempty"`
	Background   *string                    `json:"background,omitempty" url:"background,omitempty"`
	Metadata     map[string]interface{}     `json:"metadata,omitempty" url:"metadata,omitempty"`
	Original     *bool                      `json:"original,omitempty" url:"original,omitempty"`
	CreatedBy    *string                    `json:"created_by,omitempty" url:"created_by,omitempty"`
	Created      time.Time                  `json:"created" url:"created"`
	Updated      time.Time                  `json:"updated" url:"updated"`
	Status       FileListResponseItemStatus `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FileListResponseItem) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FileListResponseItem) GetMediaID() string {
	if f == nil {
		return ""
	}
	return f.MediaID
}

func (f *FileListResponseItem) GetObject() FileListResponseItemObject {
	if f == nil {
		return ""
	}
	return f.Object
}

func (f *FileListResponseItem) GetKind() FileListResponseItemKind {
	if f == nil {
		return ""
	}
	return f.Kind
}

func (f *FileListResponseItem) GetType() string {
	if f == nil {
		return ""
	}
	return f.Type
}

func (f *FileListResponseItem) GetCodec() *string {
	if f == nil {
		return nil
	}
	return f.Codec
}

func (f *FileListResponseItem) GetContainer() *string {
	if f == nil {
		return nil
	}
	return f.Container
}

func (f *FileListResponseItem) GetWidth() *int {
	if f == nil {
		return nil
	}
	return f.Width
}

func (f *FileListResponseItem) GetHeight() *int {
	if f == nil {
		return nil
	}
	return f.Height
}

func (f *FileListResponseItem) GetOrientation() *string {
	if f == nil {
		return nil
	}
	return f.Orientation
}

func (f *FileListResponseItem) GetRotation() *float64 {
	if f == nil {
		return nil
	}
	return f.Rotation
}

func (f *FileListResponseItem) GetTransparency() *bool {
	if f == nil {
		return nil
	}
	return f.Transparency
}

func (f *FileListResponseItem) GetAnimated() *bool {
	if f == nil {
		return nil
	}
	return f.Animated
}

func (f *FileListResponseItem) GetFrames() *int {
	if f == nil {
		return nil
	}
	return f.Frames
}

func (f *FileListResponseItem) GetDuration() *float64 {
	if f == nil {
		return nil
	}
	return f.Duration
}

func (f *FileListResponseItem) GetFps() *float64 {
	if f == nil {
		return nil
	}
	return f.Fps
}

func (f *FileListResponseItem) GetFilesize() int {
	if f == nil {
		return 0
	}
	return f.Filesize
}

func (f *FileListResponseItem) GetBitrate() *int {
	if f == nil {
		return nil
	}
	return f.Bitrate
}

func (f *FileListResponseItem) GetLanguage() *string {
	if f == nil {
		return nil
	}
	return f.Language
}

func (f *FileListResponseItem) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FileListResponseItem) GetRef() *string {
	if f == nil {
		return nil
	}
	return f.Ref
}

func (f *FileListResponseItem) GetFolder() *string {
	if f == nil {
		return nil
	}
	return f.Folder
}

func (f *FileListResponseItem) GetFilename() *string {
	if f == nil {
		return nil
	}
	return f.Filename
}

func (f *FileListResponseItem) GetURL() string {
	if f == nil {
		return ""
	}
	return f.URL
}

func (f *FileListResponseItem) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FileListResponseItem) GetBackground() *string {
	if f == nil {
		return nil
	}
	return f.Background
}

func (f *FileListResponseItem) GetMetadata() map[string]interface{} {
	if f == nil {
		return nil
	}
	return f.Metadata
}

func (f *FileListResponseItem) GetOriginal() *bool {
	if f == nil {
		return nil
	}
	return f.Original
}

func (f *FileListResponseItem) GetCreatedBy() *string {
	if f == nil {
		return nil
	}
	return f.CreatedBy
}

func (f *FileListResponseItem) GetCreated() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.Created
}

func (f *FileListResponseItem) GetUpdated() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.Updated
}

func (f *FileListResponseItem) GetStatus() FileListResponseItemStatus {
	if f == nil {
		return ""
	}
	return f.Status
}

func (f *FileListResponseItem) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FileListResponseItem) UnmarshalJSON(data []byte) error {
	type embed FileListResponseItem
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FileListResponseItem(unmarshaler.embed)
	f.Created = unmarshaler.Created.Time()
	f.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FileListResponseItem) MarshalJSON() ([]byte, error) {
	type embed FileListResponseItem
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*f),
		Created: internal.NewDateTime(f.Created),
		Updated: internal.NewDateTime(f.Updated),
	}
	return json.Marshal(marshaler)
}

func (f *FileListResponseItem) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FileListResponseItemKind string

const (
	FileListResponseItemKindVideo FileListResponseItemKind = "video"
	FileListResponseItemKindImage FileListResponseItemKind = "image"
	FileListResponseItemKindAudio FileListResponseItemKind = "audio"
)

func NewFileListResponseItemKindFromString(s string) (FileListResponseItemKind, error) {
	switch s {
	case "video":
		return FileListResponseItemKindVideo, nil
	case "image":
		return FileListResponseItemKindImage, nil
	case "audio":
		return FileListResponseItemKindAudio, nil
	}
	var t FileListResponseItemKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FileListResponseItemKind) Ptr() *FileListResponseItemKind {
	return &f
}

type FileListResponseItemObject string

const (
	FileListResponseItemObjectSource       FileListResponseItemObject = "source"
	FileListResponseItemObjectTrack        FileListResponseItemObject = "track"
	FileListResponseItemObjectIntelligence FileListResponseItemObject = "intelligence"
)

func NewFileListResponseItemObjectFromString(s string) (FileListResponseItemObject, error) {
	switch s {
	case "source":
		return FileListResponseItemObjectSource, nil
	case "track":
		return FileListResponseItemObjectTrack, nil
	case "intelligence":
		return FileListResponseItemObjectIntelligence, nil
	}
	var t FileListResponseItemObject
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FileListResponseItemObject) Ptr() *FileListResponseItemObject {
	return &f
}

type FileListResponseItemStatus string

const (
	FileListResponseItemStatusWaiting    FileListResponseItemStatus = "waiting"
	FileListResponseItemStatusProcessing FileListResponseItemStatus = "processing"
	FileListResponseItemStatusReady      FileListResponseItemStatus = "ready"
	FileListResponseItemStatusFailed     FileListResponseItemStatus = "failed"
)

func NewFileListResponseItemStatusFromString(s string) (FileListResponseItemStatus, error) {
	switch s {
	case "waiting":
		return FileListResponseItemStatusWaiting, nil
	case "processing":
		return FileListResponseItemStatusProcessing, nil
	case "ready":
		return FileListResponseItemStatusReady, nil
	case "failed":
		return FileListResponseItemStatusFailed, nil
	}
	var t FileListResponseItemStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FileListResponseItemStatus) Ptr() *FileListResponseItemStatus {
	return &f
}

type FileObject string

const (
	FileObjectSource       FileObject = "source"
	FileObjectTrack        FileObject = "track"
	FileObjectIntelligence FileObject = "intelligence"
)

func NewFileObjectFromString(s string) (FileObject, error) {
	switch s {
	case "source":
		return FileObjectSource, nil
	case "track":
		return FileObjectTrack, nil
	case "intelligence":
		return FileObjectIntelligence, nil
	}
	var t FileObject
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FileObject) Ptr() *FileObject {
	return &f
}

type FileResponse struct {
	ID           string                 `json:"id" url:"id"`
	MediaID      string                 `json:"media_id" url:"media_id"`
	Object       FileResponseObject     `json:"object" url:"object"`
	Kind         FileResponseKind       `json:"kind" url:"kind"`
	Type         string                 `json:"type" url:"type"`
	Codec        *string                `json:"codec,omitempty" url:"codec,omitempty"`
	Container    *string                `json:"container,omitempty" url:"container,omitempty"`
	Width        *int                   `json:"width,omitempty" url:"width,omitempty"`
	Height       *int                   `json:"height,omitempty" url:"height,omitempty"`
	Orientation  *string                `json:"orientation,omitempty" url:"orientation,omitempty"`
	Rotation     *float64               `json:"rotation,omitempty" url:"rotation,omitempty"`
	Transparency *bool                  `json:"transparency,omitempty" url:"transparency,omitempty"`
	Animated     *bool                  `json:"animated,omitempty" url:"animated,omitempty"`
	Frames       *int                   `json:"frames,omitempty" url:"frames,omitempty"`
	Duration     *float64               `json:"duration,omitempty" url:"duration,omitempty"`
	Fps          *float64               `json:"fps,omitempty" url:"fps,omitempty"`
	Filesize     int                    `json:"filesize" url:"filesize"`
	Bitrate      *int                   `json:"bitrate,omitempty" url:"bitrate,omitempty"`
	Language     *string                `json:"language,omitempty" url:"language,omitempty"`
	Label        *string                `json:"label,omitempty" url:"label,omitempty"`
	Ref          *string                `json:"ref,omitempty" url:"ref,omitempty"`
	Folder       *string                `json:"folder,omitempty" url:"folder,omitempty"`
	Filename     *string                `json:"filename,omitempty" url:"filename,omitempty"`
	URL          string                 `json:"url" url:"url"`
	Placeholder  *string                `json:"placeholder,omitempty" url:"placeholder,omitempty"`
	Background   *string                `json:"background,omitempty" url:"background,omitempty"`
	Metadata     map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	Original     *bool                  `json:"original,omitempty" url:"original,omitempty"`
	CreatedBy    *string                `json:"created_by,omitempty" url:"created_by,omitempty"`
	Created      time.Time              `json:"created" url:"created"`
	Updated      time.Time              `json:"updated" url:"updated"`
	Status       FileResponseStatus     `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FileResponse) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FileResponse) GetMediaID() string {
	if f == nil {
		return ""
	}
	return f.MediaID
}

func (f *FileResponse) GetObject() FileResponseObject {
	if f == nil {
		return ""
	}
	return f.Object
}

func (f *FileResponse) GetKind() FileResponseKind {
	if f == nil {
		return ""
	}
	return f.Kind
}

func (f *FileResponse) GetType() string {
	if f == nil {
		return ""
	}
	return f.Type
}

func (f *FileResponse) GetCodec() *string {
	if f == nil {
		return nil
	}
	return f.Codec
}

func (f *FileResponse) GetContainer() *string {
	if f == nil {
		return nil
	}
	return f.Container
}

func (f *FileResponse) GetWidth() *int {
	if f == nil {
		return nil
	}
	return f.Width
}

func (f *FileResponse) GetHeight() *int {
	if f == nil {
		return nil
	}
	return f.Height
}

func (f *FileResponse) GetOrientation() *string {
	if f == nil {
		return nil
	}
	return f.Orientation
}

func (f *FileResponse) GetRotation() *float64 {
	if f == nil {
		return nil
	}
	return f.Rotation
}

func (f *FileResponse) GetTransparency() *bool {
	if f == nil {
		return nil
	}
	return f.Transparency
}

func (f *FileResponse) GetAnimated() *bool {
	if f == nil {
		return nil
	}
	return f.Animated
}

func (f *FileResponse) GetFrames() *int {
	if f == nil {
		return nil
	}
	return f.Frames
}

func (f *FileResponse) GetDuration() *float64 {
	if f == nil {
		return nil
	}
	return f.Duration
}

func (f *FileResponse) GetFps() *float64 {
	if f == nil {
		return nil
	}
	return f.Fps
}

func (f *FileResponse) GetFilesize() int {
	if f == nil {
		return 0
	}
	return f.Filesize
}

func (f *FileResponse) GetBitrate() *int {
	if f == nil {
		return nil
	}
	return f.Bitrate
}

func (f *FileResponse) GetLanguage() *string {
	if f == nil {
		return nil
	}
	return f.Language
}

func (f *FileResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FileResponse) GetRef() *string {
	if f == nil {
		return nil
	}
	return f.Ref
}

func (f *FileResponse) GetFolder() *string {
	if f == nil {
		return nil
	}
	return f.Folder
}

func (f *FileResponse) GetFilename() *string {
	if f == nil {
		return nil
	}
	return f.Filename
}

func (f *FileResponse) GetURL() string {
	if f == nil {
		return ""
	}
	return f.URL
}

func (f *FileResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FileResponse) GetBackground() *string {
	if f == nil {
		return nil
	}
	return f.Background
}

func (f *FileResponse) GetMetadata() map[string]interface{} {
	if f == nil {
		return nil
	}
	return f.Metadata
}

func (f *FileResponse) GetOriginal() *bool {
	if f == nil {
		return nil
	}
	return f.Original
}

func (f *FileResponse) GetCreatedBy() *string {
	if f == nil {
		return nil
	}
	return f.CreatedBy
}

func (f *FileResponse) GetCreated() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.Created
}

func (f *FileResponse) GetUpdated() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.Updated
}

func (f *FileResponse) GetStatus() FileResponseStatus {
	if f == nil {
		return ""
	}
	return f.Status
}

func (f *FileResponse) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FileResponse) UnmarshalJSON(data []byte) error {
	type embed FileResponse
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FileResponse(unmarshaler.embed)
	f.Created = unmarshaler.Created.Time()
	f.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FileResponse) MarshalJSON() ([]byte, error) {
	type embed FileResponse
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*f),
		Created: internal.NewDateTime(f.Created),
		Updated: internal.NewDateTime(f.Updated),
	}
	return json.Marshal(marshaler)
}

func (f *FileResponse) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FileResponseKind string

const (
	FileResponseKindVideo FileResponseKind = "video"
	FileResponseKindImage FileResponseKind = "image"
	FileResponseKindAudio FileResponseKind = "audio"
)

func NewFileResponseKindFromString(s string) (FileResponseKind, error) {
	switch s {
	case "video":
		return FileResponseKindVideo, nil
	case "image":
		return FileResponseKindImage, nil
	case "audio":
		return FileResponseKindAudio, nil
	}
	var t FileResponseKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FileResponseKind) Ptr() *FileResponseKind {
	return &f
}

type FileResponseObject string

const (
	FileResponseObjectSource       FileResponseObject = "source"
	FileResponseObjectTrack        FileResponseObject = "track"
	FileResponseObjectIntelligence FileResponseObject = "intelligence"
)

func NewFileResponseObjectFromString(s string) (FileResponseObject, error) {
	switch s {
	case "source":
		return FileResponseObjectSource, nil
	case "track":
		return FileResponseObjectTrack, nil
	case "intelligence":
		return FileResponseObjectIntelligence, nil
	}
	var t FileResponseObject
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FileResponseObject) Ptr() *FileResponseObject {
	return &f
}

type FileResponseStatus string

const (
	FileResponseStatusWaiting    FileResponseStatus = "waiting"
	FileResponseStatusProcessing FileResponseStatus = "processing"
	FileResponseStatusReady      FileResponseStatus = "ready"
	FileResponseStatusFailed     FileResponseStatus = "failed"
)

func NewFileResponseStatusFromString(s string) (FileResponseStatus, error) {
	switch s {
	case "waiting":
		return FileResponseStatusWaiting, nil
	case "processing":
		return FileResponseStatusProcessing, nil
	case "ready":
		return FileResponseStatusReady, nil
	case "failed":
		return FileResponseStatusFailed, nil
	}
	var t FileResponseStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FileResponseStatus) Ptr() *FileResponseStatus {
	return &f
}

type FileStatus string

const (
	FileStatusWaiting    FileStatus = "waiting"
	FileStatusProcessing FileStatus = "processing"
	FileStatusReady      FileStatus = "ready"
	FileStatusFailed     FileStatus = "failed"
)

func NewFileStatusFromString(s string) (FileStatus, error) {
	switch s {
	case "waiting":
		return FileStatusWaiting, nil
	case "processing":
		return FileStatusProcessing, nil
	case "ready":
		return FileStatusReady, nil
	case "failed":
		return FileStatusFailed, nil
	}
	var t FileStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FileStatus) Ptr() *FileStatus {
	return &f
}

type ID = string

type Kind string

const (
	KindIngest      Kind = "ingest"
	KindVideo       Kind = "video"
	KindImage       Kind = "image"
	KindAudio       Kind = "audio"
	KindChapters    Kind = "chapters"
	KindSubtitles   Kind = "subtitles"
	KindThumbnails  Kind = "thumbnails"
	KindNsfw        Kind = "nsfw"
	KindSpeech      Kind = "speech"
	KindDescription Kind = "description"
	KindOutline     Kind = "outline"
	KindPrompt      Kind = "prompt"
	KindWorkflow    Kind = "workflow"
	KindConditions  Kind = "conditions"
	KindHTTP        Kind = "http"
)

func NewKindFromString(s string) (Kind, error) {
	switch s {
	case "ingest":
		return KindIngest, nil
	case "video":
		return KindVideo, nil
	case "image":
		return KindImage, nil
	case "audio":
		return KindAudio, nil
	case "chapters":
		return KindChapters, nil
	case "subtitles":
		return KindSubtitles, nil
	case "thumbnails":
		return KindThumbnails, nil
	case "nsfw":
		return KindNsfw, nil
	case "speech":
		return KindSpeech, nil
	case "description":
		return KindDescription, nil
	case "outline":
		return KindOutline, nil
	case "prompt":
		return KindPrompt, nil
	case "workflow":
		return KindWorkflow, nil
	case "conditions":
		return KindConditions, nil
	case "http":
		return KindHTTP, nil
	}
	var t Kind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (k Kind) Ptr() *Kind {
	return &k
}

type Links = interface{}

type Media struct {
	ID         string                 `json:"id" url:"id"`
	Object     string                 `json:"object" url:"object"`
	Kind       *MediaKind             `json:"kind,omitempty" url:"kind,omitempty"`
	Title      *string                `json:"title,omitempty" url:"title,omitempty"`
	Alt        *string                `json:"alt,omitempty" url:"alt,omitempty"`
	Width      *int                   `json:"width,omitempty" url:"width,omitempty"`
	Height     *int                   `json:"height,omitempty" url:"height,omitempty"`
	Duration   *float64               `json:"duration,omitempty" url:"duration,omitempty"`
	Files      []*MediaFilesItem      `json:"files,omitempty" url:"files,omitempty"`
	URLs       map[string]interface{} `json:"urls,omitempty" url:"urls,omitempty"`
	Background *string                `json:"background,omitempty" url:"background,omitempty"`
	Metadata   map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	Created    time.Time              `json:"created" url:"created"`
	Updated    time.Time              `json:"updated" url:"updated"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *Media) GetID() string {
	if m == nil {
		return ""
	}
	return m.ID
}

func (m *Media) GetObject() string {
	if m == nil {
		return ""
	}
	return m.Object
}

func (m *Media) GetKind() *MediaKind {
	if m == nil {
		return nil
	}
	return m.Kind
}

func (m *Media) GetTitle() *string {
	if m == nil {
		return nil
	}
	return m.Title
}

func (m *Media) GetAlt() *string {
	if m == nil {
		return nil
	}
	return m.Alt
}

func (m *Media) GetWidth() *int {
	if m == nil {
		return nil
	}
	return m.Width
}

func (m *Media) GetHeight() *int {
	if m == nil {
		return nil
	}
	return m.Height
}

func (m *Media) GetDuration() *float64 {
	if m == nil {
		return nil
	}
	return m.Duration
}

func (m *Media) GetFiles() []*MediaFilesItem {
	if m == nil {
		return nil
	}
	return m.Files
}

func (m *Media) GetURLs() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.URLs
}

func (m *Media) GetBackground() *string {
	if m == nil {
		return nil
	}
	return m.Background
}

func (m *Media) GetMetadata() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.Metadata
}

func (m *Media) GetCreated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Created
}

func (m *Media) GetUpdated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Updated
}

func (m *Media) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *Media) UnmarshalJSON(data []byte) error {
	type embed Media
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = Media(unmarshaler.embed)
	m.Created = unmarshaler.Created.Time()
	m.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *Media) MarshalJSON() ([]byte, error) {
	type embed Media
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*m),
		Created: internal.NewDateTime(m.Created),
		Updated: internal.NewDateTime(m.Updated),
	}
	return json.Marshal(marshaler)
}

func (m *Media) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MediaFilesItem struct {
	ID           string                     `json:"id" url:"id"`
	Object       MediaFilesItemObject       `json:"object" url:"object"`
	Kind         MediaFilesItemKind         `json:"kind" url:"kind"`
	Type         string                     `json:"type" url:"type"`
	Codec        *string                    `json:"codec,omitempty" url:"codec,omitempty"`
	Container    *string                    `json:"container,omitempty" url:"container,omitempty"`
	Width        *int                       `json:"width,omitempty" url:"width,omitempty"`
	Height       *int                       `json:"height,omitempty" url:"height,omitempty"`
	Orientation  *MediaFilesItemOrientation `json:"orientation,omitempty" url:"orientation,omitempty"`
	Rotation     *float64                   `json:"rotation,omitempty" url:"rotation,omitempty"`
	Transparency *bool                      `json:"transparency,omitempty" url:"transparency,omitempty"`
	Frames       *int                       `json:"frames,omitempty" url:"frames,omitempty"`
	Duration     *float64                   `json:"duration,omitempty" url:"duration,omitempty"`
	Fps          *float64                   `json:"fps,omitempty" url:"fps,omitempty"`
	Filesize     int                        `json:"filesize" url:"filesize"`
	Bitrate      *int                       `json:"bitrate,omitempty" url:"bitrate,omitempty"`
	Ref          *string                    `json:"ref,omitempty" url:"ref,omitempty"`
	Folder       *string                    `json:"folder,omitempty" url:"folder,omitempty"`
	Filename     *string                    `json:"filename,omitempty" url:"filename,omitempty"`
	URL          string                     `json:"url" url:"url"`
	Metadata     map[string]interface{}     `json:"metadata,omitempty" url:"metadata,omitempty"`
	Original     *bool                      `json:"original,omitempty" url:"original,omitempty"`
	Created      time.Time                  `json:"created" url:"created"`
	Updated      time.Time                  `json:"updated" url:"updated"`
	Status       MediaFilesItemStatus       `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MediaFilesItem) GetID() string {
	if m == nil {
		return ""
	}
	return m.ID
}

func (m *MediaFilesItem) GetObject() MediaFilesItemObject {
	if m == nil {
		return ""
	}
	return m.Object
}

func (m *MediaFilesItem) GetKind() MediaFilesItemKind {
	if m == nil {
		return ""
	}
	return m.Kind
}

func (m *MediaFilesItem) GetType() string {
	if m == nil {
		return ""
	}
	return m.Type
}

func (m *MediaFilesItem) GetCodec() *string {
	if m == nil {
		return nil
	}
	return m.Codec
}

func (m *MediaFilesItem) GetContainer() *string {
	if m == nil {
		return nil
	}
	return m.Container
}

func (m *MediaFilesItem) GetWidth() *int {
	if m == nil {
		return nil
	}
	return m.Width
}

func (m *MediaFilesItem) GetHeight() *int {
	if m == nil {
		return nil
	}
	return m.Height
}

func (m *MediaFilesItem) GetOrientation() *MediaFilesItemOrientation {
	if m == nil {
		return nil
	}
	return m.Orientation
}

func (m *MediaFilesItem) GetRotation() *float64 {
	if m == nil {
		return nil
	}
	return m.Rotation
}

func (m *MediaFilesItem) GetTransparency() *bool {
	if m == nil {
		return nil
	}
	return m.Transparency
}

func (m *MediaFilesItem) GetFrames() *int {
	if m == nil {
		return nil
	}
	return m.Frames
}

func (m *MediaFilesItem) GetDuration() *float64 {
	if m == nil {
		return nil
	}
	return m.Duration
}

func (m *MediaFilesItem) GetFps() *float64 {
	if m == nil {
		return nil
	}
	return m.Fps
}

func (m *MediaFilesItem) GetFilesize() int {
	if m == nil {
		return 0
	}
	return m.Filesize
}

func (m *MediaFilesItem) GetBitrate() *int {
	if m == nil {
		return nil
	}
	return m.Bitrate
}

func (m *MediaFilesItem) GetRef() *string {
	if m == nil {
		return nil
	}
	return m.Ref
}

func (m *MediaFilesItem) GetFolder() *string {
	if m == nil {
		return nil
	}
	return m.Folder
}

func (m *MediaFilesItem) GetFilename() *string {
	if m == nil {
		return nil
	}
	return m.Filename
}

func (m *MediaFilesItem) GetURL() string {
	if m == nil {
		return ""
	}
	return m.URL
}

func (m *MediaFilesItem) GetMetadata() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.Metadata
}

func (m *MediaFilesItem) GetOriginal() *bool {
	if m == nil {
		return nil
	}
	return m.Original
}

func (m *MediaFilesItem) GetCreated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Created
}

func (m *MediaFilesItem) GetUpdated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Updated
}

func (m *MediaFilesItem) GetStatus() MediaFilesItemStatus {
	if m == nil {
		return ""
	}
	return m.Status
}

func (m *MediaFilesItem) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MediaFilesItem) UnmarshalJSON(data []byte) error {
	type embed MediaFilesItem
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MediaFilesItem(unmarshaler.embed)
	m.Created = unmarshaler.Created.Time()
	m.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MediaFilesItem) MarshalJSON() ([]byte, error) {
	type embed MediaFilesItem
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*m),
		Created: internal.NewDateTime(m.Created),
		Updated: internal.NewDateTime(m.Updated),
	}
	return json.Marshal(marshaler)
}

func (m *MediaFilesItem) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MediaFilesItemKind string

const (
	MediaFilesItemKindVideo MediaFilesItemKind = "video"
	MediaFilesItemKindImage MediaFilesItemKind = "image"
	MediaFilesItemKindAudio MediaFilesItemKind = "audio"
)

func NewMediaFilesItemKindFromString(s string) (MediaFilesItemKind, error) {
	switch s {
	case "video":
		return MediaFilesItemKindVideo, nil
	case "image":
		return MediaFilesItemKindImage, nil
	case "audio":
		return MediaFilesItemKindAudio, nil
	}
	var t MediaFilesItemKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaFilesItemKind) Ptr() *MediaFilesItemKind {
	return &m
}

type MediaFilesItemObject string

const (
	MediaFilesItemObjectSource       MediaFilesItemObject = "source"
	MediaFilesItemObjectTrack        MediaFilesItemObject = "track"
	MediaFilesItemObjectIntelligence MediaFilesItemObject = "intelligence"
)

func NewMediaFilesItemObjectFromString(s string) (MediaFilesItemObject, error) {
	switch s {
	case "source":
		return MediaFilesItemObjectSource, nil
	case "track":
		return MediaFilesItemObjectTrack, nil
	case "intelligence":
		return MediaFilesItemObjectIntelligence, nil
	}
	var t MediaFilesItemObject
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaFilesItemObject) Ptr() *MediaFilesItemObject {
	return &m
}

type MediaFilesItemOrientation string

const (
	MediaFilesItemOrientationLandscape MediaFilesItemOrientation = "landscape"
	MediaFilesItemOrientationPortrait  MediaFilesItemOrientation = "portrait"
	MediaFilesItemOrientationSquare    MediaFilesItemOrientation = "square"
)

func NewMediaFilesItemOrientationFromString(s string) (MediaFilesItemOrientation, error) {
	switch s {
	case "landscape":
		return MediaFilesItemOrientationLandscape, nil
	case "portrait":
		return MediaFilesItemOrientationPortrait, nil
	case "square":
		return MediaFilesItemOrientationSquare, nil
	}
	var t MediaFilesItemOrientation
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaFilesItemOrientation) Ptr() *MediaFilesItemOrientation {
	return &m
}

type MediaFilesItemStatus string

const (
	MediaFilesItemStatusWaiting    MediaFilesItemStatus = "waiting"
	MediaFilesItemStatusProcessing MediaFilesItemStatus = "processing"
	MediaFilesItemStatusReady      MediaFilesItemStatus = "ready"
	MediaFilesItemStatusFailed     MediaFilesItemStatus = "failed"
)

func NewMediaFilesItemStatusFromString(s string) (MediaFilesItemStatus, error) {
	switch s {
	case "waiting":
		return MediaFilesItemStatusWaiting, nil
	case "processing":
		return MediaFilesItemStatusProcessing, nil
	case "ready":
		return MediaFilesItemStatusReady, nil
	case "failed":
		return MediaFilesItemStatusFailed, nil
	}
	var t MediaFilesItemStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaFilesItemStatus) Ptr() *MediaFilesItemStatus {
	return &m
}

type MediaKind string

const (
	MediaKindVideo MediaKind = "video"
	MediaKindImage MediaKind = "image"
	MediaKindAudio MediaKind = "audio"
)

func NewMediaKindFromString(s string) (MediaKind, error) {
	switch s {
	case "video":
		return MediaKindVideo, nil
	case "image":
		return MediaKindImage, nil
	case "audio":
		return MediaKindAudio, nil
	}
	var t MediaKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaKind) Ptr() *MediaKind {
	return &m
}

type MediaResponse struct {
	ID         string                    `json:"id" url:"id"`
	Object     string                    `json:"object" url:"object"`
	Kind       *MediaResponseKind        `json:"kind,omitempty" url:"kind,omitempty"`
	Title      *string                   `json:"title,omitempty" url:"title,omitempty"`
	Alt        *string                   `json:"alt,omitempty" url:"alt,omitempty"`
	Width      *int                      `json:"width,omitempty" url:"width,omitempty"`
	Height     *int                      `json:"height,omitempty" url:"height,omitempty"`
	Duration   *float64                  `json:"duration,omitempty" url:"duration,omitempty"`
	Files      []*MediaResponseFilesItem `json:"files,omitempty" url:"files,omitempty"`
	URLs       map[string]interface{}    `json:"urls,omitempty" url:"urls,omitempty"`
	Background *string                   `json:"background,omitempty" url:"background,omitempty"`
	Metadata   map[string]interface{}    `json:"metadata,omitempty" url:"metadata,omitempty"`
	Created    time.Time                 `json:"created" url:"created"`
	Updated    time.Time                 `json:"updated" url:"updated"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MediaResponse) GetID() string {
	if m == nil {
		return ""
	}
	return m.ID
}

func (m *MediaResponse) GetObject() string {
	if m == nil {
		return ""
	}
	return m.Object
}

func (m *MediaResponse) GetKind() *MediaResponseKind {
	if m == nil {
		return nil
	}
	return m.Kind
}

func (m *MediaResponse) GetTitle() *string {
	if m == nil {
		return nil
	}
	return m.Title
}

func (m *MediaResponse) GetAlt() *string {
	if m == nil {
		return nil
	}
	return m.Alt
}

func (m *MediaResponse) GetWidth() *int {
	if m == nil {
		return nil
	}
	return m.Width
}

func (m *MediaResponse) GetHeight() *int {
	if m == nil {
		return nil
	}
	return m.Height
}

func (m *MediaResponse) GetDuration() *float64 {
	if m == nil {
		return nil
	}
	return m.Duration
}

func (m *MediaResponse) GetFiles() []*MediaResponseFilesItem {
	if m == nil {
		return nil
	}
	return m.Files
}

func (m *MediaResponse) GetURLs() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.URLs
}

func (m *MediaResponse) GetBackground() *string {
	if m == nil {
		return nil
	}
	return m.Background
}

func (m *MediaResponse) GetMetadata() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.Metadata
}

func (m *MediaResponse) GetCreated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Created
}

func (m *MediaResponse) GetUpdated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Updated
}

func (m *MediaResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MediaResponse) UnmarshalJSON(data []byte) error {
	type embed MediaResponse
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MediaResponse(unmarshaler.embed)
	m.Created = unmarshaler.Created.Time()
	m.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MediaResponse) MarshalJSON() ([]byte, error) {
	type embed MediaResponse
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*m),
		Created: internal.NewDateTime(m.Created),
		Updated: internal.NewDateTime(m.Updated),
	}
	return json.Marshal(marshaler)
}

func (m *MediaResponse) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MediaResponseFilesItem struct {
	ID           string                             `json:"id" url:"id"`
	Object       MediaResponseFilesItemObject       `json:"object" url:"object"`
	Kind         MediaResponseFilesItemKind         `json:"kind" url:"kind"`
	Type         string                             `json:"type" url:"type"`
	Codec        *string                            `json:"codec,omitempty" url:"codec,omitempty"`
	Container    *string                            `json:"container,omitempty" url:"container,omitempty"`
	Width        *int                               `json:"width,omitempty" url:"width,omitempty"`
	Height       *int                               `json:"height,omitempty" url:"height,omitempty"`
	Orientation  *MediaResponseFilesItemOrientation `json:"orientation,omitempty" url:"orientation,omitempty"`
	Rotation     *float64                           `json:"rotation,omitempty" url:"rotation,omitempty"`
	Transparency *bool                              `json:"transparency,omitempty" url:"transparency,omitempty"`
	Frames       *int                               `json:"frames,omitempty" url:"frames,omitempty"`
	Duration     *float64                           `json:"duration,omitempty" url:"duration,omitempty"`
	Fps          *float64                           `json:"fps,omitempty" url:"fps,omitempty"`
	Filesize     int                                `json:"filesize" url:"filesize"`
	Bitrate      *int                               `json:"bitrate,omitempty" url:"bitrate,omitempty"`
	Ref          *string                            `json:"ref,omitempty" url:"ref,omitempty"`
	Folder       *string                            `json:"folder,omitempty" url:"folder,omitempty"`
	Filename     *string                            `json:"filename,omitempty" url:"filename,omitempty"`
	URL          string                             `json:"url" url:"url"`
	Metadata     map[string]interface{}             `json:"metadata,omitempty" url:"metadata,omitempty"`
	Original     *bool                              `json:"original,omitempty" url:"original,omitempty"`
	Created      time.Time                          `json:"created" url:"created"`
	Updated      time.Time                          `json:"updated" url:"updated"`
	Status       MediaResponseFilesItemStatus       `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MediaResponseFilesItem) GetID() string {
	if m == nil {
		return ""
	}
	return m.ID
}

func (m *MediaResponseFilesItem) GetObject() MediaResponseFilesItemObject {
	if m == nil {
		return ""
	}
	return m.Object
}

func (m *MediaResponseFilesItem) GetKind() MediaResponseFilesItemKind {
	if m == nil {
		return ""
	}
	return m.Kind
}

func (m *MediaResponseFilesItem) GetType() string {
	if m == nil {
		return ""
	}
	return m.Type
}

func (m *MediaResponseFilesItem) GetCodec() *string {
	if m == nil {
		return nil
	}
	return m.Codec
}

func (m *MediaResponseFilesItem) GetContainer() *string {
	if m == nil {
		return nil
	}
	return m.Container
}

func (m *MediaResponseFilesItem) GetWidth() *int {
	if m == nil {
		return nil
	}
	return m.Width
}

func (m *MediaResponseFilesItem) GetHeight() *int {
	if m == nil {
		return nil
	}
	return m.Height
}

func (m *MediaResponseFilesItem) GetOrientation() *MediaResponseFilesItemOrientation {
	if m == nil {
		return nil
	}
	return m.Orientation
}

func (m *MediaResponseFilesItem) GetRotation() *float64 {
	if m == nil {
		return nil
	}
	return m.Rotation
}

func (m *MediaResponseFilesItem) GetTransparency() *bool {
	if m == nil {
		return nil
	}
	return m.Transparency
}

func (m *MediaResponseFilesItem) GetFrames() *int {
	if m == nil {
		return nil
	}
	return m.Frames
}

func (m *MediaResponseFilesItem) GetDuration() *float64 {
	if m == nil {
		return nil
	}
	return m.Duration
}

func (m *MediaResponseFilesItem) GetFps() *float64 {
	if m == nil {
		return nil
	}
	return m.Fps
}

func (m *MediaResponseFilesItem) GetFilesize() int {
	if m == nil {
		return 0
	}
	return m.Filesize
}

func (m *MediaResponseFilesItem) GetBitrate() *int {
	if m == nil {
		return nil
	}
	return m.Bitrate
}

func (m *MediaResponseFilesItem) GetRef() *string {
	if m == nil {
		return nil
	}
	return m.Ref
}

func (m *MediaResponseFilesItem) GetFolder() *string {
	if m == nil {
		return nil
	}
	return m.Folder
}

func (m *MediaResponseFilesItem) GetFilename() *string {
	if m == nil {
		return nil
	}
	return m.Filename
}

func (m *MediaResponseFilesItem) GetURL() string {
	if m == nil {
		return ""
	}
	return m.URL
}

func (m *MediaResponseFilesItem) GetMetadata() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.Metadata
}

func (m *MediaResponseFilesItem) GetOriginal() *bool {
	if m == nil {
		return nil
	}
	return m.Original
}

func (m *MediaResponseFilesItem) GetCreated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Created
}

func (m *MediaResponseFilesItem) GetUpdated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Updated
}

func (m *MediaResponseFilesItem) GetStatus() MediaResponseFilesItemStatus {
	if m == nil {
		return ""
	}
	return m.Status
}

func (m *MediaResponseFilesItem) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MediaResponseFilesItem) UnmarshalJSON(data []byte) error {
	type embed MediaResponseFilesItem
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MediaResponseFilesItem(unmarshaler.embed)
	m.Created = unmarshaler.Created.Time()
	m.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MediaResponseFilesItem) MarshalJSON() ([]byte, error) {
	type embed MediaResponseFilesItem
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*m),
		Created: internal.NewDateTime(m.Created),
		Updated: internal.NewDateTime(m.Updated),
	}
	return json.Marshal(marshaler)
}

func (m *MediaResponseFilesItem) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MediaResponseFilesItemKind string

const (
	MediaResponseFilesItemKindVideo MediaResponseFilesItemKind = "video"
	MediaResponseFilesItemKindImage MediaResponseFilesItemKind = "image"
	MediaResponseFilesItemKindAudio MediaResponseFilesItemKind = "audio"
)

func NewMediaResponseFilesItemKindFromString(s string) (MediaResponseFilesItemKind, error) {
	switch s {
	case "video":
		return MediaResponseFilesItemKindVideo, nil
	case "image":
		return MediaResponseFilesItemKindImage, nil
	case "audio":
		return MediaResponseFilesItemKindAudio, nil
	}
	var t MediaResponseFilesItemKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaResponseFilesItemKind) Ptr() *MediaResponseFilesItemKind {
	return &m
}

type MediaResponseFilesItemObject string

const (
	MediaResponseFilesItemObjectSource       MediaResponseFilesItemObject = "source"
	MediaResponseFilesItemObjectTrack        MediaResponseFilesItemObject = "track"
	MediaResponseFilesItemObjectIntelligence MediaResponseFilesItemObject = "intelligence"
)

func NewMediaResponseFilesItemObjectFromString(s string) (MediaResponseFilesItemObject, error) {
	switch s {
	case "source":
		return MediaResponseFilesItemObjectSource, nil
	case "track":
		return MediaResponseFilesItemObjectTrack, nil
	case "intelligence":
		return MediaResponseFilesItemObjectIntelligence, nil
	}
	var t MediaResponseFilesItemObject
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaResponseFilesItemObject) Ptr() *MediaResponseFilesItemObject {
	return &m
}

type MediaResponseFilesItemOrientation string

const (
	MediaResponseFilesItemOrientationLandscape MediaResponseFilesItemOrientation = "landscape"
	MediaResponseFilesItemOrientationPortrait  MediaResponseFilesItemOrientation = "portrait"
	MediaResponseFilesItemOrientationSquare    MediaResponseFilesItemOrientation = "square"
)

func NewMediaResponseFilesItemOrientationFromString(s string) (MediaResponseFilesItemOrientation, error) {
	switch s {
	case "landscape":
		return MediaResponseFilesItemOrientationLandscape, nil
	case "portrait":
		return MediaResponseFilesItemOrientationPortrait, nil
	case "square":
		return MediaResponseFilesItemOrientationSquare, nil
	}
	var t MediaResponseFilesItemOrientation
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaResponseFilesItemOrientation) Ptr() *MediaResponseFilesItemOrientation {
	return &m
}

type MediaResponseFilesItemStatus string

const (
	MediaResponseFilesItemStatusWaiting    MediaResponseFilesItemStatus = "waiting"
	MediaResponseFilesItemStatusProcessing MediaResponseFilesItemStatus = "processing"
	MediaResponseFilesItemStatusReady      MediaResponseFilesItemStatus = "ready"
	MediaResponseFilesItemStatusFailed     MediaResponseFilesItemStatus = "failed"
)

func NewMediaResponseFilesItemStatusFromString(s string) (MediaResponseFilesItemStatus, error) {
	switch s {
	case "waiting":
		return MediaResponseFilesItemStatusWaiting, nil
	case "processing":
		return MediaResponseFilesItemStatusProcessing, nil
	case "ready":
		return MediaResponseFilesItemStatusReady, nil
	case "failed":
		return MediaResponseFilesItemStatusFailed, nil
	}
	var t MediaResponseFilesItemStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaResponseFilesItemStatus) Ptr() *MediaResponseFilesItemStatus {
	return &m
}

type MediaResponseKind string

const (
	MediaResponseKindVideo MediaResponseKind = "video"
	MediaResponseKindImage MediaResponseKind = "image"
	MediaResponseKindAudio MediaResponseKind = "audio"
)

func NewMediaResponseKindFromString(s string) (MediaResponseKind, error) {
	switch s {
	case "video":
		return MediaResponseKindVideo, nil
	case "image":
		return MediaResponseKindImage, nil
	case "audio":
		return MediaResponseKindAudio, nil
	}
	var t MediaResponseKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaResponseKind) Ptr() *MediaResponseKind {
	return &m
}

type MediaSource struct {
	ID           string                  `json:"id" url:"id"`
	Object       MediaSourceObject       `json:"object" url:"object"`
	Kind         MediaSourceKind         `json:"kind" url:"kind"`
	Type         string                  `json:"type" url:"type"`
	Codec        *string                 `json:"codec,omitempty" url:"codec,omitempty"`
	Container    *string                 `json:"container,omitempty" url:"container,omitempty"`
	Width        *int                    `json:"width,omitempty" url:"width,omitempty"`
	Height       *int                    `json:"height,omitempty" url:"height,omitempty"`
	Orientation  *MediaSourceOrientation `json:"orientation,omitempty" url:"orientation,omitempty"`
	Rotation     *float64                `json:"rotation,omitempty" url:"rotation,omitempty"`
	Transparency *bool                   `json:"transparency,omitempty" url:"transparency,omitempty"`
	Frames       *int                    `json:"frames,omitempty" url:"frames,omitempty"`
	Duration     *float64                `json:"duration,omitempty" url:"duration,omitempty"`
	Fps          *float64                `json:"fps,omitempty" url:"fps,omitempty"`
	Filesize     int                     `json:"filesize" url:"filesize"`
	Bitrate      *int                    `json:"bitrate,omitempty" url:"bitrate,omitempty"`
	Ref          *string                 `json:"ref,omitempty" url:"ref,omitempty"`
	Folder       *string                 `json:"folder,omitempty" url:"folder,omitempty"`
	Filename     *string                 `json:"filename,omitempty" url:"filename,omitempty"`
	URL          string                  `json:"url" url:"url"`
	Metadata     map[string]interface{}  `json:"metadata,omitempty" url:"metadata,omitempty"`
	Original     *bool                   `json:"original,omitempty" url:"original,omitempty"`
	Created      time.Time               `json:"created" url:"created"`
	Updated      time.Time               `json:"updated" url:"updated"`
	Status       MediaSourceStatus       `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MediaSource) GetID() string {
	if m == nil {
		return ""
	}
	return m.ID
}

func (m *MediaSource) GetObject() MediaSourceObject {
	if m == nil {
		return ""
	}
	return m.Object
}

func (m *MediaSource) GetKind() MediaSourceKind {
	if m == nil {
		return ""
	}
	return m.Kind
}

func (m *MediaSource) GetType() string {
	if m == nil {
		return ""
	}
	return m.Type
}

func (m *MediaSource) GetCodec() *string {
	if m == nil {
		return nil
	}
	return m.Codec
}

func (m *MediaSource) GetContainer() *string {
	if m == nil {
		return nil
	}
	return m.Container
}

func (m *MediaSource) GetWidth() *int {
	if m == nil {
		return nil
	}
	return m.Width
}

func (m *MediaSource) GetHeight() *int {
	if m == nil {
		return nil
	}
	return m.Height
}

func (m *MediaSource) GetOrientation() *MediaSourceOrientation {
	if m == nil {
		return nil
	}
	return m.Orientation
}

func (m *MediaSource) GetRotation() *float64 {
	if m == nil {
		return nil
	}
	return m.Rotation
}

func (m *MediaSource) GetTransparency() *bool {
	if m == nil {
		return nil
	}
	return m.Transparency
}

func (m *MediaSource) GetFrames() *int {
	if m == nil {
		return nil
	}
	return m.Frames
}

func (m *MediaSource) GetDuration() *float64 {
	if m == nil {
		return nil
	}
	return m.Duration
}

func (m *MediaSource) GetFps() *float64 {
	if m == nil {
		return nil
	}
	return m.Fps
}

func (m *MediaSource) GetFilesize() int {
	if m == nil {
		return 0
	}
	return m.Filesize
}

func (m *MediaSource) GetBitrate() *int {
	if m == nil {
		return nil
	}
	return m.Bitrate
}

func (m *MediaSource) GetRef() *string {
	if m == nil {
		return nil
	}
	return m.Ref
}

func (m *MediaSource) GetFolder() *string {
	if m == nil {
		return nil
	}
	return m.Folder
}

func (m *MediaSource) GetFilename() *string {
	if m == nil {
		return nil
	}
	return m.Filename
}

func (m *MediaSource) GetURL() string {
	if m == nil {
		return ""
	}
	return m.URL
}

func (m *MediaSource) GetMetadata() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.Metadata
}

func (m *MediaSource) GetOriginal() *bool {
	if m == nil {
		return nil
	}
	return m.Original
}

func (m *MediaSource) GetCreated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Created
}

func (m *MediaSource) GetUpdated() time.Time {
	if m == nil {
		return time.Time{}
	}
	return m.Updated
}

func (m *MediaSource) GetStatus() MediaSourceStatus {
	if m == nil {
		return ""
	}
	return m.Status
}

func (m *MediaSource) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MediaSource) UnmarshalJSON(data []byte) error {
	type embed MediaSource
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MediaSource(unmarshaler.embed)
	m.Created = unmarshaler.Created.Time()
	m.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MediaSource) MarshalJSON() ([]byte, error) {
	type embed MediaSource
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*m),
		Created: internal.NewDateTime(m.Created),
		Updated: internal.NewDateTime(m.Updated),
	}
	return json.Marshal(marshaler)
}

func (m *MediaSource) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MediaSourceKind string

const (
	MediaSourceKindVideo MediaSourceKind = "video"
	MediaSourceKindImage MediaSourceKind = "image"
	MediaSourceKindAudio MediaSourceKind = "audio"
)

func NewMediaSourceKindFromString(s string) (MediaSourceKind, error) {
	switch s {
	case "video":
		return MediaSourceKindVideo, nil
	case "image":
		return MediaSourceKindImage, nil
	case "audio":
		return MediaSourceKindAudio, nil
	}
	var t MediaSourceKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaSourceKind) Ptr() *MediaSourceKind {
	return &m
}

type MediaSourceObject string

const (
	MediaSourceObjectSource       MediaSourceObject = "source"
	MediaSourceObjectTrack        MediaSourceObject = "track"
	MediaSourceObjectIntelligence MediaSourceObject = "intelligence"
)

func NewMediaSourceObjectFromString(s string) (MediaSourceObject, error) {
	switch s {
	case "source":
		return MediaSourceObjectSource, nil
	case "track":
		return MediaSourceObjectTrack, nil
	case "intelligence":
		return MediaSourceObjectIntelligence, nil
	}
	var t MediaSourceObject
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaSourceObject) Ptr() *MediaSourceObject {
	return &m
}

type MediaSourceOrientation string

const (
	MediaSourceOrientationLandscape MediaSourceOrientation = "landscape"
	MediaSourceOrientationPortrait  MediaSourceOrientation = "portrait"
	MediaSourceOrientationSquare    MediaSourceOrientation = "square"
)

func NewMediaSourceOrientationFromString(s string) (MediaSourceOrientation, error) {
	switch s {
	case "landscape":
		return MediaSourceOrientationLandscape, nil
	case "portrait":
		return MediaSourceOrientationPortrait, nil
	case "square":
		return MediaSourceOrientationSquare, nil
	}
	var t MediaSourceOrientation
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaSourceOrientation) Ptr() *MediaSourceOrientation {
	return &m
}

type MediaSourceStatus string

const (
	MediaSourceStatusWaiting    MediaSourceStatus = "waiting"
	MediaSourceStatusProcessing MediaSourceStatus = "processing"
	MediaSourceStatusReady      MediaSourceStatus = "ready"
	MediaSourceStatusFailed     MediaSourceStatus = "failed"
)

func NewMediaSourceStatusFromString(s string) (MediaSourceStatus, error) {
	switch s {
	case "waiting":
		return MediaSourceStatusWaiting, nil
	case "processing":
		return MediaSourceStatusProcessing, nil
	case "ready":
		return MediaSourceStatusReady, nil
	case "failed":
		return MediaSourceStatusFailed, nil
	}
	var t MediaSourceStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MediaSourceStatus) Ptr() *MediaSourceStatus {
	return &m
}

type Meta = interface{}

type Object = string

type ParentID = *string

type Progress = *int

type Signature struct {
	Domain    string  `json:"domain" url:"domain"`
	Filename  string  `json:"filename" url:"filename"`
	Folder    *string `json:"folder,omitempty" url:"folder,omitempty"`
	Expiry    int     `json:"expiry" url:"expiry"`
	Method    string  `json:"method" url:"method"`
	Signature string  `json:"signature" url:"signature"`
	URL       string  `json:"url" url:"url"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *Signature) GetDomain() string {
	if s == nil {
		return ""
	}
	return s.Domain
}

func (s *Signature) GetFilename() string {
	if s == nil {
		return ""
	}
	return s.Filename
}

func (s *Signature) GetFolder() *string {
	if s == nil {
		return nil
	}
	return s.Folder
}

func (s *Signature) GetExpiry() int {
	if s == nil {
		return 0
	}
	return s.Expiry
}

func (s *Signature) GetMethod() string {
	if s == nil {
		return ""
	}
	return s.Method
}

func (s *Signature) GetSignature() string {
	if s == nil {
		return ""
	}
	return s.Signature
}

func (s *Signature) GetURL() string {
	if s == nil {
		return ""
	}
	return s.URL
}

func (s *Signature) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Signature) UnmarshalJSON(data []byte) error {
	type unmarshaler Signature
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = Signature(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *Signature) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SignatureResponse struct {
	Domain    string  `json:"domain" url:"domain"`
	Filename  string  `json:"filename" url:"filename"`
	Folder    *string `json:"folder,omitempty" url:"folder,omitempty"`
	Expiry    int     `json:"expiry" url:"expiry"`
	Method    string  `json:"method" url:"method"`
	Signature string  `json:"signature" url:"signature"`
	URL       string  `json:"url" url:"url"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SignatureResponse) GetDomain() string {
	if s == nil {
		return ""
	}
	return s.Domain
}

func (s *SignatureResponse) GetFilename() string {
	if s == nil {
		return ""
	}
	return s.Filename
}

func (s *SignatureResponse) GetFolder() *string {
	if s == nil {
		return nil
	}
	return s.Folder
}

func (s *SignatureResponse) GetExpiry() int {
	if s == nil {
		return 0
	}
	return s.Expiry
}

func (s *SignatureResponse) GetMethod() string {
	if s == nil {
		return ""
	}
	return s.Method
}

func (s *SignatureResponse) GetSignature() string {
	if s == nil {
		return ""
	}
	return s.Signature
}

func (s *SignatureResponse) GetURL() string {
	if s == nil {
		return ""
	}
	return s.URL
}

func (s *SignatureResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SignatureResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SignatureResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SignatureResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SignatureResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type Status string

const (
	StatusPending    Status = "pending"
	StatusWaiting    Status = "waiting"
	StatusProcessing Status = "processing"
	StatusReady      Status = "ready"
	StatusCompleted  Status = "completed"
	StatusFailed     Status = "failed"
	StatusError      Status = "error"
	StatusCancelled  Status = "cancelled"
)

func NewStatusFromString(s string) (Status, error) {
	switch s {
	case "pending":
		return StatusPending, nil
	case "waiting":
		return StatusWaiting, nil
	case "processing":
		return StatusProcessing, nil
	case "ready":
		return StatusReady, nil
	case "completed":
		return StatusCompleted, nil
	case "failed":
		return StatusFailed, nil
	case "error":
		return StatusError, nil
	case "cancelled":
		return StatusCancelled, nil
	}
	var t Status
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s Status) Ptr() *Status {
	return &s
}

type Task struct {
	ID        string                 `json:"id" url:"id"`
	Object    string                 `json:"object" url:"object"`
	Kind      TaskKind               `json:"kind,omitempty" url:"kind,omitempty"`
	Input     map[string]interface{} `json:"input,omitempty" url:"input,omitempty"`
	Options   map[string]interface{} `json:"options,omitempty" url:"options,omitempty"`
	Output    map[string]interface{} `json:"output,omitempty" url:"output,omitempty"`
	Status    TaskStatus             `json:"status" url:"status"`
	Progress  *int                   `json:"progress,omitempty" url:"progress,omitempty"`
	Error     *string                `json:"error,omitempty" url:"error,omitempty"`
	CreatedBy *string                `json:"created_by,omitempty" url:"created_by,omitempty"`
	Created   time.Time              `json:"created" url:"created"`
	Updated   time.Time              `json:"updated" url:"updated"`
	ParentID  *string                `json:"parent_id,omitempty" url:"parent_id,omitempty"`
	Workflow  []interface{}          `json:"workflow,omitempty" url:"workflow,omitempty"`
	Results   *TaskResults           `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *Task) GetID() string {
	if t == nil {
		return ""
	}
	return t.ID
}

func (t *Task) GetObject() string {
	if t == nil {
		return ""
	}
	return t.Object
}

func (t *Task) GetKind() TaskKind {
	if t == nil {
		return nil
	}
	return t.Kind
}

func (t *Task) GetInput() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Input
}

func (t *Task) GetOptions() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Options
}

func (t *Task) GetOutput() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Output
}

func (t *Task) GetStatus() TaskStatus {
	if t == nil {
		return ""
	}
	return t.Status
}

func (t *Task) GetProgress() *int {
	if t == nil {
		return nil
	}
	return t.Progress
}

func (t *Task) GetError() *string {
	if t == nil {
		return nil
	}
	return t.Error
}

func (t *Task) GetCreatedBy() *string {
	if t == nil {
		return nil
	}
	return t.CreatedBy
}

func (t *Task) GetCreated() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.Created
}

func (t *Task) GetUpdated() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.Updated
}

func (t *Task) GetParentID() *string {
	if t == nil {
		return nil
	}
	return t.ParentID
}

func (t *Task) GetWorkflow() []interface{} {
	if t == nil {
		return nil
	}
	return t.Workflow
}

func (t *Task) GetResults() *TaskResults {
	if t == nil {
		return nil
	}
	return t.Results
}

func (t *Task) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *Task) UnmarshalJSON(data []byte) error {
	type embed Task
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = Task(unmarshaler.embed)
	t.Created = unmarshaler.Created.Time()
	t.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *Task) MarshalJSON() ([]byte, error) {
	type embed Task
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*t),
		Created: internal.NewDateTime(t.Created),
		Updated: internal.NewDateTime(t.Updated),
	}
	return json.Marshal(marshaler)
}

func (t *Task) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TaskKind = interface{}

type TaskListResponse = []*TaskListResponseItem

type TaskListResponseItem struct {
	ID        string                       `json:"id" url:"id"`
	Object    string                       `json:"object" url:"object"`
	Kind      TaskListResponseItemKind     `json:"kind" url:"kind"`
	Input     map[string]interface{}       `json:"input,omitempty" url:"input,omitempty"`
	Options   map[string]interface{}       `json:"options,omitempty" url:"options,omitempty"`
	Output    map[string]interface{}       `json:"output,omitempty" url:"output,omitempty"`
	Status    TaskListResponseItemStatus   `json:"status" url:"status"`
	Progress  *int                         `json:"progress,omitempty" url:"progress,omitempty"`
	Error     *string                      `json:"error,omitempty" url:"error,omitempty"`
	CreatedBy *string                      `json:"created_by,omitempty" url:"created_by,omitempty"`
	Created   time.Time                    `json:"created" url:"created"`
	Updated   time.Time                    `json:"updated" url:"updated"`
	ParentID  *string                      `json:"parent_id,omitempty" url:"parent_id,omitempty"`
	Workflow  []interface{}                `json:"workflow,omitempty" url:"workflow,omitempty"`
	Results   *TaskListResponseItemResults `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TaskListResponseItem) GetID() string {
	if t == nil {
		return ""
	}
	return t.ID
}

func (t *TaskListResponseItem) GetObject() string {
	if t == nil {
		return ""
	}
	return t.Object
}

func (t *TaskListResponseItem) GetKind() TaskListResponseItemKind {
	if t == nil {
		return ""
	}
	return t.Kind
}

func (t *TaskListResponseItem) GetInput() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Input
}

func (t *TaskListResponseItem) GetOptions() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Options
}

func (t *TaskListResponseItem) GetOutput() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Output
}

func (t *TaskListResponseItem) GetStatus() TaskListResponseItemStatus {
	if t == nil {
		return ""
	}
	return t.Status
}

func (t *TaskListResponseItem) GetProgress() *int {
	if t == nil {
		return nil
	}
	return t.Progress
}

func (t *TaskListResponseItem) GetError() *string {
	if t == nil {
		return nil
	}
	return t.Error
}

func (t *TaskListResponseItem) GetCreatedBy() *string {
	if t == nil {
		return nil
	}
	return t.CreatedBy
}

func (t *TaskListResponseItem) GetCreated() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.Created
}

func (t *TaskListResponseItem) GetUpdated() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.Updated
}

func (t *TaskListResponseItem) GetParentID() *string {
	if t == nil {
		return nil
	}
	return t.ParentID
}

func (t *TaskListResponseItem) GetWorkflow() []interface{} {
	if t == nil {
		return nil
	}
	return t.Workflow
}

func (t *TaskListResponseItem) GetResults() *TaskListResponseItemResults {
	if t == nil {
		return nil
	}
	return t.Results
}

func (t *TaskListResponseItem) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TaskListResponseItem) UnmarshalJSON(data []byte) error {
	type embed TaskListResponseItem
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TaskListResponseItem(unmarshaler.embed)
	t.Created = unmarshaler.Created.Time()
	t.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TaskListResponseItem) MarshalJSON() ([]byte, error) {
	type embed TaskListResponseItem
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*t),
		Created: internal.NewDateTime(t.Created),
		Updated: internal.NewDateTime(t.Updated),
	}
	return json.Marshal(marshaler)
}

func (t *TaskListResponseItem) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TaskListResponseItemKind string

const (
	TaskListResponseItemKindIngest      TaskListResponseItemKind = "ingest"
	TaskListResponseItemKindVideo       TaskListResponseItemKind = "video"
	TaskListResponseItemKindImage       TaskListResponseItemKind = "image"
	TaskListResponseItemKindAudio       TaskListResponseItemKind = "audio"
	TaskListResponseItemKindChapters    TaskListResponseItemKind = "chapters"
	TaskListResponseItemKindSubtitles   TaskListResponseItemKind = "subtitles"
	TaskListResponseItemKindThumbnails  TaskListResponseItemKind = "thumbnails"
	TaskListResponseItemKindNsfw        TaskListResponseItemKind = "nsfw"
	TaskListResponseItemKindSpeech      TaskListResponseItemKind = "speech"
	TaskListResponseItemKindDescription TaskListResponseItemKind = "description"
	TaskListResponseItemKindOutline     TaskListResponseItemKind = "outline"
	TaskListResponseItemKindPrompt      TaskListResponseItemKind = "prompt"
	TaskListResponseItemKindWorkflow    TaskListResponseItemKind = "workflow"
	TaskListResponseItemKindConditions  TaskListResponseItemKind = "conditions"
	TaskListResponseItemKindHTTP        TaskListResponseItemKind = "http"
)

func NewTaskListResponseItemKindFromString(s string) (TaskListResponseItemKind, error) {
	switch s {
	case "ingest":
		return TaskListResponseItemKindIngest, nil
	case "video":
		return TaskListResponseItemKindVideo, nil
	case "image":
		return TaskListResponseItemKindImage, nil
	case "audio":
		return TaskListResponseItemKindAudio, nil
	case "chapters":
		return TaskListResponseItemKindChapters, nil
	case "subtitles":
		return TaskListResponseItemKindSubtitles, nil
	case "thumbnails":
		return TaskListResponseItemKindThumbnails, nil
	case "nsfw":
		return TaskListResponseItemKindNsfw, nil
	case "speech":
		return TaskListResponseItemKindSpeech, nil
	case "description":
		return TaskListResponseItemKindDescription, nil
	case "outline":
		return TaskListResponseItemKindOutline, nil
	case "prompt":
		return TaskListResponseItemKindPrompt, nil
	case "workflow":
		return TaskListResponseItemKindWorkflow, nil
	case "conditions":
		return TaskListResponseItemKindConditions, nil
	case "http":
		return TaskListResponseItemKindHTTP, nil
	}
	var t TaskListResponseItemKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TaskListResponseItemKind) Ptr() *TaskListResponseItemKind {
	return &t
}

type TaskListResponseItemResults struct {
	Passed   []map[string]interface{} `json:"passed,omitempty" url:"passed,omitempty"`
	Failed   []map[string]interface{} `json:"failed,omitempty" url:"failed,omitempty"`
	Continue *bool                    `json:"continue,omitempty" url:"continue,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TaskListResponseItemResults) GetPassed() []map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Passed
}

func (t *TaskListResponseItemResults) GetFailed() []map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Failed
}

func (t *TaskListResponseItemResults) GetContinue() *bool {
	if t == nil {
		return nil
	}
	return t.Continue
}

func (t *TaskListResponseItemResults) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TaskListResponseItemResults) UnmarshalJSON(data []byte) error {
	type unmarshaler TaskListResponseItemResults
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TaskListResponseItemResults(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TaskListResponseItemResults) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TaskListResponseItemStatus string

const (
	TaskListResponseItemStatusPending    TaskListResponseItemStatus = "pending"
	TaskListResponseItemStatusWaiting    TaskListResponseItemStatus = "waiting"
	TaskListResponseItemStatusProcessing TaskListResponseItemStatus = "processing"
	TaskListResponseItemStatusReady      TaskListResponseItemStatus = "ready"
	TaskListResponseItemStatusCompleted  TaskListResponseItemStatus = "completed"
	TaskListResponseItemStatusFailed     TaskListResponseItemStatus = "failed"
	TaskListResponseItemStatusError      TaskListResponseItemStatus = "error"
	TaskListResponseItemStatusCancelled  TaskListResponseItemStatus = "cancelled"
)

func NewTaskListResponseItemStatusFromString(s string) (TaskListResponseItemStatus, error) {
	switch s {
	case "pending":
		return TaskListResponseItemStatusPending, nil
	case "waiting":
		return TaskListResponseItemStatusWaiting, nil
	case "processing":
		return TaskListResponseItemStatusProcessing, nil
	case "ready":
		return TaskListResponseItemStatusReady, nil
	case "completed":
		return TaskListResponseItemStatusCompleted, nil
	case "failed":
		return TaskListResponseItemStatusFailed, nil
	case "error":
		return TaskListResponseItemStatusError, nil
	case "cancelled":
		return TaskListResponseItemStatusCancelled, nil
	}
	var t TaskListResponseItemStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TaskListResponseItemStatus) Ptr() *TaskListResponseItemStatus {
	return &t
}

type TaskResponse struct {
	ID        string                 `json:"id" url:"id"`
	Object    string                 `json:"object" url:"object"`
	Kind      TaskResponseKind       `json:"kind" url:"kind"`
	Input     map[string]interface{} `json:"input,omitempty" url:"input,omitempty"`
	Options   map[string]interface{} `json:"options,omitempty" url:"options,omitempty"`
	Output    map[string]interface{} `json:"output,omitempty" url:"output,omitempty"`
	Status    TaskResponseStatus     `json:"status" url:"status"`
	Progress  *int                   `json:"progress,omitempty" url:"progress,omitempty"`
	Error     *string                `json:"error,omitempty" url:"error,omitempty"`
	CreatedBy *string                `json:"created_by,omitempty" url:"created_by,omitempty"`
	Created   time.Time              `json:"created" url:"created"`
	Updated   time.Time              `json:"updated" url:"updated"`
	ParentID  *string                `json:"parent_id,omitempty" url:"parent_id,omitempty"`
	Workflow  []interface{}          `json:"workflow,omitempty" url:"workflow,omitempty"`
	Results   *TaskResponseResults   `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TaskResponse) GetID() string {
	if t == nil {
		return ""
	}
	return t.ID
}

func (t *TaskResponse) GetObject() string {
	if t == nil {
		return ""
	}
	return t.Object
}

func (t *TaskResponse) GetKind() TaskResponseKind {
	if t == nil {
		return ""
	}
	return t.Kind
}

func (t *TaskResponse) GetInput() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Input
}

func (t *TaskResponse) GetOptions() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Options
}

func (t *TaskResponse) GetOutput() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Output
}

func (t *TaskResponse) GetStatus() TaskResponseStatus {
	if t == nil {
		return ""
	}
	return t.Status
}

func (t *TaskResponse) GetProgress() *int {
	if t == nil {
		return nil
	}
	return t.Progress
}

func (t *TaskResponse) GetError() *string {
	if t == nil {
		return nil
	}
	return t.Error
}

func (t *TaskResponse) GetCreatedBy() *string {
	if t == nil {
		return nil
	}
	return t.CreatedBy
}

func (t *TaskResponse) GetCreated() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.Created
}

func (t *TaskResponse) GetUpdated() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.Updated
}

func (t *TaskResponse) GetParentID() *string {
	if t == nil {
		return nil
	}
	return t.ParentID
}

func (t *TaskResponse) GetWorkflow() []interface{} {
	if t == nil {
		return nil
	}
	return t.Workflow
}

func (t *TaskResponse) GetResults() *TaskResponseResults {
	if t == nil {
		return nil
	}
	return t.Results
}

func (t *TaskResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TaskResponse) UnmarshalJSON(data []byte) error {
	type embed TaskResponse
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TaskResponse(unmarshaler.embed)
	t.Created = unmarshaler.Created.Time()
	t.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TaskResponse) MarshalJSON() ([]byte, error) {
	type embed TaskResponse
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*t),
		Created: internal.NewDateTime(t.Created),
		Updated: internal.NewDateTime(t.Updated),
	}
	return json.Marshal(marshaler)
}

func (t *TaskResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TaskResponseKind string

const (
	TaskResponseKindIngest      TaskResponseKind = "ingest"
	TaskResponseKindVideo       TaskResponseKind = "video"
	TaskResponseKindImage       TaskResponseKind = "image"
	TaskResponseKindAudio       TaskResponseKind = "audio"
	TaskResponseKindChapters    TaskResponseKind = "chapters"
	TaskResponseKindSubtitles   TaskResponseKind = "subtitles"
	TaskResponseKindThumbnails  TaskResponseKind = "thumbnails"
	TaskResponseKindNsfw        TaskResponseKind = "nsfw"
	TaskResponseKindSpeech      TaskResponseKind = "speech"
	TaskResponseKindDescription TaskResponseKind = "description"
	TaskResponseKindOutline     TaskResponseKind = "outline"
	TaskResponseKindPrompt      TaskResponseKind = "prompt"
	TaskResponseKindWorkflow    TaskResponseKind = "workflow"
	TaskResponseKindConditions  TaskResponseKind = "conditions"
	TaskResponseKindHTTP        TaskResponseKind = "http"
)

func NewTaskResponseKindFromString(s string) (TaskResponseKind, error) {
	switch s {
	case "ingest":
		return TaskResponseKindIngest, nil
	case "video":
		return TaskResponseKindVideo, nil
	case "image":
		return TaskResponseKindImage, nil
	case "audio":
		return TaskResponseKindAudio, nil
	case "chapters":
		return TaskResponseKindChapters, nil
	case "subtitles":
		return TaskResponseKindSubtitles, nil
	case "thumbnails":
		return TaskResponseKindThumbnails, nil
	case "nsfw":
		return TaskResponseKindNsfw, nil
	case "speech":
		return TaskResponseKindSpeech, nil
	case "description":
		return TaskResponseKindDescription, nil
	case "outline":
		return TaskResponseKindOutline, nil
	case "prompt":
		return TaskResponseKindPrompt, nil
	case "workflow":
		return TaskResponseKindWorkflow, nil
	case "conditions":
		return TaskResponseKindConditions, nil
	case "http":
		return TaskResponseKindHTTP, nil
	}
	var t TaskResponseKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TaskResponseKind) Ptr() *TaskResponseKind {
	return &t
}

type TaskResponseResults struct {
	Passed   []map[string]interface{} `json:"passed,omitempty" url:"passed,omitempty"`
	Failed   []map[string]interface{} `json:"failed,omitempty" url:"failed,omitempty"`
	Continue *bool                    `json:"continue,omitempty" url:"continue,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TaskResponseResults) GetPassed() []map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Passed
}

func (t *TaskResponseResults) GetFailed() []map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Failed
}

func (t *TaskResponseResults) GetContinue() *bool {
	if t == nil {
		return nil
	}
	return t.Continue
}

func (t *TaskResponseResults) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TaskResponseResults) UnmarshalJSON(data []byte) error {
	type unmarshaler TaskResponseResults
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TaskResponseResults(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TaskResponseResults) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TaskResponseStatus string

const (
	TaskResponseStatusPending    TaskResponseStatus = "pending"
	TaskResponseStatusWaiting    TaskResponseStatus = "waiting"
	TaskResponseStatusProcessing TaskResponseStatus = "processing"
	TaskResponseStatusReady      TaskResponseStatus = "ready"
	TaskResponseStatusCompleted  TaskResponseStatus = "completed"
	TaskResponseStatusFailed     TaskResponseStatus = "failed"
	TaskResponseStatusError      TaskResponseStatus = "error"
	TaskResponseStatusCancelled  TaskResponseStatus = "cancelled"
)

func NewTaskResponseStatusFromString(s string) (TaskResponseStatus, error) {
	switch s {
	case "pending":
		return TaskResponseStatusPending, nil
	case "waiting":
		return TaskResponseStatusWaiting, nil
	case "processing":
		return TaskResponseStatusProcessing, nil
	case "ready":
		return TaskResponseStatusReady, nil
	case "completed":
		return TaskResponseStatusCompleted, nil
	case "failed":
		return TaskResponseStatusFailed, nil
	case "error":
		return TaskResponseStatusError, nil
	case "cancelled":
		return TaskResponseStatusCancelled, nil
	}
	var t TaskResponseStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TaskResponseStatus) Ptr() *TaskResponseStatus {
	return &t
}

type TaskResults struct {
	Passed   []map[string]interface{} `json:"passed,omitempty" url:"passed,omitempty"`
	Failed   []map[string]interface{} `json:"failed,omitempty" url:"failed,omitempty"`
	Continue *bool                    `json:"continue,omitempty" url:"continue,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TaskResults) GetPassed() []map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Passed
}

func (t *TaskResults) GetFailed() []map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Failed
}

func (t *TaskResults) GetContinue() *bool {
	if t == nil {
		return nil
	}
	return t.Continue
}

func (t *TaskResults) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TaskResults) UnmarshalJSON(data []byte) error {
	type unmarshaler TaskResults
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TaskResults(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TaskResults) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TaskStatus string

const (
	TaskStatusPending    TaskStatus = "pending"
	TaskStatusWaiting    TaskStatus = "waiting"
	TaskStatusProcessing TaskStatus = "processing"
	TaskStatusReady      TaskStatus = "ready"
	TaskStatusCompleted  TaskStatus = "completed"
	TaskStatusFailed     TaskStatus = "failed"
	TaskStatusError      TaskStatus = "error"
	TaskStatusCancelled  TaskStatus = "cancelled"
)

func NewTaskStatusFromString(s string) (TaskStatus, error) {
	switch s {
	case "pending":
		return TaskStatusPending, nil
	case "waiting":
		return TaskStatusWaiting, nil
	case "processing":
		return TaskStatusProcessing, nil
	case "ready":
		return TaskStatusReady, nil
	case "completed":
		return TaskStatusCompleted, nil
	case "failed":
		return TaskStatusFailed, nil
	case "error":
		return TaskStatusError, nil
	case "cancelled":
		return TaskStatusCancelled, nil
	}
	var t TaskStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TaskStatus) Ptr() *TaskStatus {
	return &t
}

type TaskSummary struct {
	ID        string            `json:"id" url:"id"`
	Object    string            `json:"object" url:"object"`
	Kind      TaskSummaryKind   `json:"kind" url:"kind"`
	Status    TaskSummaryStatus `json:"status" url:"status"`
	Progress  *int              `json:"progress,omitempty" url:"progress,omitempty"`
	Error     *string           `json:"error,omitempty" url:"error,omitempty"`
	CreatedBy *string           `json:"created_by,omitempty" url:"created_by,omitempty"`
	Created   time.Time         `json:"created" url:"created"`
	Updated   time.Time         `json:"updated" url:"updated"`
	ParentID  *string           `json:"parent_id,omitempty" url:"parent_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TaskSummary) GetID() string {
	if t == nil {
		return ""
	}
	return t.ID
}

func (t *TaskSummary) GetObject() string {
	if t == nil {
		return ""
	}
	return t.Object
}

func (t *TaskSummary) GetKind() TaskSummaryKind {
	if t == nil {
		return ""
	}
	return t.Kind
}

func (t *TaskSummary) GetStatus() TaskSummaryStatus {
	if t == nil {
		return ""
	}
	return t.Status
}

func (t *TaskSummary) GetProgress() *int {
	if t == nil {
		return nil
	}
	return t.Progress
}

func (t *TaskSummary) GetError() *string {
	if t == nil {
		return nil
	}
	return t.Error
}

func (t *TaskSummary) GetCreatedBy() *string {
	if t == nil {
		return nil
	}
	return t.CreatedBy
}

func (t *TaskSummary) GetCreated() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.Created
}

func (t *TaskSummary) GetUpdated() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.Updated
}

func (t *TaskSummary) GetParentID() *string {
	if t == nil {
		return nil
	}
	return t.ParentID
}

func (t *TaskSummary) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TaskSummary) UnmarshalJSON(data []byte) error {
	type embed TaskSummary
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TaskSummary(unmarshaler.embed)
	t.Created = unmarshaler.Created.Time()
	t.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TaskSummary) MarshalJSON() ([]byte, error) {
	type embed TaskSummary
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*t),
		Created: internal.NewDateTime(t.Created),
		Updated: internal.NewDateTime(t.Updated),
	}
	return json.Marshal(marshaler)
}

func (t *TaskSummary) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TaskSummaryKind string

const (
	TaskSummaryKindIngest      TaskSummaryKind = "ingest"
	TaskSummaryKindVideo       TaskSummaryKind = "video"
	TaskSummaryKindImage       TaskSummaryKind = "image"
	TaskSummaryKindAudio       TaskSummaryKind = "audio"
	TaskSummaryKindChapters    TaskSummaryKind = "chapters"
	TaskSummaryKindSubtitles   TaskSummaryKind = "subtitles"
	TaskSummaryKindThumbnails  TaskSummaryKind = "thumbnails"
	TaskSummaryKindNsfw        TaskSummaryKind = "nsfw"
	TaskSummaryKindSpeech      TaskSummaryKind = "speech"
	TaskSummaryKindDescription TaskSummaryKind = "description"
	TaskSummaryKindOutline     TaskSummaryKind = "outline"
	TaskSummaryKindPrompt      TaskSummaryKind = "prompt"
	TaskSummaryKindWorkflow    TaskSummaryKind = "workflow"
	TaskSummaryKindConditions  TaskSummaryKind = "conditions"
	TaskSummaryKindHTTP        TaskSummaryKind = "http"
)

func NewTaskSummaryKindFromString(s string) (TaskSummaryKind, error) {
	switch s {
	case "ingest":
		return TaskSummaryKindIngest, nil
	case "video":
		return TaskSummaryKindVideo, nil
	case "image":
		return TaskSummaryKindImage, nil
	case "audio":
		return TaskSummaryKindAudio, nil
	case "chapters":
		return TaskSummaryKindChapters, nil
	case "subtitles":
		return TaskSummaryKindSubtitles, nil
	case "thumbnails":
		return TaskSummaryKindThumbnails, nil
	case "nsfw":
		return TaskSummaryKindNsfw, nil
	case "speech":
		return TaskSummaryKindSpeech, nil
	case "description":
		return TaskSummaryKindDescription, nil
	case "outline":
		return TaskSummaryKindOutline, nil
	case "prompt":
		return TaskSummaryKindPrompt, nil
	case "workflow":
		return TaskSummaryKindWorkflow, nil
	case "conditions":
		return TaskSummaryKindConditions, nil
	case "http":
		return TaskSummaryKindHTTP, nil
	}
	var t TaskSummaryKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TaskSummaryKind) Ptr() *TaskSummaryKind {
	return &t
}

type TaskSummaryStatus string

const (
	TaskSummaryStatusPending    TaskSummaryStatus = "pending"
	TaskSummaryStatusWaiting    TaskSummaryStatus = "waiting"
	TaskSummaryStatusProcessing TaskSummaryStatus = "processing"
	TaskSummaryStatusReady      TaskSummaryStatus = "ready"
	TaskSummaryStatusCompleted  TaskSummaryStatus = "completed"
	TaskSummaryStatusFailed     TaskSummaryStatus = "failed"
	TaskSummaryStatusError      TaskSummaryStatus = "error"
	TaskSummaryStatusCancelled  TaskSummaryStatus = "cancelled"
)

func NewTaskSummaryStatusFromString(s string) (TaskSummaryStatus, error) {
	switch s {
	case "pending":
		return TaskSummaryStatusPending, nil
	case "waiting":
		return TaskSummaryStatusWaiting, nil
	case "processing":
		return TaskSummaryStatusProcessing, nil
	case "ready":
		return TaskSummaryStatusReady, nil
	case "completed":
		return TaskSummaryStatusCompleted, nil
	case "failed":
		return TaskSummaryStatusFailed, nil
	case "error":
		return TaskSummaryStatusError, nil
	case "cancelled":
		return TaskSummaryStatusCancelled, nil
	}
	var t TaskSummaryStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TaskSummaryStatus) Ptr() *TaskSummaryStatus {
	return &t
}

type Updated = time.Time

type WorkflowTaskStep struct {
	Kind WorkflowTaskStepKind        `json:"kind" url:"kind"`
	Ref  *string                     `json:"ref,omitempty" url:"ref,omitempty"`
	Next []*WorkflowTaskStepNextItem `json:"next,omitempty" url:"next,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WorkflowTaskStep) GetKind() WorkflowTaskStepKind {
	if w == nil {
		return ""
	}
	return w.Kind
}

func (w *WorkflowTaskStep) GetRef() *string {
	if w == nil {
		return nil
	}
	return w.Ref
}

func (w *WorkflowTaskStep) GetNext() []*WorkflowTaskStepNextItem {
	if w == nil {
		return nil
	}
	return w.Next
}

func (w *WorkflowTaskStep) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowTaskStep) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowTaskStep
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowTaskStep(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowTaskStep) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowTaskStepKind string

const (
	WorkflowTaskStepKindVideo       WorkflowTaskStepKind = "video"
	WorkflowTaskStepKindImage       WorkflowTaskStepKind = "image"
	WorkflowTaskStepKindAudio       WorkflowTaskStepKind = "audio"
	WorkflowTaskStepKindChapters    WorkflowTaskStepKind = "chapters"
	WorkflowTaskStepKindSubtitles   WorkflowTaskStepKind = "subtitles"
	WorkflowTaskStepKindThumbnails  WorkflowTaskStepKind = "thumbnails"
	WorkflowTaskStepKindNsfw        WorkflowTaskStepKind = "nsfw"
	WorkflowTaskStepKindSpeech      WorkflowTaskStepKind = "speech"
	WorkflowTaskStepKindDescription WorkflowTaskStepKind = "description"
	WorkflowTaskStepKindOutline     WorkflowTaskStepKind = "outline"
	WorkflowTaskStepKindPrompt      WorkflowTaskStepKind = "prompt"
	WorkflowTaskStepKindHTTP        WorkflowTaskStepKind = "http"
)

func NewWorkflowTaskStepKindFromString(s string) (WorkflowTaskStepKind, error) {
	switch s {
	case "video":
		return WorkflowTaskStepKindVideo, nil
	case "image":
		return WorkflowTaskStepKindImage, nil
	case "audio":
		return WorkflowTaskStepKindAudio, nil
	case "chapters":
		return WorkflowTaskStepKindChapters, nil
	case "subtitles":
		return WorkflowTaskStepKindSubtitles, nil
	case "thumbnails":
		return WorkflowTaskStepKindThumbnails, nil
	case "nsfw":
		return WorkflowTaskStepKindNsfw, nil
	case "speech":
		return WorkflowTaskStepKindSpeech, nil
	case "description":
		return WorkflowTaskStepKindDescription, nil
	case "outline":
		return WorkflowTaskStepKindOutline, nil
	case "prompt":
		return WorkflowTaskStepKindPrompt, nil
	case "http":
		return WorkflowTaskStepKindHTTP, nil
	}
	var t WorkflowTaskStepKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WorkflowTaskStepKind) Ptr() *WorkflowTaskStepKind {
	return &w
}

type WorkflowTaskStepNextItem struct {
	Kind *string `json:"kind,omitempty" url:"kind,omitempty"`
	Ref  *string `json:"ref,omitempty" url:"ref,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WorkflowTaskStepNextItem) GetKind() *string {
	if w == nil {
		return nil
	}
	return w.Kind
}

func (w *WorkflowTaskStepNextItem) GetRef() *string {
	if w == nil {
		return nil
	}
	return w.Ref
}

func (w *WorkflowTaskStepNextItem) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowTaskStepNextItem) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowTaskStepNextItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowTaskStepNextItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowTaskStepNextItem) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}
