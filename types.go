// This file was auto-generated by Fern from our API Definition.

package ittybit

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/ittybit/sdk-go/internal"
	time "time"
)

type APIResponseBase = interface{}

type Confirmation struct {
	Message *string `json:"message,omitempty" url:"message,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *Confirmation) GetMessage() *string {
	if c == nil {
		return nil
	}
	return c.Message
}

func (c *Confirmation) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Confirmation) UnmarshalJSON(data []byte) error {
	type unmarshaler Confirmation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Confirmation(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *Confirmation) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConfirmationResponse struct {
	Meta  *Meta         `json:"meta,omitempty" url:"meta,omitempty"`
	Data  *Confirmation `json:"data,omitempty" url:"data,omitempty"`
	Error *Error        `json:"error,omitempty" url:"error,omitempty"`
	Links *Links        `json:"links,omitempty" url:"links,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConfirmationResponse) GetMeta() *Meta {
	if c == nil {
		return nil
	}
	return c.Meta
}

func (c *ConfirmationResponse) GetData() *Confirmation {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ConfirmationResponse) GetError() *Error {
	if c == nil {
		return nil
	}
	return c.Error
}

func (c *ConfirmationResponse) GetLinks() *Links {
	if c == nil {
		return nil
	}
	return c.Links
}

func (c *ConfirmationResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConfirmationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ConfirmationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConfirmationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConfirmationResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type Error struct {
	Message *string `json:"message,omitempty" url:"message,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *Error) GetMessage() *string {
	if e == nil {
		return nil
	}
	return e.Message
}

func (e *Error) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *Error) UnmarshalJSON(data []byte) error {
	type unmarshaler Error
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = Error(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *Error) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type Links struct {
	Self   *string `json:"self,omitempty" url:"self,omitempty"`
	Parent *string `json:"parent,omitempty" url:"parent,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *Links) GetSelf() *string {
	if l == nil {
		return nil
	}
	return l.Self
}

func (l *Links) GetParent() *string {
	if l == nil {
		return nil
	}
	return l.Parent
}

func (l *Links) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *Links) UnmarshalJSON(data []byte) error {
	type unmarshaler Links
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = Links(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *Links) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LinksList struct {
	Self  *string `json:"self,omitempty" url:"self,omitempty"`
	First *string `json:"first,omitempty" url:"first,omitempty"`
	Next  *string `json:"next,omitempty" url:"next,omitempty"`
	Prev  *string `json:"prev,omitempty" url:"prev,omitempty"`
	Last  *string `json:"last,omitempty" url:"last,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LinksList) GetSelf() *string {
	if l == nil {
		return nil
	}
	return l.Self
}

func (l *LinksList) GetFirst() *string {
	if l == nil {
		return nil
	}
	return l.First
}

func (l *LinksList) GetNext() *string {
	if l == nil {
		return nil
	}
	return l.Next
}

func (l *LinksList) GetPrev() *string {
	if l == nil {
		return nil
	}
	return l.Prev
}

func (l *LinksList) GetLast() *string {
	if l == nil {
		return nil
	}
	return l.Last
}

func (l *LinksList) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LinksList) UnmarshalJSON(data []byte) error {
	type unmarshaler LinksList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LinksList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LinksList) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type Meta = interface{}

type MetaList struct {
	RequestID *string       `json:"request_id,omitempty" url:"request_id,omitempty"`
	OrgID     *string       `json:"org_id,omitempty" url:"org_id,omitempty"`
	ProjectID *string       `json:"project_id,omitempty" url:"project_id,omitempty"`
	Version   *string       `json:"version,omitempty" url:"version,omitempty"`
	Type      *MetaListType `json:"type,omitempty" url:"type,omitempty"`
	Limit     *int          `json:"limit,omitempty" url:"limit,omitempty"`
	Total     *int          `json:"total,omitempty" url:"total,omitempty"`
	Page      *int          `json:"page,omitempty" url:"page,omitempty"`
	Pages     *int          `json:"pages,omitempty" url:"pages,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MetaList) GetRequestID() *string {
	if m == nil {
		return nil
	}
	return m.RequestID
}

func (m *MetaList) GetOrgID() *string {
	if m == nil {
		return nil
	}
	return m.OrgID
}

func (m *MetaList) GetProjectID() *string {
	if m == nil {
		return nil
	}
	return m.ProjectID
}

func (m *MetaList) GetVersion() *string {
	if m == nil {
		return nil
	}
	return m.Version
}

func (m *MetaList) GetType() *MetaListType {
	if m == nil {
		return nil
	}
	return m.Type
}

func (m *MetaList) GetLimit() *int {
	if m == nil {
		return nil
	}
	return m.Limit
}

func (m *MetaList) GetTotal() *int {
	if m == nil {
		return nil
	}
	return m.Total
}

func (m *MetaList) GetPage() *int {
	if m == nil {
		return nil
	}
	return m.Page
}

func (m *MetaList) GetPages() *int {
	if m == nil {
		return nil
	}
	return m.Pages
}

func (m *MetaList) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MetaList) UnmarshalJSON(data []byte) error {
	type unmarshaler MetaList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetaList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetaList) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MetaListType string

const (
	MetaListTypeObject MetaListType = "object"
	MetaListTypeList   MetaListType = "list"
)

func NewMetaListTypeFromString(s string) (MetaListType, error) {
	switch s {
	case "object":
		return MetaListTypeObject, nil
	case "list":
		return MetaListTypeList, nil
	}
	var t MetaListType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MetaListType) Ptr() *MetaListType {
	return &m
}

type TaskSummary struct {
	ID        string            `json:"id" url:"id"`
	Object    string            `json:"object" url:"object"`
	Kind      TaskSummaryKind   `json:"kind" url:"kind"`
	Status    TaskSummaryStatus `json:"status" url:"status"`
	Progress  *int              `json:"progress,omitempty" url:"progress,omitempty"`
	Error     *string           `json:"error,omitempty" url:"error,omitempty"`
	CreatedBy *string           `json:"created_by,omitempty" url:"created_by,omitempty"`
	Created   time.Time         `json:"created" url:"created"`
	Updated   time.Time         `json:"updated" url:"updated"`
	ParentID  *string           `json:"parent_id,omitempty" url:"parent_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TaskSummary) GetID() string {
	if t == nil {
		return ""
	}
	return t.ID
}

func (t *TaskSummary) GetObject() string {
	if t == nil {
		return ""
	}
	return t.Object
}

func (t *TaskSummary) GetKind() TaskSummaryKind {
	if t == nil {
		return ""
	}
	return t.Kind
}

func (t *TaskSummary) GetStatus() TaskSummaryStatus {
	if t == nil {
		return ""
	}
	return t.Status
}

func (t *TaskSummary) GetProgress() *int {
	if t == nil {
		return nil
	}
	return t.Progress
}

func (t *TaskSummary) GetError() *string {
	if t == nil {
		return nil
	}
	return t.Error
}

func (t *TaskSummary) GetCreatedBy() *string {
	if t == nil {
		return nil
	}
	return t.CreatedBy
}

func (t *TaskSummary) GetCreated() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.Created
}

func (t *TaskSummary) GetUpdated() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.Updated
}

func (t *TaskSummary) GetParentID() *string {
	if t == nil {
		return nil
	}
	return t.ParentID
}

func (t *TaskSummary) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TaskSummary) UnmarshalJSON(data []byte) error {
	type embed TaskSummary
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TaskSummary(unmarshaler.embed)
	t.Created = unmarshaler.Created.Time()
	t.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TaskSummary) MarshalJSON() ([]byte, error) {
	type embed TaskSummary
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*t),
		Created: internal.NewDateTime(t.Created),
		Updated: internal.NewDateTime(t.Updated),
	}
	return json.Marshal(marshaler)
}

func (t *TaskSummary) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TaskSummaryKind string

const (
	TaskSummaryKindVideo       TaskSummaryKind = "video"
	TaskSummaryKindImage       TaskSummaryKind = "image"
	TaskSummaryKindAudio       TaskSummaryKind = "audio"
	TaskSummaryKindChapters    TaskSummaryKind = "chapters"
	TaskSummaryKindSubtitles   TaskSummaryKind = "subtitles"
	TaskSummaryKindThumbnails  TaskSummaryKind = "thumbnails"
	TaskSummaryKindSpeech      TaskSummaryKind = "speech"
	TaskSummaryKindDescription TaskSummaryKind = "description"
	TaskSummaryKindNsfw        TaskSummaryKind = "nsfw"
	TaskSummaryKindPrompt      TaskSummaryKind = "prompt"
	TaskSummaryKindOutline     TaskSummaryKind = "outline"
	TaskSummaryKindHTTP        TaskSummaryKind = "http"
	TaskSummaryKindIngest      TaskSummaryKind = "ingest"
	TaskSummaryKindWorkflow    TaskSummaryKind = "workflow"
	TaskSummaryKindConditions  TaskSummaryKind = "conditions"
)

func NewTaskSummaryKindFromString(s string) (TaskSummaryKind, error) {
	switch s {
	case "video":
		return TaskSummaryKindVideo, nil
	case "image":
		return TaskSummaryKindImage, nil
	case "audio":
		return TaskSummaryKindAudio, nil
	case "chapters":
		return TaskSummaryKindChapters, nil
	case "subtitles":
		return TaskSummaryKindSubtitles, nil
	case "thumbnails":
		return TaskSummaryKindThumbnails, nil
	case "speech":
		return TaskSummaryKindSpeech, nil
	case "description":
		return TaskSummaryKindDescription, nil
	case "nsfw":
		return TaskSummaryKindNsfw, nil
	case "prompt":
		return TaskSummaryKindPrompt, nil
	case "outline":
		return TaskSummaryKindOutline, nil
	case "http":
		return TaskSummaryKindHTTP, nil
	case "ingest":
		return TaskSummaryKindIngest, nil
	case "workflow":
		return TaskSummaryKindWorkflow, nil
	case "conditions":
		return TaskSummaryKindConditions, nil
	}
	var t TaskSummaryKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TaskSummaryKind) Ptr() *TaskSummaryKind {
	return &t
}

type TaskSummaryStatus string

const (
	TaskSummaryStatusPending    TaskSummaryStatus = "pending"
	TaskSummaryStatusWaiting    TaskSummaryStatus = "waiting"
	TaskSummaryStatusProcessing TaskSummaryStatus = "processing"
	TaskSummaryStatusReady      TaskSummaryStatus = "ready"
	TaskSummaryStatusCompleted  TaskSummaryStatus = "completed"
	TaskSummaryStatusFailed     TaskSummaryStatus = "failed"
	TaskSummaryStatusError      TaskSummaryStatus = "error"
	TaskSummaryStatusCancelled  TaskSummaryStatus = "cancelled"
)

func NewTaskSummaryStatusFromString(s string) (TaskSummaryStatus, error) {
	switch s {
	case "pending":
		return TaskSummaryStatusPending, nil
	case "waiting":
		return TaskSummaryStatusWaiting, nil
	case "processing":
		return TaskSummaryStatusProcessing, nil
	case "ready":
		return TaskSummaryStatusReady, nil
	case "completed":
		return TaskSummaryStatusCompleted, nil
	case "failed":
		return TaskSummaryStatusFailed, nil
	case "error":
		return TaskSummaryStatusError, nil
	case "cancelled":
		return TaskSummaryStatusCancelled, nil
	}
	var t TaskSummaryStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TaskSummaryStatus) Ptr() *TaskSummaryStatus {
	return &t
}
