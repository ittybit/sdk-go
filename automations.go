// This file was auto-generated by Fern from our API Definition.

package ittybit

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/ittybit/sdk-go/internal"
	time "time"
)

type AutomationsCreateRequest struct {
	Name        *string                                 `json:"name,omitempty" url:"-"`
	Description *string                                 `json:"description,omitempty" url:"-"`
	Trigger     *AutomationsCreateRequestTrigger        `json:"trigger,omitempty" url:"-"`
	Workflow    []*AutomationsCreateRequestWorkflowItem `json:"workflow,omitempty" url:"-"`
	Status      *AutomationsCreateRequestStatus         `json:"status,omitempty" url:"-"`
}

type AutomationsListRequest struct {
	// Specifies the API Version
	Page          *int `json:"-" url:"page,omitempty"`
	Limit         *int `json:"-" url:"limit,omitempty"`
	acceptVersion string
}

func (a *AutomationsListRequest) AcceptVersion() string {
	return a.acceptVersion
}

type AutomationsCreateRequestStatus string

const (
	AutomationsCreateRequestStatusActive AutomationsCreateRequestStatus = "active"
	AutomationsCreateRequestStatusPaused AutomationsCreateRequestStatus = "paused"
)

func NewAutomationsCreateRequestStatusFromString(s string) (AutomationsCreateRequestStatus, error) {
	switch s {
	case "active":
		return AutomationsCreateRequestStatusActive, nil
	case "paused":
		return AutomationsCreateRequestStatusPaused, nil
	}
	var t AutomationsCreateRequestStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationsCreateRequestStatus) Ptr() *AutomationsCreateRequestStatus {
	return &a
}

type AutomationsCreateRequestTrigger struct {
	kind  string
	event string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsCreateRequestTrigger) Kind() string {
	return a.kind
}

func (a *AutomationsCreateRequestTrigger) Event() string {
	return a.event
}

func (a *AutomationsCreateRequestTrigger) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsCreateRequestTrigger) UnmarshalJSON(data []byte) error {
	type embed AutomationsCreateRequestTrigger
	var unmarshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationsCreateRequestTrigger(unmarshaler.embed)
	if unmarshaler.Kind != "event" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "event", unmarshaler.Kind)
	}
	a.kind = unmarshaler.Kind
	if unmarshaler.Event != "media.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "media.created", unmarshaler.Event)
	}
	a.event = unmarshaler.Event
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "kind", "event")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsCreateRequestTrigger) MarshalJSON() ([]byte, error) {
	type embed AutomationsCreateRequestTrigger
	var marshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
		Kind:  "event",
		Event: "media.created",
	}
	return json.Marshal(marshaler)
}

func (a *AutomationsCreateRequestTrigger) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsCreateRequestWorkflowItem struct {
	Kind AutomationsCreateRequestWorkflowItemKind        `json:"kind" url:"kind"`
	Ref  *string                                         `json:"ref,omitempty" url:"ref,omitempty"`
	Next []*AutomationsCreateRequestWorkflowItemNextItem `json:"next,omitempty" url:"next,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsCreateRequestWorkflowItem) GetKind() AutomationsCreateRequestWorkflowItemKind {
	if a == nil {
		return ""
	}
	return a.Kind
}

func (a *AutomationsCreateRequestWorkflowItem) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationsCreateRequestWorkflowItem) GetNext() []*AutomationsCreateRequestWorkflowItemNextItem {
	if a == nil {
		return nil
	}
	return a.Next
}

func (a *AutomationsCreateRequestWorkflowItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsCreateRequestWorkflowItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsCreateRequestWorkflowItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationsCreateRequestWorkflowItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsCreateRequestWorkflowItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsCreateRequestWorkflowItemKind string

const (
	AutomationsCreateRequestWorkflowItemKindVideo       AutomationsCreateRequestWorkflowItemKind = "video"
	AutomationsCreateRequestWorkflowItemKindImage       AutomationsCreateRequestWorkflowItemKind = "image"
	AutomationsCreateRequestWorkflowItemKindAudio       AutomationsCreateRequestWorkflowItemKind = "audio"
	AutomationsCreateRequestWorkflowItemKindChapters    AutomationsCreateRequestWorkflowItemKind = "chapters"
	AutomationsCreateRequestWorkflowItemKindSubtitles   AutomationsCreateRequestWorkflowItemKind = "subtitles"
	AutomationsCreateRequestWorkflowItemKindThumbnails  AutomationsCreateRequestWorkflowItemKind = "thumbnails"
	AutomationsCreateRequestWorkflowItemKindNsfw        AutomationsCreateRequestWorkflowItemKind = "nsfw"
	AutomationsCreateRequestWorkflowItemKindSpeech      AutomationsCreateRequestWorkflowItemKind = "speech"
	AutomationsCreateRequestWorkflowItemKindDescription AutomationsCreateRequestWorkflowItemKind = "description"
	AutomationsCreateRequestWorkflowItemKindOutline     AutomationsCreateRequestWorkflowItemKind = "outline"
	AutomationsCreateRequestWorkflowItemKindPrompt      AutomationsCreateRequestWorkflowItemKind = "prompt"
	AutomationsCreateRequestWorkflowItemKindHTTP        AutomationsCreateRequestWorkflowItemKind = "http"
)

func NewAutomationsCreateRequestWorkflowItemKindFromString(s string) (AutomationsCreateRequestWorkflowItemKind, error) {
	switch s {
	case "video":
		return AutomationsCreateRequestWorkflowItemKindVideo, nil
	case "image":
		return AutomationsCreateRequestWorkflowItemKindImage, nil
	case "audio":
		return AutomationsCreateRequestWorkflowItemKindAudio, nil
	case "chapters":
		return AutomationsCreateRequestWorkflowItemKindChapters, nil
	case "subtitles":
		return AutomationsCreateRequestWorkflowItemKindSubtitles, nil
	case "thumbnails":
		return AutomationsCreateRequestWorkflowItemKindThumbnails, nil
	case "nsfw":
		return AutomationsCreateRequestWorkflowItemKindNsfw, nil
	case "speech":
		return AutomationsCreateRequestWorkflowItemKindSpeech, nil
	case "description":
		return AutomationsCreateRequestWorkflowItemKindDescription, nil
	case "outline":
		return AutomationsCreateRequestWorkflowItemKindOutline, nil
	case "prompt":
		return AutomationsCreateRequestWorkflowItemKindPrompt, nil
	case "http":
		return AutomationsCreateRequestWorkflowItemKindHTTP, nil
	}
	var t AutomationsCreateRequestWorkflowItemKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationsCreateRequestWorkflowItemKind) Ptr() *AutomationsCreateRequestWorkflowItemKind {
	return &a
}

type AutomationsCreateRequestWorkflowItemNextItem struct {
	Kind *string `json:"kind,omitempty" url:"kind,omitempty"`
	Ref  *string `json:"ref,omitempty" url:"ref,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsCreateRequestWorkflowItemNextItem) GetKind() *string {
	if a == nil {
		return nil
	}
	return a.Kind
}

func (a *AutomationsCreateRequestWorkflowItemNextItem) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationsCreateRequestWorkflowItemNextItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsCreateRequestWorkflowItemNextItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsCreateRequestWorkflowItemNextItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationsCreateRequestWorkflowItemNextItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsCreateRequestWorkflowItemNextItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsCreateResponse struct {
	ID          string                                   `json:"id" url:"id"`
	Name        *string                                  `json:"name,omitempty" url:"name,omitempty"`
	Description *string                                  `json:"description,omitempty" url:"description,omitempty"`
	Trigger     *AutomationsCreateResponseTrigger        `json:"trigger,omitempty" url:"trigger,omitempty"`
	Workflow    []*AutomationsCreateResponseWorkflowItem `json:"workflow,omitempty" url:"workflow,omitempty"`
	Status      AutomationsCreateResponseStatus          `json:"status" url:"status"`
	Created     time.Time                                `json:"created" url:"created"`
	Updated     time.Time                                `json:"updated" url:"updated"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsCreateResponse) GetID() string {
	if a == nil {
		return ""
	}
	return a.ID
}

func (a *AutomationsCreateResponse) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AutomationsCreateResponse) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *AutomationsCreateResponse) GetTrigger() *AutomationsCreateResponseTrigger {
	if a == nil {
		return nil
	}
	return a.Trigger
}

func (a *AutomationsCreateResponse) GetWorkflow() []*AutomationsCreateResponseWorkflowItem {
	if a == nil {
		return nil
	}
	return a.Workflow
}

func (a *AutomationsCreateResponse) GetStatus() AutomationsCreateResponseStatus {
	if a == nil {
		return ""
	}
	return a.Status
}

func (a *AutomationsCreateResponse) GetCreated() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.Created
}

func (a *AutomationsCreateResponse) GetUpdated() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.Updated
}

func (a *AutomationsCreateResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsCreateResponse) UnmarshalJSON(data []byte) error {
	type embed AutomationsCreateResponse
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationsCreateResponse(unmarshaler.embed)
	a.Created = unmarshaler.Created.Time()
	a.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsCreateResponse) MarshalJSON() ([]byte, error) {
	type embed AutomationsCreateResponse
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*a),
		Created: internal.NewDateTime(a.Created),
		Updated: internal.NewDateTime(a.Updated),
	}
	return json.Marshal(marshaler)
}

func (a *AutomationsCreateResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsCreateResponseStatus string

const (
	AutomationsCreateResponseStatusActive AutomationsCreateResponseStatus = "active"
	AutomationsCreateResponseStatusPaused AutomationsCreateResponseStatus = "paused"
)

func NewAutomationsCreateResponseStatusFromString(s string) (AutomationsCreateResponseStatus, error) {
	switch s {
	case "active":
		return AutomationsCreateResponseStatusActive, nil
	case "paused":
		return AutomationsCreateResponseStatusPaused, nil
	}
	var t AutomationsCreateResponseStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationsCreateResponseStatus) Ptr() *AutomationsCreateResponseStatus {
	return &a
}

type AutomationsCreateResponseTrigger struct {
	kind  string
	event string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsCreateResponseTrigger) Kind() string {
	return a.kind
}

func (a *AutomationsCreateResponseTrigger) Event() string {
	return a.event
}

func (a *AutomationsCreateResponseTrigger) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsCreateResponseTrigger) UnmarshalJSON(data []byte) error {
	type embed AutomationsCreateResponseTrigger
	var unmarshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationsCreateResponseTrigger(unmarshaler.embed)
	if unmarshaler.Kind != "event" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "event", unmarshaler.Kind)
	}
	a.kind = unmarshaler.Kind
	if unmarshaler.Event != "media.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "media.created", unmarshaler.Event)
	}
	a.event = unmarshaler.Event
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "kind", "event")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsCreateResponseTrigger) MarshalJSON() ([]byte, error) {
	type embed AutomationsCreateResponseTrigger
	var marshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
		Kind:  "event",
		Event: "media.created",
	}
	return json.Marshal(marshaler)
}

func (a *AutomationsCreateResponseTrigger) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsCreateResponseWorkflowItem struct {
	AutomationsCreateResponseWorkflowItemRef        *AutomationsCreateResponseWorkflowItemRef
	AutomationsCreateResponseWorkflowItemConditions *AutomationsCreateResponseWorkflowItemConditions

	typ string
}

func NewAutomationsCreateResponseWorkflowItemFromAutomationsCreateResponseWorkflowItemRef(value *AutomationsCreateResponseWorkflowItemRef) *AutomationsCreateResponseWorkflowItem {
	return &AutomationsCreateResponseWorkflowItem{typ: "AutomationsCreateResponseWorkflowItemRef", AutomationsCreateResponseWorkflowItemRef: value}
}

func NewAutomationsCreateResponseWorkflowItemFromAutomationsCreateResponseWorkflowItemConditions(value *AutomationsCreateResponseWorkflowItemConditions) *AutomationsCreateResponseWorkflowItem {
	return &AutomationsCreateResponseWorkflowItem{typ: "AutomationsCreateResponseWorkflowItemConditions", AutomationsCreateResponseWorkflowItemConditions: value}
}

func (a *AutomationsCreateResponseWorkflowItem) GetAutomationsCreateResponseWorkflowItemRef() *AutomationsCreateResponseWorkflowItemRef {
	if a == nil {
		return nil
	}
	return a.AutomationsCreateResponseWorkflowItemRef
}

func (a *AutomationsCreateResponseWorkflowItem) GetAutomationsCreateResponseWorkflowItemConditions() *AutomationsCreateResponseWorkflowItemConditions {
	if a == nil {
		return nil
	}
	return a.AutomationsCreateResponseWorkflowItemConditions
}

func (a *AutomationsCreateResponseWorkflowItem) UnmarshalJSON(data []byte) error {
	valueAutomationsCreateResponseWorkflowItemRef := new(AutomationsCreateResponseWorkflowItemRef)
	if err := json.Unmarshal(data, &valueAutomationsCreateResponseWorkflowItemRef); err == nil {
		a.typ = "AutomationsCreateResponseWorkflowItemRef"
		a.AutomationsCreateResponseWorkflowItemRef = valueAutomationsCreateResponseWorkflowItemRef
		return nil
	}
	valueAutomationsCreateResponseWorkflowItemConditions := new(AutomationsCreateResponseWorkflowItemConditions)
	if err := json.Unmarshal(data, &valueAutomationsCreateResponseWorkflowItemConditions); err == nil {
		a.typ = "AutomationsCreateResponseWorkflowItemConditions"
		a.AutomationsCreateResponseWorkflowItemConditions = valueAutomationsCreateResponseWorkflowItemConditions
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AutomationsCreateResponseWorkflowItem) MarshalJSON() ([]byte, error) {
	if a.typ == "AutomationsCreateResponseWorkflowItemRef" || a.AutomationsCreateResponseWorkflowItemRef != nil {
		return json.Marshal(a.AutomationsCreateResponseWorkflowItemRef)
	}
	if a.typ == "AutomationsCreateResponseWorkflowItemConditions" || a.AutomationsCreateResponseWorkflowItemConditions != nil {
		return json.Marshal(a.AutomationsCreateResponseWorkflowItemConditions)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AutomationsCreateResponseWorkflowItemVisitor interface {
	VisitAutomationsCreateResponseWorkflowItemRef(*AutomationsCreateResponseWorkflowItemRef) error
	VisitAutomationsCreateResponseWorkflowItemConditions(*AutomationsCreateResponseWorkflowItemConditions) error
}

func (a *AutomationsCreateResponseWorkflowItem) Accept(visitor AutomationsCreateResponseWorkflowItemVisitor) error {
	if a.typ == "AutomationsCreateResponseWorkflowItemRef" || a.AutomationsCreateResponseWorkflowItemRef != nil {
		return visitor.VisitAutomationsCreateResponseWorkflowItemRef(a.AutomationsCreateResponseWorkflowItemRef)
	}
	if a.typ == "AutomationsCreateResponseWorkflowItemConditions" || a.AutomationsCreateResponseWorkflowItemConditions != nil {
		return visitor.VisitAutomationsCreateResponseWorkflowItemConditions(a.AutomationsCreateResponseWorkflowItemConditions)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AutomationsCreateResponseWorkflowItemConditions struct {
	Conditions []*AutomationsCreateResponseWorkflowItemConditionsConditionsItem `json:"conditions,omitempty" url:"conditions,omitempty"`
	Next       []*AutomationsCreateResponseWorkflowItemConditionsNextItem       `json:"next,omitempty" url:"next,omitempty"`
	kind       string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsCreateResponseWorkflowItemConditions) GetConditions() []*AutomationsCreateResponseWorkflowItemConditionsConditionsItem {
	if a == nil {
		return nil
	}
	return a.Conditions
}

func (a *AutomationsCreateResponseWorkflowItemConditions) GetNext() []*AutomationsCreateResponseWorkflowItemConditionsNextItem {
	if a == nil {
		return nil
	}
	return a.Next
}

func (a *AutomationsCreateResponseWorkflowItemConditions) Kind() string {
	return a.kind
}

func (a *AutomationsCreateResponseWorkflowItemConditions) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsCreateResponseWorkflowItemConditions) UnmarshalJSON(data []byte) error {
	type embed AutomationsCreateResponseWorkflowItemConditions
	var unmarshaler = struct {
		embed
		Kind string `json:"kind"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationsCreateResponseWorkflowItemConditions(unmarshaler.embed)
	if unmarshaler.Kind != "conditions" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "conditions", unmarshaler.Kind)
	}
	a.kind = unmarshaler.Kind
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "kind")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsCreateResponseWorkflowItemConditions) MarshalJSON() ([]byte, error) {
	type embed AutomationsCreateResponseWorkflowItemConditions
	var marshaler = struct {
		embed
		Kind string `json:"kind"`
	}{
		embed: embed(*a),
		Kind:  "conditions",
	}
	return json.Marshal(marshaler)
}

func (a *AutomationsCreateResponseWorkflowItemConditions) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsCreateResponseWorkflowItemConditionsConditionsItem struct {
	Prop  *string `json:"prop,omitempty" url:"prop,omitempty"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsCreateResponseWorkflowItemConditionsConditionsItem) GetProp() *string {
	if a == nil {
		return nil
	}
	return a.Prop
}

func (a *AutomationsCreateResponseWorkflowItemConditionsConditionsItem) GetValue() *string {
	if a == nil {
		return nil
	}
	return a.Value
}

func (a *AutomationsCreateResponseWorkflowItemConditionsConditionsItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsCreateResponseWorkflowItemConditionsConditionsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsCreateResponseWorkflowItemConditionsConditionsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationsCreateResponseWorkflowItemConditionsConditionsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsCreateResponseWorkflowItemConditionsConditionsItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsCreateResponseWorkflowItemConditionsNextItem struct {
	Kind *string `json:"kind,omitempty" url:"kind,omitempty"`
	Ref  *string `json:"ref,omitempty" url:"ref,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsCreateResponseWorkflowItemConditionsNextItem) GetKind() *string {
	if a == nil {
		return nil
	}
	return a.Kind
}

func (a *AutomationsCreateResponseWorkflowItemConditionsNextItem) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationsCreateResponseWorkflowItemConditionsNextItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsCreateResponseWorkflowItemConditionsNextItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsCreateResponseWorkflowItemConditionsNextItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationsCreateResponseWorkflowItemConditionsNextItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsCreateResponseWorkflowItemConditionsNextItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsCreateResponseWorkflowItemRef struct {
	Kind AutomationsCreateResponseWorkflowItemRefKind        `json:"kind" url:"kind"`
	Ref  *string                                             `json:"ref,omitempty" url:"ref,omitempty"`
	Next []*AutomationsCreateResponseWorkflowItemRefNextItem `json:"next,omitempty" url:"next,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsCreateResponseWorkflowItemRef) GetKind() AutomationsCreateResponseWorkflowItemRefKind {
	if a == nil {
		return ""
	}
	return a.Kind
}

func (a *AutomationsCreateResponseWorkflowItemRef) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationsCreateResponseWorkflowItemRef) GetNext() []*AutomationsCreateResponseWorkflowItemRefNextItem {
	if a == nil {
		return nil
	}
	return a.Next
}

func (a *AutomationsCreateResponseWorkflowItemRef) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsCreateResponseWorkflowItemRef) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsCreateResponseWorkflowItemRef
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationsCreateResponseWorkflowItemRef(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsCreateResponseWorkflowItemRef) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsCreateResponseWorkflowItemRefKind string

const (
	AutomationsCreateResponseWorkflowItemRefKindVideo       AutomationsCreateResponseWorkflowItemRefKind = "video"
	AutomationsCreateResponseWorkflowItemRefKindImage       AutomationsCreateResponseWorkflowItemRefKind = "image"
	AutomationsCreateResponseWorkflowItemRefKindAudio       AutomationsCreateResponseWorkflowItemRefKind = "audio"
	AutomationsCreateResponseWorkflowItemRefKindChapters    AutomationsCreateResponseWorkflowItemRefKind = "chapters"
	AutomationsCreateResponseWorkflowItemRefKindSubtitles   AutomationsCreateResponseWorkflowItemRefKind = "subtitles"
	AutomationsCreateResponseWorkflowItemRefKindThumbnails  AutomationsCreateResponseWorkflowItemRefKind = "thumbnails"
	AutomationsCreateResponseWorkflowItemRefKindNsfw        AutomationsCreateResponseWorkflowItemRefKind = "nsfw"
	AutomationsCreateResponseWorkflowItemRefKindSpeech      AutomationsCreateResponseWorkflowItemRefKind = "speech"
	AutomationsCreateResponseWorkflowItemRefKindDescription AutomationsCreateResponseWorkflowItemRefKind = "description"
	AutomationsCreateResponseWorkflowItemRefKindOutline     AutomationsCreateResponseWorkflowItemRefKind = "outline"
	AutomationsCreateResponseWorkflowItemRefKindPrompt      AutomationsCreateResponseWorkflowItemRefKind = "prompt"
	AutomationsCreateResponseWorkflowItemRefKindHTTP        AutomationsCreateResponseWorkflowItemRefKind = "http"
)

func NewAutomationsCreateResponseWorkflowItemRefKindFromString(s string) (AutomationsCreateResponseWorkflowItemRefKind, error) {
	switch s {
	case "video":
		return AutomationsCreateResponseWorkflowItemRefKindVideo, nil
	case "image":
		return AutomationsCreateResponseWorkflowItemRefKindImage, nil
	case "audio":
		return AutomationsCreateResponseWorkflowItemRefKindAudio, nil
	case "chapters":
		return AutomationsCreateResponseWorkflowItemRefKindChapters, nil
	case "subtitles":
		return AutomationsCreateResponseWorkflowItemRefKindSubtitles, nil
	case "thumbnails":
		return AutomationsCreateResponseWorkflowItemRefKindThumbnails, nil
	case "nsfw":
		return AutomationsCreateResponseWorkflowItemRefKindNsfw, nil
	case "speech":
		return AutomationsCreateResponseWorkflowItemRefKindSpeech, nil
	case "description":
		return AutomationsCreateResponseWorkflowItemRefKindDescription, nil
	case "outline":
		return AutomationsCreateResponseWorkflowItemRefKindOutline, nil
	case "prompt":
		return AutomationsCreateResponseWorkflowItemRefKindPrompt, nil
	case "http":
		return AutomationsCreateResponseWorkflowItemRefKindHTTP, nil
	}
	var t AutomationsCreateResponseWorkflowItemRefKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationsCreateResponseWorkflowItemRefKind) Ptr() *AutomationsCreateResponseWorkflowItemRefKind {
	return &a
}

type AutomationsCreateResponseWorkflowItemRefNextItem struct {
	Kind *string `json:"kind,omitempty" url:"kind,omitempty"`
	Ref  *string `json:"ref,omitempty" url:"ref,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsCreateResponseWorkflowItemRefNextItem) GetKind() *string {
	if a == nil {
		return nil
	}
	return a.Kind
}

func (a *AutomationsCreateResponseWorkflowItemRefNextItem) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationsCreateResponseWorkflowItemRefNextItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsCreateResponseWorkflowItemRefNextItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsCreateResponseWorkflowItemRefNextItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationsCreateResponseWorkflowItemRefNextItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsCreateResponseWorkflowItemRefNextItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsDeleteResponse struct {
	Message *string `json:"message,omitempty" url:"message,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsDeleteResponse) GetMessage() *string {
	if a == nil {
		return nil
	}
	return a.Message
}

func (a *AutomationsDeleteResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsDeleteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsDeleteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationsDeleteResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsDeleteResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsGetResponse struct {
	ID          string                                `json:"id" url:"id"`
	Name        *string                               `json:"name,omitempty" url:"name,omitempty"`
	Description *string                               `json:"description,omitempty" url:"description,omitempty"`
	Trigger     *AutomationsGetResponseTrigger        `json:"trigger,omitempty" url:"trigger,omitempty"`
	Workflow    []*AutomationsGetResponseWorkflowItem `json:"workflow,omitempty" url:"workflow,omitempty"`
	Status      AutomationsGetResponseStatus          `json:"status" url:"status"`
	Created     time.Time                             `json:"created" url:"created"`
	Updated     time.Time                             `json:"updated" url:"updated"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsGetResponse) GetID() string {
	if a == nil {
		return ""
	}
	return a.ID
}

func (a *AutomationsGetResponse) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AutomationsGetResponse) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *AutomationsGetResponse) GetTrigger() *AutomationsGetResponseTrigger {
	if a == nil {
		return nil
	}
	return a.Trigger
}

func (a *AutomationsGetResponse) GetWorkflow() []*AutomationsGetResponseWorkflowItem {
	if a == nil {
		return nil
	}
	return a.Workflow
}

func (a *AutomationsGetResponse) GetStatus() AutomationsGetResponseStatus {
	if a == nil {
		return ""
	}
	return a.Status
}

func (a *AutomationsGetResponse) GetCreated() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.Created
}

func (a *AutomationsGetResponse) GetUpdated() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.Updated
}

func (a *AutomationsGetResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsGetResponse) UnmarshalJSON(data []byte) error {
	type embed AutomationsGetResponse
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationsGetResponse(unmarshaler.embed)
	a.Created = unmarshaler.Created.Time()
	a.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsGetResponse) MarshalJSON() ([]byte, error) {
	type embed AutomationsGetResponse
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*a),
		Created: internal.NewDateTime(a.Created),
		Updated: internal.NewDateTime(a.Updated),
	}
	return json.Marshal(marshaler)
}

func (a *AutomationsGetResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsGetResponseStatus string

const (
	AutomationsGetResponseStatusActive AutomationsGetResponseStatus = "active"
	AutomationsGetResponseStatusPaused AutomationsGetResponseStatus = "paused"
)

func NewAutomationsGetResponseStatusFromString(s string) (AutomationsGetResponseStatus, error) {
	switch s {
	case "active":
		return AutomationsGetResponseStatusActive, nil
	case "paused":
		return AutomationsGetResponseStatusPaused, nil
	}
	var t AutomationsGetResponseStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationsGetResponseStatus) Ptr() *AutomationsGetResponseStatus {
	return &a
}

type AutomationsGetResponseTrigger struct {
	kind  string
	event string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsGetResponseTrigger) Kind() string {
	return a.kind
}

func (a *AutomationsGetResponseTrigger) Event() string {
	return a.event
}

func (a *AutomationsGetResponseTrigger) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsGetResponseTrigger) UnmarshalJSON(data []byte) error {
	type embed AutomationsGetResponseTrigger
	var unmarshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationsGetResponseTrigger(unmarshaler.embed)
	if unmarshaler.Kind != "event" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "event", unmarshaler.Kind)
	}
	a.kind = unmarshaler.Kind
	if unmarshaler.Event != "media.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "media.created", unmarshaler.Event)
	}
	a.event = unmarshaler.Event
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "kind", "event")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsGetResponseTrigger) MarshalJSON() ([]byte, error) {
	type embed AutomationsGetResponseTrigger
	var marshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
		Kind:  "event",
		Event: "media.created",
	}
	return json.Marshal(marshaler)
}

func (a *AutomationsGetResponseTrigger) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsGetResponseWorkflowItem struct {
	AutomationsGetResponseWorkflowItemRef        *AutomationsGetResponseWorkflowItemRef
	AutomationsGetResponseWorkflowItemConditions *AutomationsGetResponseWorkflowItemConditions

	typ string
}

func NewAutomationsGetResponseWorkflowItemFromAutomationsGetResponseWorkflowItemRef(value *AutomationsGetResponseWorkflowItemRef) *AutomationsGetResponseWorkflowItem {
	return &AutomationsGetResponseWorkflowItem{typ: "AutomationsGetResponseWorkflowItemRef", AutomationsGetResponseWorkflowItemRef: value}
}

func NewAutomationsGetResponseWorkflowItemFromAutomationsGetResponseWorkflowItemConditions(value *AutomationsGetResponseWorkflowItemConditions) *AutomationsGetResponseWorkflowItem {
	return &AutomationsGetResponseWorkflowItem{typ: "AutomationsGetResponseWorkflowItemConditions", AutomationsGetResponseWorkflowItemConditions: value}
}

func (a *AutomationsGetResponseWorkflowItem) GetAutomationsGetResponseWorkflowItemRef() *AutomationsGetResponseWorkflowItemRef {
	if a == nil {
		return nil
	}
	return a.AutomationsGetResponseWorkflowItemRef
}

func (a *AutomationsGetResponseWorkflowItem) GetAutomationsGetResponseWorkflowItemConditions() *AutomationsGetResponseWorkflowItemConditions {
	if a == nil {
		return nil
	}
	return a.AutomationsGetResponseWorkflowItemConditions
}

func (a *AutomationsGetResponseWorkflowItem) UnmarshalJSON(data []byte) error {
	valueAutomationsGetResponseWorkflowItemRef := new(AutomationsGetResponseWorkflowItemRef)
	if err := json.Unmarshal(data, &valueAutomationsGetResponseWorkflowItemRef); err == nil {
		a.typ = "AutomationsGetResponseWorkflowItemRef"
		a.AutomationsGetResponseWorkflowItemRef = valueAutomationsGetResponseWorkflowItemRef
		return nil
	}
	valueAutomationsGetResponseWorkflowItemConditions := new(AutomationsGetResponseWorkflowItemConditions)
	if err := json.Unmarshal(data, &valueAutomationsGetResponseWorkflowItemConditions); err == nil {
		a.typ = "AutomationsGetResponseWorkflowItemConditions"
		a.AutomationsGetResponseWorkflowItemConditions = valueAutomationsGetResponseWorkflowItemConditions
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AutomationsGetResponseWorkflowItem) MarshalJSON() ([]byte, error) {
	if a.typ == "AutomationsGetResponseWorkflowItemRef" || a.AutomationsGetResponseWorkflowItemRef != nil {
		return json.Marshal(a.AutomationsGetResponseWorkflowItemRef)
	}
	if a.typ == "AutomationsGetResponseWorkflowItemConditions" || a.AutomationsGetResponseWorkflowItemConditions != nil {
		return json.Marshal(a.AutomationsGetResponseWorkflowItemConditions)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AutomationsGetResponseWorkflowItemVisitor interface {
	VisitAutomationsGetResponseWorkflowItemRef(*AutomationsGetResponseWorkflowItemRef) error
	VisitAutomationsGetResponseWorkflowItemConditions(*AutomationsGetResponseWorkflowItemConditions) error
}

func (a *AutomationsGetResponseWorkflowItem) Accept(visitor AutomationsGetResponseWorkflowItemVisitor) error {
	if a.typ == "AutomationsGetResponseWorkflowItemRef" || a.AutomationsGetResponseWorkflowItemRef != nil {
		return visitor.VisitAutomationsGetResponseWorkflowItemRef(a.AutomationsGetResponseWorkflowItemRef)
	}
	if a.typ == "AutomationsGetResponseWorkflowItemConditions" || a.AutomationsGetResponseWorkflowItemConditions != nil {
		return visitor.VisitAutomationsGetResponseWorkflowItemConditions(a.AutomationsGetResponseWorkflowItemConditions)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AutomationsGetResponseWorkflowItemConditions struct {
	Conditions []*AutomationsGetResponseWorkflowItemConditionsConditionsItem `json:"conditions,omitempty" url:"conditions,omitempty"`
	Next       []*AutomationsGetResponseWorkflowItemConditionsNextItem       `json:"next,omitempty" url:"next,omitempty"`
	kind       string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsGetResponseWorkflowItemConditions) GetConditions() []*AutomationsGetResponseWorkflowItemConditionsConditionsItem {
	if a == nil {
		return nil
	}
	return a.Conditions
}

func (a *AutomationsGetResponseWorkflowItemConditions) GetNext() []*AutomationsGetResponseWorkflowItemConditionsNextItem {
	if a == nil {
		return nil
	}
	return a.Next
}

func (a *AutomationsGetResponseWorkflowItemConditions) Kind() string {
	return a.kind
}

func (a *AutomationsGetResponseWorkflowItemConditions) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsGetResponseWorkflowItemConditions) UnmarshalJSON(data []byte) error {
	type embed AutomationsGetResponseWorkflowItemConditions
	var unmarshaler = struct {
		embed
		Kind string `json:"kind"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationsGetResponseWorkflowItemConditions(unmarshaler.embed)
	if unmarshaler.Kind != "conditions" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "conditions", unmarshaler.Kind)
	}
	a.kind = unmarshaler.Kind
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "kind")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsGetResponseWorkflowItemConditions) MarshalJSON() ([]byte, error) {
	type embed AutomationsGetResponseWorkflowItemConditions
	var marshaler = struct {
		embed
		Kind string `json:"kind"`
	}{
		embed: embed(*a),
		Kind:  "conditions",
	}
	return json.Marshal(marshaler)
}

func (a *AutomationsGetResponseWorkflowItemConditions) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsGetResponseWorkflowItemConditionsConditionsItem struct {
	Prop  *string `json:"prop,omitempty" url:"prop,omitempty"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsGetResponseWorkflowItemConditionsConditionsItem) GetProp() *string {
	if a == nil {
		return nil
	}
	return a.Prop
}

func (a *AutomationsGetResponseWorkflowItemConditionsConditionsItem) GetValue() *string {
	if a == nil {
		return nil
	}
	return a.Value
}

func (a *AutomationsGetResponseWorkflowItemConditionsConditionsItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsGetResponseWorkflowItemConditionsConditionsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsGetResponseWorkflowItemConditionsConditionsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationsGetResponseWorkflowItemConditionsConditionsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsGetResponseWorkflowItemConditionsConditionsItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsGetResponseWorkflowItemConditionsNextItem struct {
	Kind *string `json:"kind,omitempty" url:"kind,omitempty"`
	Ref  *string `json:"ref,omitempty" url:"ref,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsGetResponseWorkflowItemConditionsNextItem) GetKind() *string {
	if a == nil {
		return nil
	}
	return a.Kind
}

func (a *AutomationsGetResponseWorkflowItemConditionsNextItem) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationsGetResponseWorkflowItemConditionsNextItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsGetResponseWorkflowItemConditionsNextItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsGetResponseWorkflowItemConditionsNextItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationsGetResponseWorkflowItemConditionsNextItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsGetResponseWorkflowItemConditionsNextItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsGetResponseWorkflowItemRef struct {
	Kind AutomationsGetResponseWorkflowItemRefKind        `json:"kind" url:"kind"`
	Ref  *string                                          `json:"ref,omitempty" url:"ref,omitempty"`
	Next []*AutomationsGetResponseWorkflowItemRefNextItem `json:"next,omitempty" url:"next,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsGetResponseWorkflowItemRef) GetKind() AutomationsGetResponseWorkflowItemRefKind {
	if a == nil {
		return ""
	}
	return a.Kind
}

func (a *AutomationsGetResponseWorkflowItemRef) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationsGetResponseWorkflowItemRef) GetNext() []*AutomationsGetResponseWorkflowItemRefNextItem {
	if a == nil {
		return nil
	}
	return a.Next
}

func (a *AutomationsGetResponseWorkflowItemRef) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsGetResponseWorkflowItemRef) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsGetResponseWorkflowItemRef
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationsGetResponseWorkflowItemRef(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsGetResponseWorkflowItemRef) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsGetResponseWorkflowItemRefKind string

const (
	AutomationsGetResponseWorkflowItemRefKindVideo       AutomationsGetResponseWorkflowItemRefKind = "video"
	AutomationsGetResponseWorkflowItemRefKindImage       AutomationsGetResponseWorkflowItemRefKind = "image"
	AutomationsGetResponseWorkflowItemRefKindAudio       AutomationsGetResponseWorkflowItemRefKind = "audio"
	AutomationsGetResponseWorkflowItemRefKindChapters    AutomationsGetResponseWorkflowItemRefKind = "chapters"
	AutomationsGetResponseWorkflowItemRefKindSubtitles   AutomationsGetResponseWorkflowItemRefKind = "subtitles"
	AutomationsGetResponseWorkflowItemRefKindThumbnails  AutomationsGetResponseWorkflowItemRefKind = "thumbnails"
	AutomationsGetResponseWorkflowItemRefKindNsfw        AutomationsGetResponseWorkflowItemRefKind = "nsfw"
	AutomationsGetResponseWorkflowItemRefKindSpeech      AutomationsGetResponseWorkflowItemRefKind = "speech"
	AutomationsGetResponseWorkflowItemRefKindDescription AutomationsGetResponseWorkflowItemRefKind = "description"
	AutomationsGetResponseWorkflowItemRefKindOutline     AutomationsGetResponseWorkflowItemRefKind = "outline"
	AutomationsGetResponseWorkflowItemRefKindPrompt      AutomationsGetResponseWorkflowItemRefKind = "prompt"
	AutomationsGetResponseWorkflowItemRefKindHTTP        AutomationsGetResponseWorkflowItemRefKind = "http"
)

func NewAutomationsGetResponseWorkflowItemRefKindFromString(s string) (AutomationsGetResponseWorkflowItemRefKind, error) {
	switch s {
	case "video":
		return AutomationsGetResponseWorkflowItemRefKindVideo, nil
	case "image":
		return AutomationsGetResponseWorkflowItemRefKindImage, nil
	case "audio":
		return AutomationsGetResponseWorkflowItemRefKindAudio, nil
	case "chapters":
		return AutomationsGetResponseWorkflowItemRefKindChapters, nil
	case "subtitles":
		return AutomationsGetResponseWorkflowItemRefKindSubtitles, nil
	case "thumbnails":
		return AutomationsGetResponseWorkflowItemRefKindThumbnails, nil
	case "nsfw":
		return AutomationsGetResponseWorkflowItemRefKindNsfw, nil
	case "speech":
		return AutomationsGetResponseWorkflowItemRefKindSpeech, nil
	case "description":
		return AutomationsGetResponseWorkflowItemRefKindDescription, nil
	case "outline":
		return AutomationsGetResponseWorkflowItemRefKindOutline, nil
	case "prompt":
		return AutomationsGetResponseWorkflowItemRefKindPrompt, nil
	case "http":
		return AutomationsGetResponseWorkflowItemRefKindHTTP, nil
	}
	var t AutomationsGetResponseWorkflowItemRefKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationsGetResponseWorkflowItemRefKind) Ptr() *AutomationsGetResponseWorkflowItemRefKind {
	return &a
}

type AutomationsGetResponseWorkflowItemRefNextItem struct {
	Kind *string `json:"kind,omitempty" url:"kind,omitempty"`
	Ref  *string `json:"ref,omitempty" url:"ref,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsGetResponseWorkflowItemRefNextItem) GetKind() *string {
	if a == nil {
		return nil
	}
	return a.Kind
}

func (a *AutomationsGetResponseWorkflowItemRefNextItem) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationsGetResponseWorkflowItemRefNextItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsGetResponseWorkflowItemRefNextItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsGetResponseWorkflowItemRefNextItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationsGetResponseWorkflowItemRefNextItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsGetResponseWorkflowItemRefNextItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsListResponseItem struct {
	ID          string                                     `json:"id" url:"id"`
	Name        *string                                    `json:"name,omitempty" url:"name,omitempty"`
	Description *string                                    `json:"description,omitempty" url:"description,omitempty"`
	Trigger     *AutomationsListResponseItemTrigger        `json:"trigger,omitempty" url:"trigger,omitempty"`
	Workflow    []*AutomationsListResponseItemWorkflowItem `json:"workflow,omitempty" url:"workflow,omitempty"`
	Status      AutomationsListResponseItemStatus          `json:"status" url:"status"`
	Created     time.Time                                  `json:"created" url:"created"`
	Updated     time.Time                                  `json:"updated" url:"updated"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsListResponseItem) GetID() string {
	if a == nil {
		return ""
	}
	return a.ID
}

func (a *AutomationsListResponseItem) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AutomationsListResponseItem) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *AutomationsListResponseItem) GetTrigger() *AutomationsListResponseItemTrigger {
	if a == nil {
		return nil
	}
	return a.Trigger
}

func (a *AutomationsListResponseItem) GetWorkflow() []*AutomationsListResponseItemWorkflowItem {
	if a == nil {
		return nil
	}
	return a.Workflow
}

func (a *AutomationsListResponseItem) GetStatus() AutomationsListResponseItemStatus {
	if a == nil {
		return ""
	}
	return a.Status
}

func (a *AutomationsListResponseItem) GetCreated() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.Created
}

func (a *AutomationsListResponseItem) GetUpdated() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.Updated
}

func (a *AutomationsListResponseItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsListResponseItem) UnmarshalJSON(data []byte) error {
	type embed AutomationsListResponseItem
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationsListResponseItem(unmarshaler.embed)
	a.Created = unmarshaler.Created.Time()
	a.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsListResponseItem) MarshalJSON() ([]byte, error) {
	type embed AutomationsListResponseItem
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*a),
		Created: internal.NewDateTime(a.Created),
		Updated: internal.NewDateTime(a.Updated),
	}
	return json.Marshal(marshaler)
}

func (a *AutomationsListResponseItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsListResponseItemStatus string

const (
	AutomationsListResponseItemStatusActive AutomationsListResponseItemStatus = "active"
	AutomationsListResponseItemStatusPaused AutomationsListResponseItemStatus = "paused"
)

func NewAutomationsListResponseItemStatusFromString(s string) (AutomationsListResponseItemStatus, error) {
	switch s {
	case "active":
		return AutomationsListResponseItemStatusActive, nil
	case "paused":
		return AutomationsListResponseItemStatusPaused, nil
	}
	var t AutomationsListResponseItemStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationsListResponseItemStatus) Ptr() *AutomationsListResponseItemStatus {
	return &a
}

type AutomationsListResponseItemTrigger struct {
	kind  string
	event string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsListResponseItemTrigger) Kind() string {
	return a.kind
}

func (a *AutomationsListResponseItemTrigger) Event() string {
	return a.event
}

func (a *AutomationsListResponseItemTrigger) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsListResponseItemTrigger) UnmarshalJSON(data []byte) error {
	type embed AutomationsListResponseItemTrigger
	var unmarshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationsListResponseItemTrigger(unmarshaler.embed)
	if unmarshaler.Kind != "event" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "event", unmarshaler.Kind)
	}
	a.kind = unmarshaler.Kind
	if unmarshaler.Event != "media.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "media.created", unmarshaler.Event)
	}
	a.event = unmarshaler.Event
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "kind", "event")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsListResponseItemTrigger) MarshalJSON() ([]byte, error) {
	type embed AutomationsListResponseItemTrigger
	var marshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
		Kind:  "event",
		Event: "media.created",
	}
	return json.Marshal(marshaler)
}

func (a *AutomationsListResponseItemTrigger) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsListResponseItemWorkflowItem struct {
	AutomationsListResponseItemWorkflowItemRef        *AutomationsListResponseItemWorkflowItemRef
	AutomationsListResponseItemWorkflowItemConditions *AutomationsListResponseItemWorkflowItemConditions

	typ string
}

func NewAutomationsListResponseItemWorkflowItemFromAutomationsListResponseItemWorkflowItemRef(value *AutomationsListResponseItemWorkflowItemRef) *AutomationsListResponseItemWorkflowItem {
	return &AutomationsListResponseItemWorkflowItem{typ: "AutomationsListResponseItemWorkflowItemRef", AutomationsListResponseItemWorkflowItemRef: value}
}

func NewAutomationsListResponseItemWorkflowItemFromAutomationsListResponseItemWorkflowItemConditions(value *AutomationsListResponseItemWorkflowItemConditions) *AutomationsListResponseItemWorkflowItem {
	return &AutomationsListResponseItemWorkflowItem{typ: "AutomationsListResponseItemWorkflowItemConditions", AutomationsListResponseItemWorkflowItemConditions: value}
}

func (a *AutomationsListResponseItemWorkflowItem) GetAutomationsListResponseItemWorkflowItemRef() *AutomationsListResponseItemWorkflowItemRef {
	if a == nil {
		return nil
	}
	return a.AutomationsListResponseItemWorkflowItemRef
}

func (a *AutomationsListResponseItemWorkflowItem) GetAutomationsListResponseItemWorkflowItemConditions() *AutomationsListResponseItemWorkflowItemConditions {
	if a == nil {
		return nil
	}
	return a.AutomationsListResponseItemWorkflowItemConditions
}

func (a *AutomationsListResponseItemWorkflowItem) UnmarshalJSON(data []byte) error {
	valueAutomationsListResponseItemWorkflowItemRef := new(AutomationsListResponseItemWorkflowItemRef)
	if err := json.Unmarshal(data, &valueAutomationsListResponseItemWorkflowItemRef); err == nil {
		a.typ = "AutomationsListResponseItemWorkflowItemRef"
		a.AutomationsListResponseItemWorkflowItemRef = valueAutomationsListResponseItemWorkflowItemRef
		return nil
	}
	valueAutomationsListResponseItemWorkflowItemConditions := new(AutomationsListResponseItemWorkflowItemConditions)
	if err := json.Unmarshal(data, &valueAutomationsListResponseItemWorkflowItemConditions); err == nil {
		a.typ = "AutomationsListResponseItemWorkflowItemConditions"
		a.AutomationsListResponseItemWorkflowItemConditions = valueAutomationsListResponseItemWorkflowItemConditions
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AutomationsListResponseItemWorkflowItem) MarshalJSON() ([]byte, error) {
	if a.typ == "AutomationsListResponseItemWorkflowItemRef" || a.AutomationsListResponseItemWorkflowItemRef != nil {
		return json.Marshal(a.AutomationsListResponseItemWorkflowItemRef)
	}
	if a.typ == "AutomationsListResponseItemWorkflowItemConditions" || a.AutomationsListResponseItemWorkflowItemConditions != nil {
		return json.Marshal(a.AutomationsListResponseItemWorkflowItemConditions)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AutomationsListResponseItemWorkflowItemVisitor interface {
	VisitAutomationsListResponseItemWorkflowItemRef(*AutomationsListResponseItemWorkflowItemRef) error
	VisitAutomationsListResponseItemWorkflowItemConditions(*AutomationsListResponseItemWorkflowItemConditions) error
}

func (a *AutomationsListResponseItemWorkflowItem) Accept(visitor AutomationsListResponseItemWorkflowItemVisitor) error {
	if a.typ == "AutomationsListResponseItemWorkflowItemRef" || a.AutomationsListResponseItemWorkflowItemRef != nil {
		return visitor.VisitAutomationsListResponseItemWorkflowItemRef(a.AutomationsListResponseItemWorkflowItemRef)
	}
	if a.typ == "AutomationsListResponseItemWorkflowItemConditions" || a.AutomationsListResponseItemWorkflowItemConditions != nil {
		return visitor.VisitAutomationsListResponseItemWorkflowItemConditions(a.AutomationsListResponseItemWorkflowItemConditions)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AutomationsListResponseItemWorkflowItemConditions struct {
	Conditions []*AutomationsListResponseItemWorkflowItemConditionsConditionsItem `json:"conditions,omitempty" url:"conditions,omitempty"`
	Next       []*AutomationsListResponseItemWorkflowItemConditionsNextItem       `json:"next,omitempty" url:"next,omitempty"`
	kind       string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsListResponseItemWorkflowItemConditions) GetConditions() []*AutomationsListResponseItemWorkflowItemConditionsConditionsItem {
	if a == nil {
		return nil
	}
	return a.Conditions
}

func (a *AutomationsListResponseItemWorkflowItemConditions) GetNext() []*AutomationsListResponseItemWorkflowItemConditionsNextItem {
	if a == nil {
		return nil
	}
	return a.Next
}

func (a *AutomationsListResponseItemWorkflowItemConditions) Kind() string {
	return a.kind
}

func (a *AutomationsListResponseItemWorkflowItemConditions) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsListResponseItemWorkflowItemConditions) UnmarshalJSON(data []byte) error {
	type embed AutomationsListResponseItemWorkflowItemConditions
	var unmarshaler = struct {
		embed
		Kind string `json:"kind"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationsListResponseItemWorkflowItemConditions(unmarshaler.embed)
	if unmarshaler.Kind != "conditions" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "conditions", unmarshaler.Kind)
	}
	a.kind = unmarshaler.Kind
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "kind")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsListResponseItemWorkflowItemConditions) MarshalJSON() ([]byte, error) {
	type embed AutomationsListResponseItemWorkflowItemConditions
	var marshaler = struct {
		embed
		Kind string `json:"kind"`
	}{
		embed: embed(*a),
		Kind:  "conditions",
	}
	return json.Marshal(marshaler)
}

func (a *AutomationsListResponseItemWorkflowItemConditions) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsListResponseItemWorkflowItemConditionsConditionsItem struct {
	Prop  *string `json:"prop,omitempty" url:"prop,omitempty"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsListResponseItemWorkflowItemConditionsConditionsItem) GetProp() *string {
	if a == nil {
		return nil
	}
	return a.Prop
}

func (a *AutomationsListResponseItemWorkflowItemConditionsConditionsItem) GetValue() *string {
	if a == nil {
		return nil
	}
	return a.Value
}

func (a *AutomationsListResponseItemWorkflowItemConditionsConditionsItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsListResponseItemWorkflowItemConditionsConditionsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsListResponseItemWorkflowItemConditionsConditionsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationsListResponseItemWorkflowItemConditionsConditionsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsListResponseItemWorkflowItemConditionsConditionsItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsListResponseItemWorkflowItemConditionsNextItem struct {
	Kind *string `json:"kind,omitempty" url:"kind,omitempty"`
	Ref  *string `json:"ref,omitempty" url:"ref,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsListResponseItemWorkflowItemConditionsNextItem) GetKind() *string {
	if a == nil {
		return nil
	}
	return a.Kind
}

func (a *AutomationsListResponseItemWorkflowItemConditionsNextItem) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationsListResponseItemWorkflowItemConditionsNextItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsListResponseItemWorkflowItemConditionsNextItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsListResponseItemWorkflowItemConditionsNextItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationsListResponseItemWorkflowItemConditionsNextItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsListResponseItemWorkflowItemConditionsNextItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsListResponseItemWorkflowItemRef struct {
	Kind AutomationsListResponseItemWorkflowItemRefKind        `json:"kind" url:"kind"`
	Ref  *string                                               `json:"ref,omitempty" url:"ref,omitempty"`
	Next []*AutomationsListResponseItemWorkflowItemRefNextItem `json:"next,omitempty" url:"next,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsListResponseItemWorkflowItemRef) GetKind() AutomationsListResponseItemWorkflowItemRefKind {
	if a == nil {
		return ""
	}
	return a.Kind
}

func (a *AutomationsListResponseItemWorkflowItemRef) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationsListResponseItemWorkflowItemRef) GetNext() []*AutomationsListResponseItemWorkflowItemRefNextItem {
	if a == nil {
		return nil
	}
	return a.Next
}

func (a *AutomationsListResponseItemWorkflowItemRef) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsListResponseItemWorkflowItemRef) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsListResponseItemWorkflowItemRef
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationsListResponseItemWorkflowItemRef(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsListResponseItemWorkflowItemRef) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsListResponseItemWorkflowItemRefKind string

const (
	AutomationsListResponseItemWorkflowItemRefKindVideo       AutomationsListResponseItemWorkflowItemRefKind = "video"
	AutomationsListResponseItemWorkflowItemRefKindImage       AutomationsListResponseItemWorkflowItemRefKind = "image"
	AutomationsListResponseItemWorkflowItemRefKindAudio       AutomationsListResponseItemWorkflowItemRefKind = "audio"
	AutomationsListResponseItemWorkflowItemRefKindChapters    AutomationsListResponseItemWorkflowItemRefKind = "chapters"
	AutomationsListResponseItemWorkflowItemRefKindSubtitles   AutomationsListResponseItemWorkflowItemRefKind = "subtitles"
	AutomationsListResponseItemWorkflowItemRefKindThumbnails  AutomationsListResponseItemWorkflowItemRefKind = "thumbnails"
	AutomationsListResponseItemWorkflowItemRefKindNsfw        AutomationsListResponseItemWorkflowItemRefKind = "nsfw"
	AutomationsListResponseItemWorkflowItemRefKindSpeech      AutomationsListResponseItemWorkflowItemRefKind = "speech"
	AutomationsListResponseItemWorkflowItemRefKindDescription AutomationsListResponseItemWorkflowItemRefKind = "description"
	AutomationsListResponseItemWorkflowItemRefKindOutline     AutomationsListResponseItemWorkflowItemRefKind = "outline"
	AutomationsListResponseItemWorkflowItemRefKindPrompt      AutomationsListResponseItemWorkflowItemRefKind = "prompt"
	AutomationsListResponseItemWorkflowItemRefKindHTTP        AutomationsListResponseItemWorkflowItemRefKind = "http"
)

func NewAutomationsListResponseItemWorkflowItemRefKindFromString(s string) (AutomationsListResponseItemWorkflowItemRefKind, error) {
	switch s {
	case "video":
		return AutomationsListResponseItemWorkflowItemRefKindVideo, nil
	case "image":
		return AutomationsListResponseItemWorkflowItemRefKindImage, nil
	case "audio":
		return AutomationsListResponseItemWorkflowItemRefKindAudio, nil
	case "chapters":
		return AutomationsListResponseItemWorkflowItemRefKindChapters, nil
	case "subtitles":
		return AutomationsListResponseItemWorkflowItemRefKindSubtitles, nil
	case "thumbnails":
		return AutomationsListResponseItemWorkflowItemRefKindThumbnails, nil
	case "nsfw":
		return AutomationsListResponseItemWorkflowItemRefKindNsfw, nil
	case "speech":
		return AutomationsListResponseItemWorkflowItemRefKindSpeech, nil
	case "description":
		return AutomationsListResponseItemWorkflowItemRefKindDescription, nil
	case "outline":
		return AutomationsListResponseItemWorkflowItemRefKindOutline, nil
	case "prompt":
		return AutomationsListResponseItemWorkflowItemRefKindPrompt, nil
	case "http":
		return AutomationsListResponseItemWorkflowItemRefKindHTTP, nil
	}
	var t AutomationsListResponseItemWorkflowItemRefKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationsListResponseItemWorkflowItemRefKind) Ptr() *AutomationsListResponseItemWorkflowItemRefKind {
	return &a
}

type AutomationsListResponseItemWorkflowItemRefNextItem struct {
	Kind *string `json:"kind,omitempty" url:"kind,omitempty"`
	Ref  *string `json:"ref,omitempty" url:"ref,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsListResponseItemWorkflowItemRefNextItem) GetKind() *string {
	if a == nil {
		return nil
	}
	return a.Kind
}

func (a *AutomationsListResponseItemWorkflowItemRefNextItem) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationsListResponseItemWorkflowItemRefNextItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsListResponseItemWorkflowItemRefNextItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsListResponseItemWorkflowItemRefNextItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationsListResponseItemWorkflowItemRefNextItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsListResponseItemWorkflowItemRefNextItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsUpdateRequestStatus string

const (
	AutomationsUpdateRequestStatusActive AutomationsUpdateRequestStatus = "active"
	AutomationsUpdateRequestStatusPaused AutomationsUpdateRequestStatus = "paused"
)

func NewAutomationsUpdateRequestStatusFromString(s string) (AutomationsUpdateRequestStatus, error) {
	switch s {
	case "active":
		return AutomationsUpdateRequestStatusActive, nil
	case "paused":
		return AutomationsUpdateRequestStatusPaused, nil
	}
	var t AutomationsUpdateRequestStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationsUpdateRequestStatus) Ptr() *AutomationsUpdateRequestStatus {
	return &a
}

type AutomationsUpdateRequestTrigger struct {
	kind  string
	event string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsUpdateRequestTrigger) Kind() string {
	return a.kind
}

func (a *AutomationsUpdateRequestTrigger) Event() string {
	return a.event
}

func (a *AutomationsUpdateRequestTrigger) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsUpdateRequestTrigger) UnmarshalJSON(data []byte) error {
	type embed AutomationsUpdateRequestTrigger
	var unmarshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationsUpdateRequestTrigger(unmarshaler.embed)
	if unmarshaler.Kind != "event" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "event", unmarshaler.Kind)
	}
	a.kind = unmarshaler.Kind
	if unmarshaler.Event != "media.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "media.created", unmarshaler.Event)
	}
	a.event = unmarshaler.Event
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "kind", "event")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsUpdateRequestTrigger) MarshalJSON() ([]byte, error) {
	type embed AutomationsUpdateRequestTrigger
	var marshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
		Kind:  "event",
		Event: "media.created",
	}
	return json.Marshal(marshaler)
}

func (a *AutomationsUpdateRequestTrigger) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsUpdateRequestWorkflowItem struct {
	Kind AutomationsUpdateRequestWorkflowItemKind        `json:"kind" url:"kind"`
	Ref  *string                                         `json:"ref,omitempty" url:"ref,omitempty"`
	Next []*AutomationsUpdateRequestWorkflowItemNextItem `json:"next,omitempty" url:"next,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsUpdateRequestWorkflowItem) GetKind() AutomationsUpdateRequestWorkflowItemKind {
	if a == nil {
		return ""
	}
	return a.Kind
}

func (a *AutomationsUpdateRequestWorkflowItem) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationsUpdateRequestWorkflowItem) GetNext() []*AutomationsUpdateRequestWorkflowItemNextItem {
	if a == nil {
		return nil
	}
	return a.Next
}

func (a *AutomationsUpdateRequestWorkflowItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsUpdateRequestWorkflowItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsUpdateRequestWorkflowItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationsUpdateRequestWorkflowItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsUpdateRequestWorkflowItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsUpdateRequestWorkflowItemKind string

const (
	AutomationsUpdateRequestWorkflowItemKindVideo       AutomationsUpdateRequestWorkflowItemKind = "video"
	AutomationsUpdateRequestWorkflowItemKindImage       AutomationsUpdateRequestWorkflowItemKind = "image"
	AutomationsUpdateRequestWorkflowItemKindAudio       AutomationsUpdateRequestWorkflowItemKind = "audio"
	AutomationsUpdateRequestWorkflowItemKindChapters    AutomationsUpdateRequestWorkflowItemKind = "chapters"
	AutomationsUpdateRequestWorkflowItemKindSubtitles   AutomationsUpdateRequestWorkflowItemKind = "subtitles"
	AutomationsUpdateRequestWorkflowItemKindThumbnails  AutomationsUpdateRequestWorkflowItemKind = "thumbnails"
	AutomationsUpdateRequestWorkflowItemKindNsfw        AutomationsUpdateRequestWorkflowItemKind = "nsfw"
	AutomationsUpdateRequestWorkflowItemKindSpeech      AutomationsUpdateRequestWorkflowItemKind = "speech"
	AutomationsUpdateRequestWorkflowItemKindDescription AutomationsUpdateRequestWorkflowItemKind = "description"
	AutomationsUpdateRequestWorkflowItemKindOutline     AutomationsUpdateRequestWorkflowItemKind = "outline"
	AutomationsUpdateRequestWorkflowItemKindPrompt      AutomationsUpdateRequestWorkflowItemKind = "prompt"
	AutomationsUpdateRequestWorkflowItemKindHTTP        AutomationsUpdateRequestWorkflowItemKind = "http"
)

func NewAutomationsUpdateRequestWorkflowItemKindFromString(s string) (AutomationsUpdateRequestWorkflowItemKind, error) {
	switch s {
	case "video":
		return AutomationsUpdateRequestWorkflowItemKindVideo, nil
	case "image":
		return AutomationsUpdateRequestWorkflowItemKindImage, nil
	case "audio":
		return AutomationsUpdateRequestWorkflowItemKindAudio, nil
	case "chapters":
		return AutomationsUpdateRequestWorkflowItemKindChapters, nil
	case "subtitles":
		return AutomationsUpdateRequestWorkflowItemKindSubtitles, nil
	case "thumbnails":
		return AutomationsUpdateRequestWorkflowItemKindThumbnails, nil
	case "nsfw":
		return AutomationsUpdateRequestWorkflowItemKindNsfw, nil
	case "speech":
		return AutomationsUpdateRequestWorkflowItemKindSpeech, nil
	case "description":
		return AutomationsUpdateRequestWorkflowItemKindDescription, nil
	case "outline":
		return AutomationsUpdateRequestWorkflowItemKindOutline, nil
	case "prompt":
		return AutomationsUpdateRequestWorkflowItemKindPrompt, nil
	case "http":
		return AutomationsUpdateRequestWorkflowItemKindHTTP, nil
	}
	var t AutomationsUpdateRequestWorkflowItemKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationsUpdateRequestWorkflowItemKind) Ptr() *AutomationsUpdateRequestWorkflowItemKind {
	return &a
}

type AutomationsUpdateRequestWorkflowItemNextItem struct {
	Kind *string `json:"kind,omitempty" url:"kind,omitempty"`
	Ref  *string `json:"ref,omitempty" url:"ref,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsUpdateRequestWorkflowItemNextItem) GetKind() *string {
	if a == nil {
		return nil
	}
	return a.Kind
}

func (a *AutomationsUpdateRequestWorkflowItemNextItem) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationsUpdateRequestWorkflowItemNextItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsUpdateRequestWorkflowItemNextItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsUpdateRequestWorkflowItemNextItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationsUpdateRequestWorkflowItemNextItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsUpdateRequestWorkflowItemNextItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsUpdateResponse struct {
	ID          string                                   `json:"id" url:"id"`
	Name        *string                                  `json:"name,omitempty" url:"name,omitempty"`
	Description *string                                  `json:"description,omitempty" url:"description,omitempty"`
	Trigger     *AutomationsUpdateResponseTrigger        `json:"trigger,omitempty" url:"trigger,omitempty"`
	Workflow    []*AutomationsUpdateResponseWorkflowItem `json:"workflow,omitempty" url:"workflow,omitempty"`
	Status      AutomationsUpdateResponseStatus          `json:"status" url:"status"`
	Created     time.Time                                `json:"created" url:"created"`
	Updated     time.Time                                `json:"updated" url:"updated"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsUpdateResponse) GetID() string {
	if a == nil {
		return ""
	}
	return a.ID
}

func (a *AutomationsUpdateResponse) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AutomationsUpdateResponse) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *AutomationsUpdateResponse) GetTrigger() *AutomationsUpdateResponseTrigger {
	if a == nil {
		return nil
	}
	return a.Trigger
}

func (a *AutomationsUpdateResponse) GetWorkflow() []*AutomationsUpdateResponseWorkflowItem {
	if a == nil {
		return nil
	}
	return a.Workflow
}

func (a *AutomationsUpdateResponse) GetStatus() AutomationsUpdateResponseStatus {
	if a == nil {
		return ""
	}
	return a.Status
}

func (a *AutomationsUpdateResponse) GetCreated() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.Created
}

func (a *AutomationsUpdateResponse) GetUpdated() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.Updated
}

func (a *AutomationsUpdateResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsUpdateResponse) UnmarshalJSON(data []byte) error {
	type embed AutomationsUpdateResponse
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationsUpdateResponse(unmarshaler.embed)
	a.Created = unmarshaler.Created.Time()
	a.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsUpdateResponse) MarshalJSON() ([]byte, error) {
	type embed AutomationsUpdateResponse
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*a),
		Created: internal.NewDateTime(a.Created),
		Updated: internal.NewDateTime(a.Updated),
	}
	return json.Marshal(marshaler)
}

func (a *AutomationsUpdateResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsUpdateResponseStatus string

const (
	AutomationsUpdateResponseStatusActive AutomationsUpdateResponseStatus = "active"
	AutomationsUpdateResponseStatusPaused AutomationsUpdateResponseStatus = "paused"
)

func NewAutomationsUpdateResponseStatusFromString(s string) (AutomationsUpdateResponseStatus, error) {
	switch s {
	case "active":
		return AutomationsUpdateResponseStatusActive, nil
	case "paused":
		return AutomationsUpdateResponseStatusPaused, nil
	}
	var t AutomationsUpdateResponseStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationsUpdateResponseStatus) Ptr() *AutomationsUpdateResponseStatus {
	return &a
}

type AutomationsUpdateResponseTrigger struct {
	kind  string
	event string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsUpdateResponseTrigger) Kind() string {
	return a.kind
}

func (a *AutomationsUpdateResponseTrigger) Event() string {
	return a.event
}

func (a *AutomationsUpdateResponseTrigger) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsUpdateResponseTrigger) UnmarshalJSON(data []byte) error {
	type embed AutomationsUpdateResponseTrigger
	var unmarshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationsUpdateResponseTrigger(unmarshaler.embed)
	if unmarshaler.Kind != "event" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "event", unmarshaler.Kind)
	}
	a.kind = unmarshaler.Kind
	if unmarshaler.Event != "media.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "media.created", unmarshaler.Event)
	}
	a.event = unmarshaler.Event
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "kind", "event")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsUpdateResponseTrigger) MarshalJSON() ([]byte, error) {
	type embed AutomationsUpdateResponseTrigger
	var marshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
		Kind:  "event",
		Event: "media.created",
	}
	return json.Marshal(marshaler)
}

func (a *AutomationsUpdateResponseTrigger) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsUpdateResponseWorkflowItem struct {
	AutomationsUpdateResponseWorkflowItemRef        *AutomationsUpdateResponseWorkflowItemRef
	AutomationsUpdateResponseWorkflowItemConditions *AutomationsUpdateResponseWorkflowItemConditions

	typ string
}

func NewAutomationsUpdateResponseWorkflowItemFromAutomationsUpdateResponseWorkflowItemRef(value *AutomationsUpdateResponseWorkflowItemRef) *AutomationsUpdateResponseWorkflowItem {
	return &AutomationsUpdateResponseWorkflowItem{typ: "AutomationsUpdateResponseWorkflowItemRef", AutomationsUpdateResponseWorkflowItemRef: value}
}

func NewAutomationsUpdateResponseWorkflowItemFromAutomationsUpdateResponseWorkflowItemConditions(value *AutomationsUpdateResponseWorkflowItemConditions) *AutomationsUpdateResponseWorkflowItem {
	return &AutomationsUpdateResponseWorkflowItem{typ: "AutomationsUpdateResponseWorkflowItemConditions", AutomationsUpdateResponseWorkflowItemConditions: value}
}

func (a *AutomationsUpdateResponseWorkflowItem) GetAutomationsUpdateResponseWorkflowItemRef() *AutomationsUpdateResponseWorkflowItemRef {
	if a == nil {
		return nil
	}
	return a.AutomationsUpdateResponseWorkflowItemRef
}

func (a *AutomationsUpdateResponseWorkflowItem) GetAutomationsUpdateResponseWorkflowItemConditions() *AutomationsUpdateResponseWorkflowItemConditions {
	if a == nil {
		return nil
	}
	return a.AutomationsUpdateResponseWorkflowItemConditions
}

func (a *AutomationsUpdateResponseWorkflowItem) UnmarshalJSON(data []byte) error {
	valueAutomationsUpdateResponseWorkflowItemRef := new(AutomationsUpdateResponseWorkflowItemRef)
	if err := json.Unmarshal(data, &valueAutomationsUpdateResponseWorkflowItemRef); err == nil {
		a.typ = "AutomationsUpdateResponseWorkflowItemRef"
		a.AutomationsUpdateResponseWorkflowItemRef = valueAutomationsUpdateResponseWorkflowItemRef
		return nil
	}
	valueAutomationsUpdateResponseWorkflowItemConditions := new(AutomationsUpdateResponseWorkflowItemConditions)
	if err := json.Unmarshal(data, &valueAutomationsUpdateResponseWorkflowItemConditions); err == nil {
		a.typ = "AutomationsUpdateResponseWorkflowItemConditions"
		a.AutomationsUpdateResponseWorkflowItemConditions = valueAutomationsUpdateResponseWorkflowItemConditions
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AutomationsUpdateResponseWorkflowItem) MarshalJSON() ([]byte, error) {
	if a.typ == "AutomationsUpdateResponseWorkflowItemRef" || a.AutomationsUpdateResponseWorkflowItemRef != nil {
		return json.Marshal(a.AutomationsUpdateResponseWorkflowItemRef)
	}
	if a.typ == "AutomationsUpdateResponseWorkflowItemConditions" || a.AutomationsUpdateResponseWorkflowItemConditions != nil {
		return json.Marshal(a.AutomationsUpdateResponseWorkflowItemConditions)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AutomationsUpdateResponseWorkflowItemVisitor interface {
	VisitAutomationsUpdateResponseWorkflowItemRef(*AutomationsUpdateResponseWorkflowItemRef) error
	VisitAutomationsUpdateResponseWorkflowItemConditions(*AutomationsUpdateResponseWorkflowItemConditions) error
}

func (a *AutomationsUpdateResponseWorkflowItem) Accept(visitor AutomationsUpdateResponseWorkflowItemVisitor) error {
	if a.typ == "AutomationsUpdateResponseWorkflowItemRef" || a.AutomationsUpdateResponseWorkflowItemRef != nil {
		return visitor.VisitAutomationsUpdateResponseWorkflowItemRef(a.AutomationsUpdateResponseWorkflowItemRef)
	}
	if a.typ == "AutomationsUpdateResponseWorkflowItemConditions" || a.AutomationsUpdateResponseWorkflowItemConditions != nil {
		return visitor.VisitAutomationsUpdateResponseWorkflowItemConditions(a.AutomationsUpdateResponseWorkflowItemConditions)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AutomationsUpdateResponseWorkflowItemConditions struct {
	Conditions []*AutomationsUpdateResponseWorkflowItemConditionsConditionsItem `json:"conditions,omitempty" url:"conditions,omitempty"`
	Next       []*AutomationsUpdateResponseWorkflowItemConditionsNextItem       `json:"next,omitempty" url:"next,omitempty"`
	kind       string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsUpdateResponseWorkflowItemConditions) GetConditions() []*AutomationsUpdateResponseWorkflowItemConditionsConditionsItem {
	if a == nil {
		return nil
	}
	return a.Conditions
}

func (a *AutomationsUpdateResponseWorkflowItemConditions) GetNext() []*AutomationsUpdateResponseWorkflowItemConditionsNextItem {
	if a == nil {
		return nil
	}
	return a.Next
}

func (a *AutomationsUpdateResponseWorkflowItemConditions) Kind() string {
	return a.kind
}

func (a *AutomationsUpdateResponseWorkflowItemConditions) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsUpdateResponseWorkflowItemConditions) UnmarshalJSON(data []byte) error {
	type embed AutomationsUpdateResponseWorkflowItemConditions
	var unmarshaler = struct {
		embed
		Kind string `json:"kind"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationsUpdateResponseWorkflowItemConditions(unmarshaler.embed)
	if unmarshaler.Kind != "conditions" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "conditions", unmarshaler.Kind)
	}
	a.kind = unmarshaler.Kind
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "kind")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsUpdateResponseWorkflowItemConditions) MarshalJSON() ([]byte, error) {
	type embed AutomationsUpdateResponseWorkflowItemConditions
	var marshaler = struct {
		embed
		Kind string `json:"kind"`
	}{
		embed: embed(*a),
		Kind:  "conditions",
	}
	return json.Marshal(marshaler)
}

func (a *AutomationsUpdateResponseWorkflowItemConditions) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsUpdateResponseWorkflowItemConditionsConditionsItem struct {
	Prop  *string `json:"prop,omitempty" url:"prop,omitempty"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsUpdateResponseWorkflowItemConditionsConditionsItem) GetProp() *string {
	if a == nil {
		return nil
	}
	return a.Prop
}

func (a *AutomationsUpdateResponseWorkflowItemConditionsConditionsItem) GetValue() *string {
	if a == nil {
		return nil
	}
	return a.Value
}

func (a *AutomationsUpdateResponseWorkflowItemConditionsConditionsItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsUpdateResponseWorkflowItemConditionsConditionsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsUpdateResponseWorkflowItemConditionsConditionsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationsUpdateResponseWorkflowItemConditionsConditionsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsUpdateResponseWorkflowItemConditionsConditionsItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsUpdateResponseWorkflowItemConditionsNextItem struct {
	Kind *string `json:"kind,omitempty" url:"kind,omitempty"`
	Ref  *string `json:"ref,omitempty" url:"ref,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsUpdateResponseWorkflowItemConditionsNextItem) GetKind() *string {
	if a == nil {
		return nil
	}
	return a.Kind
}

func (a *AutomationsUpdateResponseWorkflowItemConditionsNextItem) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationsUpdateResponseWorkflowItemConditionsNextItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsUpdateResponseWorkflowItemConditionsNextItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsUpdateResponseWorkflowItemConditionsNextItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationsUpdateResponseWorkflowItemConditionsNextItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsUpdateResponseWorkflowItemConditionsNextItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsUpdateResponseWorkflowItemRef struct {
	Kind AutomationsUpdateResponseWorkflowItemRefKind        `json:"kind" url:"kind"`
	Ref  *string                                             `json:"ref,omitempty" url:"ref,omitempty"`
	Next []*AutomationsUpdateResponseWorkflowItemRefNextItem `json:"next,omitempty" url:"next,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsUpdateResponseWorkflowItemRef) GetKind() AutomationsUpdateResponseWorkflowItemRefKind {
	if a == nil {
		return ""
	}
	return a.Kind
}

func (a *AutomationsUpdateResponseWorkflowItemRef) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationsUpdateResponseWorkflowItemRef) GetNext() []*AutomationsUpdateResponseWorkflowItemRefNextItem {
	if a == nil {
		return nil
	}
	return a.Next
}

func (a *AutomationsUpdateResponseWorkflowItemRef) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsUpdateResponseWorkflowItemRef) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsUpdateResponseWorkflowItemRef
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationsUpdateResponseWorkflowItemRef(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsUpdateResponseWorkflowItemRef) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsUpdateResponseWorkflowItemRefKind string

const (
	AutomationsUpdateResponseWorkflowItemRefKindVideo       AutomationsUpdateResponseWorkflowItemRefKind = "video"
	AutomationsUpdateResponseWorkflowItemRefKindImage       AutomationsUpdateResponseWorkflowItemRefKind = "image"
	AutomationsUpdateResponseWorkflowItemRefKindAudio       AutomationsUpdateResponseWorkflowItemRefKind = "audio"
	AutomationsUpdateResponseWorkflowItemRefKindChapters    AutomationsUpdateResponseWorkflowItemRefKind = "chapters"
	AutomationsUpdateResponseWorkflowItemRefKindSubtitles   AutomationsUpdateResponseWorkflowItemRefKind = "subtitles"
	AutomationsUpdateResponseWorkflowItemRefKindThumbnails  AutomationsUpdateResponseWorkflowItemRefKind = "thumbnails"
	AutomationsUpdateResponseWorkflowItemRefKindNsfw        AutomationsUpdateResponseWorkflowItemRefKind = "nsfw"
	AutomationsUpdateResponseWorkflowItemRefKindSpeech      AutomationsUpdateResponseWorkflowItemRefKind = "speech"
	AutomationsUpdateResponseWorkflowItemRefKindDescription AutomationsUpdateResponseWorkflowItemRefKind = "description"
	AutomationsUpdateResponseWorkflowItemRefKindOutline     AutomationsUpdateResponseWorkflowItemRefKind = "outline"
	AutomationsUpdateResponseWorkflowItemRefKindPrompt      AutomationsUpdateResponseWorkflowItemRefKind = "prompt"
	AutomationsUpdateResponseWorkflowItemRefKindHTTP        AutomationsUpdateResponseWorkflowItemRefKind = "http"
)

func NewAutomationsUpdateResponseWorkflowItemRefKindFromString(s string) (AutomationsUpdateResponseWorkflowItemRefKind, error) {
	switch s {
	case "video":
		return AutomationsUpdateResponseWorkflowItemRefKindVideo, nil
	case "image":
		return AutomationsUpdateResponseWorkflowItemRefKindImage, nil
	case "audio":
		return AutomationsUpdateResponseWorkflowItemRefKindAudio, nil
	case "chapters":
		return AutomationsUpdateResponseWorkflowItemRefKindChapters, nil
	case "subtitles":
		return AutomationsUpdateResponseWorkflowItemRefKindSubtitles, nil
	case "thumbnails":
		return AutomationsUpdateResponseWorkflowItemRefKindThumbnails, nil
	case "nsfw":
		return AutomationsUpdateResponseWorkflowItemRefKindNsfw, nil
	case "speech":
		return AutomationsUpdateResponseWorkflowItemRefKindSpeech, nil
	case "description":
		return AutomationsUpdateResponseWorkflowItemRefKindDescription, nil
	case "outline":
		return AutomationsUpdateResponseWorkflowItemRefKindOutline, nil
	case "prompt":
		return AutomationsUpdateResponseWorkflowItemRefKindPrompt, nil
	case "http":
		return AutomationsUpdateResponseWorkflowItemRefKindHTTP, nil
	}
	var t AutomationsUpdateResponseWorkflowItemRefKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationsUpdateResponseWorkflowItemRefKind) Ptr() *AutomationsUpdateResponseWorkflowItemRefKind {
	return &a
}

type AutomationsUpdateResponseWorkflowItemRefNextItem struct {
	Kind *string `json:"kind,omitempty" url:"kind,omitempty"`
	Ref  *string `json:"ref,omitempty" url:"ref,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsUpdateResponseWorkflowItemRefNextItem) GetKind() *string {
	if a == nil {
		return nil
	}
	return a.Kind
}

func (a *AutomationsUpdateResponseWorkflowItemRefNextItem) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationsUpdateResponseWorkflowItemRefNextItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsUpdateResponseWorkflowItemRefNextItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsUpdateResponseWorkflowItemRefNextItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationsUpdateResponseWorkflowItemRefNextItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsUpdateResponseWorkflowItemRefNextItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsUpdateRequest struct {
	// Specifies the API Version
	Name          *string                                 `json:"name,omitempty" url:"-"`
	Description   *string                                 `json:"description,omitempty" url:"-"`
	Trigger       *AutomationsUpdateRequestTrigger        `json:"trigger,omitempty" url:"-"`
	Workflow      []*AutomationsUpdateRequestWorkflowItem `json:"workflow,omitempty" url:"-"`
	Status        *AutomationsUpdateRequestStatus         `json:"status,omitempty" url:"-"`
	acceptVersion string
}

func (a *AutomationsUpdateRequest) AcceptVersion() string {
	return a.acceptVersion
}

func (a *AutomationsUpdateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsUpdateRequest
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*a = AutomationsUpdateRequest(body)
	a.acceptVersion = "2025-08-20"
	return nil
}

func (a *AutomationsUpdateRequest) MarshalJSON() ([]byte, error) {
	type embed AutomationsUpdateRequest
	var marshaler = struct {
		embed
		AcceptVersion string `json:"Accept-Version"`
	}{
		embed:         embed(*a),
		AcceptVersion: "2025-08-20",
	}
	return json.Marshal(marshaler)
}
