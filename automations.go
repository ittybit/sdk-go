// This file was auto-generated by Fern from our API Definition.

package ittybit

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/ittybit/sdk-go/internal"
	time "time"
)

type Automation struct {
	// Unique identifier for the automation
	ID string `json:"id" url:"id"`
	// User-defined name for the automation
	Name string `json:"name" url:"name"`
	// Optional description for the automation
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// User-defined key-value metadata for the automation.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	// The event and conditions that trigger this automation.
	Trigger *AutomationTrigger `json:"trigger,omitempty" url:"trigger,omitempty"`
	// The sequence of tasks to be executed when the automation is triggered. The structure of each task object varies depending on its 'kind'.
	Workflow []*WorkflowTaskStep `json:"workflow,omitempty" url:"workflow,omitempty"`
	// Current status of the automation
	Status AutomationStatus `json:"status" url:"status"`
	// Timestamp when the automation was created
	Created time.Time `json:"created" url:"created"`
	// Timestamp when the automation was last updated
	Updated time.Time `json:"updated" url:"updated"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Automation) GetID() string {
	if a == nil {
		return ""
	}
	return a.ID
}

func (a *Automation) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *Automation) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *Automation) GetMetadata() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.Metadata
}

func (a *Automation) GetTrigger() *AutomationTrigger {
	if a == nil {
		return nil
	}
	return a.Trigger
}

func (a *Automation) GetWorkflow() []*WorkflowTaskStep {
	if a == nil {
		return nil
	}
	return a.Workflow
}

func (a *Automation) GetStatus() AutomationStatus {
	if a == nil {
		return ""
	}
	return a.Status
}

func (a *Automation) GetCreated() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.Created
}

func (a *Automation) GetUpdated() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.Updated
}

func (a *Automation) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Automation) UnmarshalJSON(data []byte) error {
	type embed Automation
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = Automation(unmarshaler.embed)
	a.Created = unmarshaler.Created.Time()
	a.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Automation) MarshalJSON() ([]byte, error) {
	type embed Automation
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*a),
		Created: internal.NewDateTime(a.Created),
		Updated: internal.NewDateTime(a.Updated),
	}
	return json.Marshal(marshaler)
}

func (a *Automation) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationListResponse struct {
	Meta  *MetaList     `json:"meta,omitempty" url:"meta,omitempty"`
	Data  []*Automation `json:"data,omitempty" url:"data,omitempty"`
	Links *LinksList    `json:"links,omitempty" url:"links,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationListResponse) GetMeta() *MetaList {
	if a == nil {
		return nil
	}
	return a.Meta
}

func (a *AutomationListResponse) GetData() []*Automation {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AutomationListResponse) GetLinks() *LinksList {
	if a == nil {
		return nil
	}
	return a.Links
}

func (a *AutomationListResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationListResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationListResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationResponse struct {
	Meta  *Meta       `json:"meta,omitempty" url:"meta,omitempty"`
	Data  *Automation `json:"data,omitempty" url:"data,omitempty"`
	Links *Links      `json:"links,omitempty" url:"links,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationResponse) GetMeta() *Meta {
	if a == nil {
		return nil
	}
	return a.Meta
}

func (a *AutomationResponse) GetData() *Automation {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AutomationResponse) GetLinks() *Links {
	if a == nil {
		return nil
	}
	return a.Links
}

func (a *AutomationResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Current status of the automation
type AutomationStatus string

const (
	AutomationStatusActive   AutomationStatus = "active"
	AutomationStatusInactive AutomationStatus = "inactive"
	AutomationStatusDraft    AutomationStatus = "draft"
)

func NewAutomationStatusFromString(s string) (AutomationStatus, error) {
	switch s {
	case "active":
		return AutomationStatusActive, nil
	case "inactive":
		return AutomationStatusInactive, nil
	case "draft":
		return AutomationStatusDraft, nil
	}
	var t AutomationStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationStatus) Ptr() *AutomationStatus {
	return &a
}

// The event and conditions that trigger this automation.
type AutomationTrigger struct {
	// The event that triggers the automation
	Event string `json:"event" url:"event"`
	// Conditions that must be met for the trigger to activate.
	Conditions []*AutomationTriggerConditionsItem `json:"conditions,omitempty" url:"conditions,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationTrigger) GetEvent() string {
	if a == nil {
		return ""
	}
	return a.Event
}

func (a *AutomationTrigger) GetConditions() []*AutomationTriggerConditionsItem {
	if a == nil {
		return nil
	}
	return a.Conditions
}

func (a *AutomationTrigger) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationTrigger) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationTrigger
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationTrigger(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationTrigger) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationTriggerConditionsItem struct {
	// The property to check (e.g., file.type, file.size)
	Prop string `json:"prop" url:"prop"`
	// The value the property must match
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationTriggerConditionsItem) GetProp() string {
	if a == nil {
		return ""
	}
	return a.Prop
}

func (a *AutomationTriggerConditionsItem) GetValue() string {
	if a == nil {
		return ""
	}
	return a.Value
}

func (a *AutomationTriggerConditionsItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationTriggerConditionsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationTriggerConditionsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationTriggerConditionsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationTriggerConditionsItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type WorkflowTaskStep struct {
	// The type of operation the task performs.
	Kind WorkflowTaskStepKind `json:"kind" url:"kind"`
	// Optional label for the output of this step.
	Label *string `json:"label,omitempty" url:"label,omitempty"`
	// Output format (e.g., mp4, jpg)
	Format *string `json:"format,omitempty" url:"format,omitempty"`
	// Output width
	Width *int `json:"width,omitempty" url:"width,omitempty"`
	// Output height
	Height *int `json:"height,omitempty" url:"height,omitempty"`
	// Resize mode
	Resize *string `json:"resize,omitempty" url:"resize,omitempty"`
	// Quality setting
	Quality *int `json:"quality,omitempty" url:"quality,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WorkflowTaskStep) GetKind() WorkflowTaskStepKind {
	if w == nil {
		return ""
	}
	return w.Kind
}

func (w *WorkflowTaskStep) GetLabel() *string {
	if w == nil {
		return nil
	}
	return w.Label
}

func (w *WorkflowTaskStep) GetFormat() *string {
	if w == nil {
		return nil
	}
	return w.Format
}

func (w *WorkflowTaskStep) GetWidth() *int {
	if w == nil {
		return nil
	}
	return w.Width
}

func (w *WorkflowTaskStep) GetHeight() *int {
	if w == nil {
		return nil
	}
	return w.Height
}

func (w *WorkflowTaskStep) GetResize() *string {
	if w == nil {
		return nil
	}
	return w.Resize
}

func (w *WorkflowTaskStep) GetQuality() *int {
	if w == nil {
		return nil
	}
	return w.Quality
}

func (w *WorkflowTaskStep) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowTaskStep) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowTaskStep
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowTaskStep(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowTaskStep) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// The type of operation the task performs.
type WorkflowTaskStepKind string

const (
	WorkflowTaskStepKindIngest     WorkflowTaskStepKind = "ingest"
	WorkflowTaskStepKindWorkflow   WorkflowTaskStepKind = "workflow"
	WorkflowTaskStepKindSpeech     WorkflowTaskStepKind = "speech"
	WorkflowTaskStepKindOutline    WorkflowTaskStepKind = "outline"
	WorkflowTaskStepKindChapters   WorkflowTaskStepKind = "chapters"
	WorkflowTaskStepKindSubtitles  WorkflowTaskStepKind = "subtitles"
	WorkflowTaskStepKindThumbnails WorkflowTaskStepKind = "thumbnails"
	WorkflowTaskStepKindNsfw       WorkflowTaskStepKind = "nsfw"
	WorkflowTaskStepKindSummary    WorkflowTaskStepKind = "summary"
	WorkflowTaskStepKindDescribe   WorkflowTaskStepKind = "describe"
	WorkflowTaskStepKindVideo      WorkflowTaskStepKind = "video"
	WorkflowTaskStepKindImage      WorkflowTaskStepKind = "image"
	WorkflowTaskStepKindAudio      WorkflowTaskStepKind = "audio"
	WorkflowTaskStepKindHTTP       WorkflowTaskStepKind = "http"
	WorkflowTaskStepKindConditions WorkflowTaskStepKind = "conditions"
	WorkflowTaskStepKindStore      WorkflowTaskStepKind = "store"
	WorkflowTaskStepKindPrompt     WorkflowTaskStepKind = "prompt"
	WorkflowTaskStepKindTags       WorkflowTaskStepKind = "tags"
)

func NewWorkflowTaskStepKindFromString(s string) (WorkflowTaskStepKind, error) {
	switch s {
	case "ingest":
		return WorkflowTaskStepKindIngest, nil
	case "workflow":
		return WorkflowTaskStepKindWorkflow, nil
	case "speech":
		return WorkflowTaskStepKindSpeech, nil
	case "outline":
		return WorkflowTaskStepKindOutline, nil
	case "chapters":
		return WorkflowTaskStepKindChapters, nil
	case "subtitles":
		return WorkflowTaskStepKindSubtitles, nil
	case "thumbnails":
		return WorkflowTaskStepKindThumbnails, nil
	case "nsfw":
		return WorkflowTaskStepKindNsfw, nil
	case "summary":
		return WorkflowTaskStepKindSummary, nil
	case "describe":
		return WorkflowTaskStepKindDescribe, nil
	case "video":
		return WorkflowTaskStepKindVideo, nil
	case "image":
		return WorkflowTaskStepKindImage, nil
	case "audio":
		return WorkflowTaskStepKindAudio, nil
	case "http":
		return WorkflowTaskStepKindHTTP, nil
	case "conditions":
		return WorkflowTaskStepKindConditions, nil
	case "store":
		return WorkflowTaskStepKindStore, nil
	case "prompt":
		return WorkflowTaskStepKindPrompt, nil
	case "tags":
		return WorkflowTaskStepKindTags, nil
	}
	var t WorkflowTaskStepKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WorkflowTaskStepKind) Ptr() *WorkflowTaskStepKind {
	return &w
}

// Defines the trigger event and conditions. To clear/remove a trigger, provide null. To update, provide the new trigger object.
type AutomationsUpdateRequestTrigger struct {
	// The event that triggers the automation
	Event *string `json:"event,omitempty" url:"event,omitempty"`
	// Conditions that must be met for the trigger to activate.
	Conditions []*AutomationsUpdateRequestTriggerConditionsItem `json:"conditions,omitempty" url:"conditions,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsUpdateRequestTrigger) GetEvent() *string {
	if a == nil {
		return nil
	}
	return a.Event
}

func (a *AutomationsUpdateRequestTrigger) GetConditions() []*AutomationsUpdateRequestTriggerConditionsItem {
	if a == nil {
		return nil
	}
	return a.Conditions
}

func (a *AutomationsUpdateRequestTrigger) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsUpdateRequestTrigger) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsUpdateRequestTrigger
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationsUpdateRequestTrigger(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsUpdateRequestTrigger) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsUpdateRequestTriggerConditionsItem struct {
	Prop  string `json:"prop" url:"prop"`
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsUpdateRequestTriggerConditionsItem) GetProp() string {
	if a == nil {
		return ""
	}
	return a.Prop
}

func (a *AutomationsUpdateRequestTriggerConditionsItem) GetValue() string {
	if a == nil {
		return ""
	}
	return a.Value
}

func (a *AutomationsUpdateRequestTriggerConditionsItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsUpdateRequestTriggerConditionsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationsUpdateRequestTriggerConditionsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationsUpdateRequestTriggerConditionsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsUpdateRequestTriggerConditionsItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsUpdateRequest struct {
	Name        string  `json:"name" url:"-"`
	Description *string `json:"description,omitempty" url:"-"`
	// Defines the trigger event and conditions. To clear/remove a trigger, provide null. To update, provide the new trigger object.
	Trigger *AutomationsUpdateRequestTrigger `json:"trigger,omitempty" url:"-"`
	// The updated sequence of tasks for the automation.
	Workflow []*WorkflowTaskStep `json:"workflow,omitempty" url:"-"`
}
