// This file was auto-generated by Fern from our API Definition.

package ittybit

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/ittybit/sdk-go/internal"
	time "time"
)

type AutomationsCreateRequest struct {
	Name        *string                          `json:"name,omitempty" url:"-"`
	Description *string                          `json:"description,omitempty" url:"-"`
	Trigger     *AutomationsCreateRequestTrigger `json:"trigger,omitempty" url:"-"`
	Workflow    []*WorkflowTaskStep              `json:"workflow,omitempty" url:"-"`
	Status      *AutomationsCreateRequestStatus  `json:"status,omitempty" url:"-"`
}

type AutomationsListRequest struct {
	Limit *int `json:"-" url:"limit,omitempty"`
}

type Automation struct {
	ID          string              `json:"id" url:"id"`
	Name        *string             `json:"name,omitempty" url:"name,omitempty"`
	Description *string             `json:"description,omitempty" url:"description,omitempty"`
	Trigger     *AutomationTrigger  `json:"trigger,omitempty" url:"trigger,omitempty"`
	Workflow    []*WorkflowTaskStep `json:"workflow,omitempty" url:"workflow,omitempty"`
	Status      AutomationStatus    `json:"status" url:"status"`
	Created     time.Time           `json:"created" url:"created"`
	Updated     time.Time           `json:"updated" url:"updated"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Automation) GetID() string {
	if a == nil {
		return ""
	}
	return a.ID
}

func (a *Automation) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *Automation) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *Automation) GetTrigger() *AutomationTrigger {
	if a == nil {
		return nil
	}
	return a.Trigger
}

func (a *Automation) GetWorkflow() []*WorkflowTaskStep {
	if a == nil {
		return nil
	}
	return a.Workflow
}

func (a *Automation) GetStatus() AutomationStatus {
	if a == nil {
		return ""
	}
	return a.Status
}

func (a *Automation) GetCreated() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.Created
}

func (a *Automation) GetUpdated() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.Updated
}

func (a *Automation) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Automation) UnmarshalJSON(data []byte) error {
	type embed Automation
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = Automation(unmarshaler.embed)
	a.Created = unmarshaler.Created.Time()
	a.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Automation) MarshalJSON() ([]byte, error) {
	type embed Automation
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*a),
		Created: internal.NewDateTime(a.Created),
		Updated: internal.NewDateTime(a.Updated),
	}
	return json.Marshal(marshaler)
}

func (a *Automation) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationListResponse struct {
	Meta  *MetaList     `json:"meta,omitempty" url:"meta,omitempty"`
	Data  []*Automation `json:"data,omitempty" url:"data,omitempty"`
	Error *Error        `json:"error,omitempty" url:"error,omitempty"`
	Links *LinksList    `json:"links,omitempty" url:"links,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationListResponse) GetMeta() *MetaList {
	if a == nil {
		return nil
	}
	return a.Meta
}

func (a *AutomationListResponse) GetData() []*Automation {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AutomationListResponse) GetError() *Error {
	if a == nil {
		return nil
	}
	return a.Error
}

func (a *AutomationListResponse) GetLinks() *LinksList {
	if a == nil {
		return nil
	}
	return a.Links
}

func (a *AutomationListResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationListResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationListResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationResponse struct {
	Meta  *Meta       `json:"meta,omitempty" url:"meta,omitempty"`
	Data  *Automation `json:"data,omitempty" url:"data,omitempty"`
	Error *Error      `json:"error,omitempty" url:"error,omitempty"`
	Links *Links      `json:"links,omitempty" url:"links,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationResponse) GetMeta() *Meta {
	if a == nil {
		return nil
	}
	return a.Meta
}

func (a *AutomationResponse) GetData() *Automation {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AutomationResponse) GetError() *Error {
	if a == nil {
		return nil
	}
	return a.Error
}

func (a *AutomationResponse) GetLinks() *Links {
	if a == nil {
		return nil
	}
	return a.Links
}

func (a *AutomationResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationStatus string

const (
	AutomationStatusActive AutomationStatus = "active"
	AutomationStatusPaused AutomationStatus = "paused"
)

func NewAutomationStatusFromString(s string) (AutomationStatus, error) {
	switch s {
	case "active":
		return AutomationStatusActive, nil
	case "paused":
		return AutomationStatusPaused, nil
	}
	var t AutomationStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationStatus) Ptr() *AutomationStatus {
	return &a
}

type AutomationTrigger struct {
	kind  string
	event string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationTrigger) Kind() string {
	return a.kind
}

func (a *AutomationTrigger) Event() string {
	return a.event
}

func (a *AutomationTrigger) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationTrigger) UnmarshalJSON(data []byte) error {
	type embed AutomationTrigger
	var unmarshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationTrigger(unmarshaler.embed)
	if unmarshaler.Kind != "event" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "event", unmarshaler.Kind)
	}
	a.kind = unmarshaler.Kind
	if unmarshaler.Event != "media.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "media.created", unmarshaler.Event)
	}
	a.event = unmarshaler.Event
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "kind", "event")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationTrigger) MarshalJSON() ([]byte, error) {
	type embed AutomationTrigger
	var marshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
		Kind:  "event",
		Event: "media.created",
	}
	return json.Marshal(marshaler)
}

func (a *AutomationTrigger) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type WorkflowTaskStep struct {
	Kind WorkflowTaskStepKind        `json:"kind" url:"kind"`
	Ref  *string                     `json:"ref,omitempty" url:"ref,omitempty"`
	Next []*WorkflowTaskStepNextItem `json:"next,omitempty" url:"next,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WorkflowTaskStep) GetKind() WorkflowTaskStepKind {
	if w == nil {
		return ""
	}
	return w.Kind
}

func (w *WorkflowTaskStep) GetRef() *string {
	if w == nil {
		return nil
	}
	return w.Ref
}

func (w *WorkflowTaskStep) GetNext() []*WorkflowTaskStepNextItem {
	if w == nil {
		return nil
	}
	return w.Next
}

func (w *WorkflowTaskStep) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowTaskStep) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowTaskStep
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowTaskStep(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowTaskStep) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowTaskStepKind string

const (
	WorkflowTaskStepKindVideo       WorkflowTaskStepKind = "video"
	WorkflowTaskStepKindImage       WorkflowTaskStepKind = "image"
	WorkflowTaskStepKindAudio       WorkflowTaskStepKind = "audio"
	WorkflowTaskStepKindChapters    WorkflowTaskStepKind = "chapters"
	WorkflowTaskStepKindSubtitles   WorkflowTaskStepKind = "subtitles"
	WorkflowTaskStepKindThumbnails  WorkflowTaskStepKind = "thumbnails"
	WorkflowTaskStepKindNsfw        WorkflowTaskStepKind = "nsfw"
	WorkflowTaskStepKindSpeech      WorkflowTaskStepKind = "speech"
	WorkflowTaskStepKindDescription WorkflowTaskStepKind = "description"
	WorkflowTaskStepKindOutline     WorkflowTaskStepKind = "outline"
	WorkflowTaskStepKindPrompt      WorkflowTaskStepKind = "prompt"
	WorkflowTaskStepKindConditions  WorkflowTaskStepKind = "conditions"
	WorkflowTaskStepKindHTTP        WorkflowTaskStepKind = "http"
)

func NewWorkflowTaskStepKindFromString(s string) (WorkflowTaskStepKind, error) {
	switch s {
	case "video":
		return WorkflowTaskStepKindVideo, nil
	case "image":
		return WorkflowTaskStepKindImage, nil
	case "audio":
		return WorkflowTaskStepKindAudio, nil
	case "chapters":
		return WorkflowTaskStepKindChapters, nil
	case "subtitles":
		return WorkflowTaskStepKindSubtitles, nil
	case "thumbnails":
		return WorkflowTaskStepKindThumbnails, nil
	case "nsfw":
		return WorkflowTaskStepKindNsfw, nil
	case "speech":
		return WorkflowTaskStepKindSpeech, nil
	case "description":
		return WorkflowTaskStepKindDescription, nil
	case "outline":
		return WorkflowTaskStepKindOutline, nil
	case "prompt":
		return WorkflowTaskStepKindPrompt, nil
	case "conditions":
		return WorkflowTaskStepKindConditions, nil
	case "http":
		return WorkflowTaskStepKindHTTP, nil
	}
	var t WorkflowTaskStepKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WorkflowTaskStepKind) Ptr() *WorkflowTaskStepKind {
	return &w
}

type WorkflowTaskStepNextItem struct {
	Kind *string `json:"kind,omitempty" url:"kind,omitempty"`
	Ref  *string `json:"ref,omitempty" url:"ref,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WorkflowTaskStepNextItem) GetKind() *string {
	if w == nil {
		return nil
	}
	return w.Kind
}

func (w *WorkflowTaskStepNextItem) GetRef() *string {
	if w == nil {
		return nil
	}
	return w.Ref
}

func (w *WorkflowTaskStepNextItem) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowTaskStepNextItem) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowTaskStepNextItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowTaskStepNextItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowTaskStepNextItem) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type AutomationsCreateRequestStatus string

const (
	AutomationsCreateRequestStatusActive AutomationsCreateRequestStatus = "active"
	AutomationsCreateRequestStatusPaused AutomationsCreateRequestStatus = "paused"
)

func NewAutomationsCreateRequestStatusFromString(s string) (AutomationsCreateRequestStatus, error) {
	switch s {
	case "active":
		return AutomationsCreateRequestStatusActive, nil
	case "paused":
		return AutomationsCreateRequestStatusPaused, nil
	}
	var t AutomationsCreateRequestStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationsCreateRequestStatus) Ptr() *AutomationsCreateRequestStatus {
	return &a
}

type AutomationsCreateRequestTrigger struct {
	kind  string
	event string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsCreateRequestTrigger) Kind() string {
	return a.kind
}

func (a *AutomationsCreateRequestTrigger) Event() string {
	return a.event
}

func (a *AutomationsCreateRequestTrigger) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsCreateRequestTrigger) UnmarshalJSON(data []byte) error {
	type embed AutomationsCreateRequestTrigger
	var unmarshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationsCreateRequestTrigger(unmarshaler.embed)
	if unmarshaler.Kind != "event" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "event", unmarshaler.Kind)
	}
	a.kind = unmarshaler.Kind
	if unmarshaler.Event != "media.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "media.created", unmarshaler.Event)
	}
	a.event = unmarshaler.Event
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "kind", "event")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsCreateRequestTrigger) MarshalJSON() ([]byte, error) {
	type embed AutomationsCreateRequestTrigger
	var marshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
		Kind:  "event",
		Event: "media.created",
	}
	return json.Marshal(marshaler)
}

func (a *AutomationsCreateRequestTrigger) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsUpdateRequestStatus string

const (
	AutomationsUpdateRequestStatusActive AutomationsUpdateRequestStatus = "active"
	AutomationsUpdateRequestStatusPaused AutomationsUpdateRequestStatus = "paused"
)

func NewAutomationsUpdateRequestStatusFromString(s string) (AutomationsUpdateRequestStatus, error) {
	switch s {
	case "active":
		return AutomationsUpdateRequestStatusActive, nil
	case "paused":
		return AutomationsUpdateRequestStatusPaused, nil
	}
	var t AutomationsUpdateRequestStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationsUpdateRequestStatus) Ptr() *AutomationsUpdateRequestStatus {
	return &a
}

type AutomationsUpdateRequestTrigger struct {
	kind  string
	event string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationsUpdateRequestTrigger) Kind() string {
	return a.kind
}

func (a *AutomationsUpdateRequestTrigger) Event() string {
	return a.event
}

func (a *AutomationsUpdateRequestTrigger) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationsUpdateRequestTrigger) UnmarshalJSON(data []byte) error {
	type embed AutomationsUpdateRequestTrigger
	var unmarshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationsUpdateRequestTrigger(unmarshaler.embed)
	if unmarshaler.Kind != "event" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "event", unmarshaler.Kind)
	}
	a.kind = unmarshaler.Kind
	if unmarshaler.Event != "media.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "media.created", unmarshaler.Event)
	}
	a.event = unmarshaler.Event
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "kind", "event")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationsUpdateRequestTrigger) MarshalJSON() ([]byte, error) {
	type embed AutomationsUpdateRequestTrigger
	var marshaler = struct {
		embed
		Kind  string `json:"kind"`
		Event string `json:"event"`
	}{
		embed: embed(*a),
		Kind:  "event",
		Event: "media.created",
	}
	return json.Marshal(marshaler)
}

func (a *AutomationsUpdateRequestTrigger) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationsUpdateRequest struct {
	Name        *string                          `json:"name,omitempty" url:"-"`
	Description *string                          `json:"description,omitempty" url:"-"`
	Trigger     *AutomationsUpdateRequestTrigger `json:"trigger,omitempty" url:"-"`
	Workflow    []*WorkflowTaskStep              `json:"workflow,omitempty" url:"-"`
	Status      *AutomationsUpdateRequestStatus  `json:"status,omitempty" url:"-"`
}
