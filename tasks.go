// This file was auto-generated by Fern from our API Definition.

package ittybit

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/ittybit/sdk-go/internal"
	time "time"
)

type TasksCreateRequest struct {
	// The type of task to create.
	Kind TasksCreateRequestKind `json:"kind" url:"-"`
	// URL of the source file (required for 'ingest' kind unless file_id is used, can be used for others).
	URL *string `json:"url,omitempty" url:"-"`
	// Task-specific input parameters depending on the kind of task.
	Input map[string]interface{} `json:"input,omitempty" url:"-"`
	// ID of an existing file to use as input (alternative to url).
	FileID *string `json:"file_id,omitempty" url:"-"`
	// An array of task definition objects for a workflow.
	Workflow []map[string]interface{} `json:"workflow,omitempty" url:"-"`
	// An optional HTTPS URL to send a webhook notification to upon task completion or failure.
	WebhookURL *string `json:"webhook_url,omitempty" url:"-"`
	// Desired filename for the output (if applicable).
	Filename *string `json:"filename,omitempty" url:"-"`
	// Desired output folder (if applicable).
	Folder *string `json:"folder,omitempty" url:"-"`
	// Output format (e.g., for video/image tasks).
	Format *string `json:"format,omitempty" url:"-"`
	// Output width (for video/image tasks).
	Width *int `json:"width,omitempty" url:"-"`
	// Output height (for video/image tasks).
	Height *int `json:"height,omitempty" url:"-"`
	// Output quality setting (e.g., for video/image tasks, 0-100).
	Quality *int `json:"quality,omitempty" url:"-"`
}

type TasksListRequest struct {
	// Items per page.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Filter by task status.
	Status *TasksListRequestStatus `json:"-" url:"status,omitempty"`
	// Filter by task kind.
	Kind *TasksListRequestKind `json:"-" url:"kind,omitempty"`
}

type Task struct {
	// Unique identifier for the task.
	ID string `json:"id" url:"id"`
	// Object type, always 'task'.
	Object string `json:"object" url:"object"`
	// The type of operation the task performs.
	Kind TaskKind `json:"kind,omitempty" url:"kind,omitempty"`
	// The input source for the task (e.g., details of a file). Structure varies based on the task kind and preceding steps.
	Input map[string]interface{} `json:"input,omitempty" url:"input,omitempty"`
	// Configuration options specific to the task kind.
	Options map[string]interface{} `json:"options,omitempty" url:"options,omitempty"`
	// The result generated by the task (e.g., details of an output file or intelligence data). Structure varies.
	Output map[string]interface{} `json:"output,omitempty" url:"output,omitempty"`
	// Current status of the task.
	Status TaskStatus `json:"status" url:"status"`
	// Task progress percentage.
	Progress *int `json:"progress,omitempty" url:"progress,omitempty"`
	// Error message if the task failed.
	Error *string `json:"error,omitempty" url:"error,omitempty"`
	// ID of the entity that created the task (e.g., user ID, automation ID).
	CreatedBy *string `json:"created_by,omitempty" url:"created_by,omitempty"`
	// Timestamp when the task was created.
	Created time.Time `json:"created" url:"created"`
	// Timestamp when the task was last updated.
	Updated time.Time `json:"updated" url:"updated"`
	// ID of the parent task if this is part of a workflow.
	ParentID *string `json:"parent_id,omitempty" url:"parent_id,omitempty"`
	// Array of nested task objects representing the steps within this workflow task.
	Workflow []*Task `json:"workflow,omitempty" url:"workflow,omitempty"`
	// Array representing subsequent tasks (e.g., in an automation). Structure may vary.
	Next    []*Task      `json:"next,omitempty" url:"next,omitempty"`
	Results *TaskResults `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *Task) GetID() string {
	if t == nil {
		return ""
	}
	return t.ID
}

func (t *Task) GetObject() string {
	if t == nil {
		return ""
	}
	return t.Object
}

func (t *Task) GetKind() TaskKind {
	if t == nil {
		return nil
	}
	return t.Kind
}

func (t *Task) GetInput() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Input
}

func (t *Task) GetOptions() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Options
}

func (t *Task) GetOutput() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Output
}

func (t *Task) GetStatus() TaskStatus {
	if t == nil {
		return ""
	}
	return t.Status
}

func (t *Task) GetProgress() *int {
	if t == nil {
		return nil
	}
	return t.Progress
}

func (t *Task) GetError() *string {
	if t == nil {
		return nil
	}
	return t.Error
}

func (t *Task) GetCreatedBy() *string {
	if t == nil {
		return nil
	}
	return t.CreatedBy
}

func (t *Task) GetCreated() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.Created
}

func (t *Task) GetUpdated() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.Updated
}

func (t *Task) GetParentID() *string {
	if t == nil {
		return nil
	}
	return t.ParentID
}

func (t *Task) GetWorkflow() []*Task {
	if t == nil {
		return nil
	}
	return t.Workflow
}

func (t *Task) GetNext() []*Task {
	if t == nil {
		return nil
	}
	return t.Next
}

func (t *Task) GetResults() *TaskResults {
	if t == nil {
		return nil
	}
	return t.Results
}

func (t *Task) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *Task) UnmarshalJSON(data []byte) error {
	type embed Task
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = Task(unmarshaler.embed)
	t.Created = unmarshaler.Created.Time()
	t.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *Task) MarshalJSON() ([]byte, error) {
	type embed Task
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*t),
		Created: internal.NewDateTime(t.Created),
		Updated: internal.NewDateTime(t.Updated),
	}
	return json.Marshal(marshaler)
}

func (t *Task) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TaskKind = interface{}

type TaskListResponse struct {
	Meta  *MetaList  `json:"meta,omitempty" url:"meta,omitempty"`
	Data  []*Task    `json:"data,omitempty" url:"data,omitempty"`
	Links *LinksList `json:"links,omitempty" url:"links,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TaskListResponse) GetMeta() *MetaList {
	if t == nil {
		return nil
	}
	return t.Meta
}

func (t *TaskListResponse) GetData() []*Task {
	if t == nil {
		return nil
	}
	return t.Data
}

func (t *TaskListResponse) GetLinks() *LinksList {
	if t == nil {
		return nil
	}
	return t.Links
}

func (t *TaskListResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TaskListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TaskListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TaskListResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TaskListResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TaskResponse struct {
	Meta  *Meta  `json:"meta,omitempty" url:"meta,omitempty"`
	Data  *Task  `json:"data,omitempty" url:"data,omitempty"`
	Links *Links `json:"links,omitempty" url:"links,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TaskResponse) GetMeta() *Meta {
	if t == nil {
		return nil
	}
	return t.Meta
}

func (t *TaskResponse) GetData() *Task {
	if t == nil {
		return nil
	}
	return t.Data
}

func (t *TaskResponse) GetLinks() *Links {
	if t == nil {
		return nil
	}
	return t.Links
}

func (t *TaskResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TaskResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TaskResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TaskResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TaskResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TaskResults struct {
	Passed   []map[string]interface{} `json:"passed,omitempty" url:"passed,omitempty"`
	Failed   []map[string]interface{} `json:"failed,omitempty" url:"failed,omitempty"`
	Continue *bool                    `json:"continue,omitempty" url:"continue,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TaskResults) GetPassed() []map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Passed
}

func (t *TaskResults) GetFailed() []map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Failed
}

func (t *TaskResults) GetContinue() *bool {
	if t == nil {
		return nil
	}
	return t.Continue
}

func (t *TaskResults) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TaskResults) UnmarshalJSON(data []byte) error {
	type unmarshaler TaskResults
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TaskResults(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TaskResults) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Current status of the task.
type TaskStatus string

const (
	TaskStatusPending    TaskStatus = "pending"
	TaskStatusWaiting    TaskStatus = "waiting"
	TaskStatusProcessing TaskStatus = "processing"
	TaskStatusReady      TaskStatus = "ready"
	TaskStatusCompleted  TaskStatus = "completed"
	TaskStatusFailed     TaskStatus = "failed"
	TaskStatusError      TaskStatus = "error"
	TaskStatusCancelled  TaskStatus = "cancelled"
)

func NewTaskStatusFromString(s string) (TaskStatus, error) {
	switch s {
	case "pending":
		return TaskStatusPending, nil
	case "waiting":
		return TaskStatusWaiting, nil
	case "processing":
		return TaskStatusProcessing, nil
	case "ready":
		return TaskStatusReady, nil
	case "completed":
		return TaskStatusCompleted, nil
	case "failed":
		return TaskStatusFailed, nil
	case "error":
		return TaskStatusError, nil
	case "cancelled":
		return TaskStatusCancelled, nil
	}
	var t TaskStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TaskStatus) Ptr() *TaskStatus {
	return &t
}

// The type of task to create.
type TasksCreateRequestKind string

const (
	TasksCreateRequestKindIngest     TasksCreateRequestKind = "ingest"
	TasksCreateRequestKindWorkflow   TasksCreateRequestKind = "workflow"
	TasksCreateRequestKindSpeech     TasksCreateRequestKind = "speech"
	TasksCreateRequestKindVideo      TasksCreateRequestKind = "video"
	TasksCreateRequestKindImage      TasksCreateRequestKind = "image"
	TasksCreateRequestKindAudio      TasksCreateRequestKind = "audio"
	TasksCreateRequestKindSummary    TasksCreateRequestKind = "summary"
	TasksCreateRequestKindDescribe   TasksCreateRequestKind = "describe"
	TasksCreateRequestKindChapters   TasksCreateRequestKind = "chapters"
	TasksCreateRequestKindOutline    TasksCreateRequestKind = "outline"
	TasksCreateRequestKindSubtitles  TasksCreateRequestKind = "subtitles"
	TasksCreateRequestKindNsfw       TasksCreateRequestKind = "nsfw"
	TasksCreateRequestKindThumbnails TasksCreateRequestKind = "thumbnails"
)

func NewTasksCreateRequestKindFromString(s string) (TasksCreateRequestKind, error) {
	switch s {
	case "ingest":
		return TasksCreateRequestKindIngest, nil
	case "workflow":
		return TasksCreateRequestKindWorkflow, nil
	case "speech":
		return TasksCreateRequestKindSpeech, nil
	case "video":
		return TasksCreateRequestKindVideo, nil
	case "image":
		return TasksCreateRequestKindImage, nil
	case "audio":
		return TasksCreateRequestKindAudio, nil
	case "summary":
		return TasksCreateRequestKindSummary, nil
	case "describe":
		return TasksCreateRequestKindDescribe, nil
	case "chapters":
		return TasksCreateRequestKindChapters, nil
	case "outline":
		return TasksCreateRequestKindOutline, nil
	case "subtitles":
		return TasksCreateRequestKindSubtitles, nil
	case "nsfw":
		return TasksCreateRequestKindNsfw, nil
	case "thumbnails":
		return TasksCreateRequestKindThumbnails, nil
	}
	var t TasksCreateRequestKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TasksCreateRequestKind) Ptr() *TasksCreateRequestKind {
	return &t
}

type TasksListRequestKind string

const (
	TasksListRequestKindIngest     TasksListRequestKind = "ingest"
	TasksListRequestKindWorkflow   TasksListRequestKind = "workflow"
	TasksListRequestKindSpeech     TasksListRequestKind = "speech"
	TasksListRequestKindOutline    TasksListRequestKind = "outline"
	TasksListRequestKindChapters   TasksListRequestKind = "chapters"
	TasksListRequestKindSubtitles  TasksListRequestKind = "subtitles"
	TasksListRequestKindThumbnails TasksListRequestKind = "thumbnails"
	TasksListRequestKindNsfw       TasksListRequestKind = "nsfw"
	TasksListRequestKindSummary    TasksListRequestKind = "summary"
	TasksListRequestKindDescribe   TasksListRequestKind = "describe"
	TasksListRequestKindVideo      TasksListRequestKind = "video"
	TasksListRequestKindImage      TasksListRequestKind = "image"
	TasksListRequestKindAudio      TasksListRequestKind = "audio"
	TasksListRequestKindHTTP       TasksListRequestKind = "http"
	TasksListRequestKindConditions TasksListRequestKind = "conditions"
	TasksListRequestKindStore      TasksListRequestKind = "store"
	TasksListRequestKindPrompt     TasksListRequestKind = "prompt"
	TasksListRequestKindTags       TasksListRequestKind = "tags"
)

func NewTasksListRequestKindFromString(s string) (TasksListRequestKind, error) {
	switch s {
	case "ingest":
		return TasksListRequestKindIngest, nil
	case "workflow":
		return TasksListRequestKindWorkflow, nil
	case "speech":
		return TasksListRequestKindSpeech, nil
	case "outline":
		return TasksListRequestKindOutline, nil
	case "chapters":
		return TasksListRequestKindChapters, nil
	case "subtitles":
		return TasksListRequestKindSubtitles, nil
	case "thumbnails":
		return TasksListRequestKindThumbnails, nil
	case "nsfw":
		return TasksListRequestKindNsfw, nil
	case "summary":
		return TasksListRequestKindSummary, nil
	case "describe":
		return TasksListRequestKindDescribe, nil
	case "video":
		return TasksListRequestKindVideo, nil
	case "image":
		return TasksListRequestKindImage, nil
	case "audio":
		return TasksListRequestKindAudio, nil
	case "http":
		return TasksListRequestKindHTTP, nil
	case "conditions":
		return TasksListRequestKindConditions, nil
	case "store":
		return TasksListRequestKindStore, nil
	case "prompt":
		return TasksListRequestKindPrompt, nil
	case "tags":
		return TasksListRequestKindTags, nil
	}
	var t TasksListRequestKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TasksListRequestKind) Ptr() *TasksListRequestKind {
	return &t
}

type TasksListRequestStatus string

const (
	TasksListRequestStatusPending    TasksListRequestStatus = "pending"
	TasksListRequestStatusWaiting    TasksListRequestStatus = "waiting"
	TasksListRequestStatusProcessing TasksListRequestStatus = "processing"
	TasksListRequestStatusReady      TasksListRequestStatus = "ready"
	TasksListRequestStatusCompleted  TasksListRequestStatus = "completed"
	TasksListRequestStatusFailed     TasksListRequestStatus = "failed"
	TasksListRequestStatusError      TasksListRequestStatus = "error"
	TasksListRequestStatusCancelled  TasksListRequestStatus = "cancelled"
)

func NewTasksListRequestStatusFromString(s string) (TasksListRequestStatus, error) {
	switch s {
	case "pending":
		return TasksListRequestStatusPending, nil
	case "waiting":
		return TasksListRequestStatusWaiting, nil
	case "processing":
		return TasksListRequestStatusProcessing, nil
	case "ready":
		return TasksListRequestStatusReady, nil
	case "completed":
		return TasksListRequestStatusCompleted, nil
	case "failed":
		return TasksListRequestStatusFailed, nil
	case "error":
		return TasksListRequestStatusError, nil
	case "cancelled":
		return TasksListRequestStatusCancelled, nil
	}
	var t TasksListRequestStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TasksListRequestStatus) Ptr() *TasksListRequestStatus {
	return &t
}
