// This file was auto-generated by Fern from our API Definition.

package ittybit

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/ittybit/sdk-go/internal"
	time "time"
)

type TasksListRequest struct {
	Page  *int `json:"-" url:"page,omitempty"`
	Limit *int `json:"-" url:"limit,omitempty"`
}

type Task struct {
	ID        string                 `json:"id" url:"id"`
	Object    string                 `json:"object" url:"object"`
	Kind      TaskKind               `json:"kind,omitempty" url:"kind,omitempty"`
	Input     map[string]interface{} `json:"input,omitempty" url:"input,omitempty"`
	Options   map[string]interface{} `json:"options,omitempty" url:"options,omitempty"`
	Output    map[string]interface{} `json:"output,omitempty" url:"output,omitempty"`
	Status    TaskStatus             `json:"status" url:"status"`
	Progress  *int                   `json:"progress,omitempty" url:"progress,omitempty"`
	Error     *string                `json:"error,omitempty" url:"error,omitempty"`
	CreatedBy *string                `json:"created_by,omitempty" url:"created_by,omitempty"`
	Created   time.Time              `json:"created" url:"created"`
	Updated   time.Time              `json:"updated" url:"updated"`
	ParentID  *string                `json:"parent_id,omitempty" url:"parent_id,omitempty"`
	Workflow  []interface{}          `json:"workflow,omitempty" url:"workflow,omitempty"`
	Results   *TaskResults           `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *Task) GetID() string {
	if t == nil {
		return ""
	}
	return t.ID
}

func (t *Task) GetObject() string {
	if t == nil {
		return ""
	}
	return t.Object
}

func (t *Task) GetKind() TaskKind {
	if t == nil {
		return nil
	}
	return t.Kind
}

func (t *Task) GetInput() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Input
}

func (t *Task) GetOptions() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Options
}

func (t *Task) GetOutput() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Output
}

func (t *Task) GetStatus() TaskStatus {
	if t == nil {
		return ""
	}
	return t.Status
}

func (t *Task) GetProgress() *int {
	if t == nil {
		return nil
	}
	return t.Progress
}

func (t *Task) GetError() *string {
	if t == nil {
		return nil
	}
	return t.Error
}

func (t *Task) GetCreatedBy() *string {
	if t == nil {
		return nil
	}
	return t.CreatedBy
}

func (t *Task) GetCreated() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.Created
}

func (t *Task) GetUpdated() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.Updated
}

func (t *Task) GetParentID() *string {
	if t == nil {
		return nil
	}
	return t.ParentID
}

func (t *Task) GetWorkflow() []interface{} {
	if t == nil {
		return nil
	}
	return t.Workflow
}

func (t *Task) GetResults() *TaskResults {
	if t == nil {
		return nil
	}
	return t.Results
}

func (t *Task) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *Task) UnmarshalJSON(data []byte) error {
	type embed Task
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = Task(unmarshaler.embed)
	t.Created = unmarshaler.Created.Time()
	t.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *Task) MarshalJSON() ([]byte, error) {
	type embed Task
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*t),
		Created: internal.NewDateTime(t.Created),
		Updated: internal.NewDateTime(t.Updated),
	}
	return json.Marshal(marshaler)
}

func (t *Task) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TaskKind = interface{}

type TaskListResponse struct {
	Meta  *MetaList  `json:"meta,omitempty" url:"meta,omitempty"`
	Data  []*Task    `json:"data,omitempty" url:"data,omitempty"`
	Error *Error     `json:"error,omitempty" url:"error,omitempty"`
	Links *LinksList `json:"links,omitempty" url:"links,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TaskListResponse) GetMeta() *MetaList {
	if t == nil {
		return nil
	}
	return t.Meta
}

func (t *TaskListResponse) GetData() []*Task {
	if t == nil {
		return nil
	}
	return t.Data
}

func (t *TaskListResponse) GetError() *Error {
	if t == nil {
		return nil
	}
	return t.Error
}

func (t *TaskListResponse) GetLinks() *LinksList {
	if t == nil {
		return nil
	}
	return t.Links
}

func (t *TaskListResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TaskListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TaskListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TaskListResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TaskListResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TaskResponse struct {
	Meta  *Meta  `json:"meta,omitempty" url:"meta,omitempty"`
	Data  *Task  `json:"data,omitempty" url:"data,omitempty"`
	Error *Error `json:"error,omitempty" url:"error,omitempty"`
	Links *Links `json:"links,omitempty" url:"links,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TaskResponse) GetMeta() *Meta {
	if t == nil {
		return nil
	}
	return t.Meta
}

func (t *TaskResponse) GetData() *Task {
	if t == nil {
		return nil
	}
	return t.Data
}

func (t *TaskResponse) GetError() *Error {
	if t == nil {
		return nil
	}
	return t.Error
}

func (t *TaskResponse) GetLinks() *Links {
	if t == nil {
		return nil
	}
	return t.Links
}

func (t *TaskResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TaskResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TaskResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TaskResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TaskResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TaskResults struct {
	Passed   []map[string]interface{} `json:"passed,omitempty" url:"passed,omitempty"`
	Failed   []map[string]interface{} `json:"failed,omitempty" url:"failed,omitempty"`
	Continue *bool                    `json:"continue,omitempty" url:"continue,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TaskResults) GetPassed() []map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Passed
}

func (t *TaskResults) GetFailed() []map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Failed
}

func (t *TaskResults) GetContinue() *bool {
	if t == nil {
		return nil
	}
	return t.Continue
}

func (t *TaskResults) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TaskResults) UnmarshalJSON(data []byte) error {
	type unmarshaler TaskResults
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TaskResults(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TaskResults) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TaskStatus string

const (
	TaskStatusPending    TaskStatus = "pending"
	TaskStatusWaiting    TaskStatus = "waiting"
	TaskStatusProcessing TaskStatus = "processing"
	TaskStatusReady      TaskStatus = "ready"
	TaskStatusCompleted  TaskStatus = "completed"
	TaskStatusFailed     TaskStatus = "failed"
	TaskStatusError      TaskStatus = "error"
	TaskStatusCancelled  TaskStatus = "cancelled"
)

func NewTaskStatusFromString(s string) (TaskStatus, error) {
	switch s {
	case "pending":
		return TaskStatusPending, nil
	case "waiting":
		return TaskStatusWaiting, nil
	case "processing":
		return TaskStatusProcessing, nil
	case "ready":
		return TaskStatusReady, nil
	case "completed":
		return TaskStatusCompleted, nil
	case "failed":
		return TaskStatusFailed, nil
	case "error":
		return TaskStatusError, nil
	case "cancelled":
		return TaskStatusCancelled, nil
	}
	var t TaskStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TaskStatus) Ptr() *TaskStatus {
	return &t
}
