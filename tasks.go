// This file was auto-generated by Fern from our API Definition.

package ittybit

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/ittybit/sdk-go/internal"
	time "time"
)

type TasksListRequest struct {
	// Specifies the API Version
	Page          *int `json:"-" url:"page,omitempty"`
	Limit         *int `json:"-" url:"limit,omitempty"`
	acceptVersion string
}

func (t *TasksListRequest) AcceptVersion() string {
	return t.acceptVersion
}

type TasksCreateResponse struct {
	ID        string                      `json:"id" url:"id"`
	Object    string                      `json:"object" url:"object"`
	Kind      TasksCreateResponseKind     `json:"kind" url:"kind"`
	Input     map[string]interface{}      `json:"input,omitempty" url:"input,omitempty"`
	Options   map[string]interface{}      `json:"options,omitempty" url:"options,omitempty"`
	Output    map[string]interface{}      `json:"output,omitempty" url:"output,omitempty"`
	Status    TasksCreateResponseStatus   `json:"status" url:"status"`
	Progress  *int                        `json:"progress,omitempty" url:"progress,omitempty"`
	Error     *string                     `json:"error,omitempty" url:"error,omitempty"`
	CreatedBy *string                     `json:"created_by,omitempty" url:"created_by,omitempty"`
	Created   time.Time                   `json:"created" url:"created"`
	Updated   time.Time                   `json:"updated" url:"updated"`
	ParentID  *string                     `json:"parent_id,omitempty" url:"parent_id,omitempty"`
	Workflow  []interface{}               `json:"workflow,omitempty" url:"workflow,omitempty"`
	Results   *TasksCreateResponseResults `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TasksCreateResponse) GetID() string {
	if t == nil {
		return ""
	}
	return t.ID
}

func (t *TasksCreateResponse) GetObject() string {
	if t == nil {
		return ""
	}
	return t.Object
}

func (t *TasksCreateResponse) GetKind() TasksCreateResponseKind {
	if t == nil {
		return ""
	}
	return t.Kind
}

func (t *TasksCreateResponse) GetInput() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Input
}

func (t *TasksCreateResponse) GetOptions() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Options
}

func (t *TasksCreateResponse) GetOutput() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Output
}

func (t *TasksCreateResponse) GetStatus() TasksCreateResponseStatus {
	if t == nil {
		return ""
	}
	return t.Status
}

func (t *TasksCreateResponse) GetProgress() *int {
	if t == nil {
		return nil
	}
	return t.Progress
}

func (t *TasksCreateResponse) GetError() *string {
	if t == nil {
		return nil
	}
	return t.Error
}

func (t *TasksCreateResponse) GetCreatedBy() *string {
	if t == nil {
		return nil
	}
	return t.CreatedBy
}

func (t *TasksCreateResponse) GetCreated() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.Created
}

func (t *TasksCreateResponse) GetUpdated() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.Updated
}

func (t *TasksCreateResponse) GetParentID() *string {
	if t == nil {
		return nil
	}
	return t.ParentID
}

func (t *TasksCreateResponse) GetWorkflow() []interface{} {
	if t == nil {
		return nil
	}
	return t.Workflow
}

func (t *TasksCreateResponse) GetResults() *TasksCreateResponseResults {
	if t == nil {
		return nil
	}
	return t.Results
}

func (t *TasksCreateResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TasksCreateResponse) UnmarshalJSON(data []byte) error {
	type embed TasksCreateResponse
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TasksCreateResponse(unmarshaler.embed)
	t.Created = unmarshaler.Created.Time()
	t.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TasksCreateResponse) MarshalJSON() ([]byte, error) {
	type embed TasksCreateResponse
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*t),
		Created: internal.NewDateTime(t.Created),
		Updated: internal.NewDateTime(t.Updated),
	}
	return json.Marshal(marshaler)
}

func (t *TasksCreateResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TasksCreateResponseKind string

const (
	TasksCreateResponseKindIngest      TasksCreateResponseKind = "ingest"
	TasksCreateResponseKindVideo       TasksCreateResponseKind = "video"
	TasksCreateResponseKindImage       TasksCreateResponseKind = "image"
	TasksCreateResponseKindAudio       TasksCreateResponseKind = "audio"
	TasksCreateResponseKindChapters    TasksCreateResponseKind = "chapters"
	TasksCreateResponseKindSubtitles   TasksCreateResponseKind = "subtitles"
	TasksCreateResponseKindThumbnails  TasksCreateResponseKind = "thumbnails"
	TasksCreateResponseKindNsfw        TasksCreateResponseKind = "nsfw"
	TasksCreateResponseKindSpeech      TasksCreateResponseKind = "speech"
	TasksCreateResponseKindDescription TasksCreateResponseKind = "description"
	TasksCreateResponseKindOutline     TasksCreateResponseKind = "outline"
	TasksCreateResponseKindPrompt      TasksCreateResponseKind = "prompt"
	TasksCreateResponseKindWorkflow    TasksCreateResponseKind = "workflow"
	TasksCreateResponseKindConditions  TasksCreateResponseKind = "conditions"
	TasksCreateResponseKindHTTP        TasksCreateResponseKind = "http"
)

func NewTasksCreateResponseKindFromString(s string) (TasksCreateResponseKind, error) {
	switch s {
	case "ingest":
		return TasksCreateResponseKindIngest, nil
	case "video":
		return TasksCreateResponseKindVideo, nil
	case "image":
		return TasksCreateResponseKindImage, nil
	case "audio":
		return TasksCreateResponseKindAudio, nil
	case "chapters":
		return TasksCreateResponseKindChapters, nil
	case "subtitles":
		return TasksCreateResponseKindSubtitles, nil
	case "thumbnails":
		return TasksCreateResponseKindThumbnails, nil
	case "nsfw":
		return TasksCreateResponseKindNsfw, nil
	case "speech":
		return TasksCreateResponseKindSpeech, nil
	case "description":
		return TasksCreateResponseKindDescription, nil
	case "outline":
		return TasksCreateResponseKindOutline, nil
	case "prompt":
		return TasksCreateResponseKindPrompt, nil
	case "workflow":
		return TasksCreateResponseKindWorkflow, nil
	case "conditions":
		return TasksCreateResponseKindConditions, nil
	case "http":
		return TasksCreateResponseKindHTTP, nil
	}
	var t TasksCreateResponseKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TasksCreateResponseKind) Ptr() *TasksCreateResponseKind {
	return &t
}

type TasksCreateResponseResults struct {
	Passed   []map[string]interface{} `json:"passed,omitempty" url:"passed,omitempty"`
	Failed   []map[string]interface{} `json:"failed,omitempty" url:"failed,omitempty"`
	Continue *bool                    `json:"continue,omitempty" url:"continue,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TasksCreateResponseResults) GetPassed() []map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Passed
}

func (t *TasksCreateResponseResults) GetFailed() []map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Failed
}

func (t *TasksCreateResponseResults) GetContinue() *bool {
	if t == nil {
		return nil
	}
	return t.Continue
}

func (t *TasksCreateResponseResults) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TasksCreateResponseResults) UnmarshalJSON(data []byte) error {
	type unmarshaler TasksCreateResponseResults
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TasksCreateResponseResults(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TasksCreateResponseResults) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TasksCreateResponseStatus string

const (
	TasksCreateResponseStatusPending    TasksCreateResponseStatus = "pending"
	TasksCreateResponseStatusWaiting    TasksCreateResponseStatus = "waiting"
	TasksCreateResponseStatusProcessing TasksCreateResponseStatus = "processing"
	TasksCreateResponseStatusReady      TasksCreateResponseStatus = "ready"
	TasksCreateResponseStatusCompleted  TasksCreateResponseStatus = "completed"
	TasksCreateResponseStatusFailed     TasksCreateResponseStatus = "failed"
	TasksCreateResponseStatusError      TasksCreateResponseStatus = "error"
	TasksCreateResponseStatusCancelled  TasksCreateResponseStatus = "cancelled"
)

func NewTasksCreateResponseStatusFromString(s string) (TasksCreateResponseStatus, error) {
	switch s {
	case "pending":
		return TasksCreateResponseStatusPending, nil
	case "waiting":
		return TasksCreateResponseStatusWaiting, nil
	case "processing":
		return TasksCreateResponseStatusProcessing, nil
	case "ready":
		return TasksCreateResponseStatusReady, nil
	case "completed":
		return TasksCreateResponseStatusCompleted, nil
	case "failed":
		return TasksCreateResponseStatusFailed, nil
	case "error":
		return TasksCreateResponseStatusError, nil
	case "cancelled":
		return TasksCreateResponseStatusCancelled, nil
	}
	var t TasksCreateResponseStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TasksCreateResponseStatus) Ptr() *TasksCreateResponseStatus {
	return &t
}

type TasksGetResponse struct {
	ID        string                   `json:"id" url:"id"`
	Object    string                   `json:"object" url:"object"`
	Kind      TasksGetResponseKind     `json:"kind" url:"kind"`
	Input     map[string]interface{}   `json:"input,omitempty" url:"input,omitempty"`
	Options   map[string]interface{}   `json:"options,omitempty" url:"options,omitempty"`
	Output    map[string]interface{}   `json:"output,omitempty" url:"output,omitempty"`
	Status    TasksGetResponseStatus   `json:"status" url:"status"`
	Progress  *int                     `json:"progress,omitempty" url:"progress,omitempty"`
	Error     *string                  `json:"error,omitempty" url:"error,omitempty"`
	CreatedBy *string                  `json:"created_by,omitempty" url:"created_by,omitempty"`
	Created   time.Time                `json:"created" url:"created"`
	Updated   time.Time                `json:"updated" url:"updated"`
	ParentID  *string                  `json:"parent_id,omitempty" url:"parent_id,omitempty"`
	Workflow  []interface{}            `json:"workflow,omitempty" url:"workflow,omitempty"`
	Results   *TasksGetResponseResults `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TasksGetResponse) GetID() string {
	if t == nil {
		return ""
	}
	return t.ID
}

func (t *TasksGetResponse) GetObject() string {
	if t == nil {
		return ""
	}
	return t.Object
}

func (t *TasksGetResponse) GetKind() TasksGetResponseKind {
	if t == nil {
		return ""
	}
	return t.Kind
}

func (t *TasksGetResponse) GetInput() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Input
}

func (t *TasksGetResponse) GetOptions() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Options
}

func (t *TasksGetResponse) GetOutput() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Output
}

func (t *TasksGetResponse) GetStatus() TasksGetResponseStatus {
	if t == nil {
		return ""
	}
	return t.Status
}

func (t *TasksGetResponse) GetProgress() *int {
	if t == nil {
		return nil
	}
	return t.Progress
}

func (t *TasksGetResponse) GetError() *string {
	if t == nil {
		return nil
	}
	return t.Error
}

func (t *TasksGetResponse) GetCreatedBy() *string {
	if t == nil {
		return nil
	}
	return t.CreatedBy
}

func (t *TasksGetResponse) GetCreated() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.Created
}

func (t *TasksGetResponse) GetUpdated() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.Updated
}

func (t *TasksGetResponse) GetParentID() *string {
	if t == nil {
		return nil
	}
	return t.ParentID
}

func (t *TasksGetResponse) GetWorkflow() []interface{} {
	if t == nil {
		return nil
	}
	return t.Workflow
}

func (t *TasksGetResponse) GetResults() *TasksGetResponseResults {
	if t == nil {
		return nil
	}
	return t.Results
}

func (t *TasksGetResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TasksGetResponse) UnmarshalJSON(data []byte) error {
	type embed TasksGetResponse
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TasksGetResponse(unmarshaler.embed)
	t.Created = unmarshaler.Created.Time()
	t.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TasksGetResponse) MarshalJSON() ([]byte, error) {
	type embed TasksGetResponse
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*t),
		Created: internal.NewDateTime(t.Created),
		Updated: internal.NewDateTime(t.Updated),
	}
	return json.Marshal(marshaler)
}

func (t *TasksGetResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TasksGetResponseKind string

const (
	TasksGetResponseKindIngest      TasksGetResponseKind = "ingest"
	TasksGetResponseKindVideo       TasksGetResponseKind = "video"
	TasksGetResponseKindImage       TasksGetResponseKind = "image"
	TasksGetResponseKindAudio       TasksGetResponseKind = "audio"
	TasksGetResponseKindChapters    TasksGetResponseKind = "chapters"
	TasksGetResponseKindSubtitles   TasksGetResponseKind = "subtitles"
	TasksGetResponseKindThumbnails  TasksGetResponseKind = "thumbnails"
	TasksGetResponseKindNsfw        TasksGetResponseKind = "nsfw"
	TasksGetResponseKindSpeech      TasksGetResponseKind = "speech"
	TasksGetResponseKindDescription TasksGetResponseKind = "description"
	TasksGetResponseKindOutline     TasksGetResponseKind = "outline"
	TasksGetResponseKindPrompt      TasksGetResponseKind = "prompt"
	TasksGetResponseKindWorkflow    TasksGetResponseKind = "workflow"
	TasksGetResponseKindConditions  TasksGetResponseKind = "conditions"
	TasksGetResponseKindHTTP        TasksGetResponseKind = "http"
)

func NewTasksGetResponseKindFromString(s string) (TasksGetResponseKind, error) {
	switch s {
	case "ingest":
		return TasksGetResponseKindIngest, nil
	case "video":
		return TasksGetResponseKindVideo, nil
	case "image":
		return TasksGetResponseKindImage, nil
	case "audio":
		return TasksGetResponseKindAudio, nil
	case "chapters":
		return TasksGetResponseKindChapters, nil
	case "subtitles":
		return TasksGetResponseKindSubtitles, nil
	case "thumbnails":
		return TasksGetResponseKindThumbnails, nil
	case "nsfw":
		return TasksGetResponseKindNsfw, nil
	case "speech":
		return TasksGetResponseKindSpeech, nil
	case "description":
		return TasksGetResponseKindDescription, nil
	case "outline":
		return TasksGetResponseKindOutline, nil
	case "prompt":
		return TasksGetResponseKindPrompt, nil
	case "workflow":
		return TasksGetResponseKindWorkflow, nil
	case "conditions":
		return TasksGetResponseKindConditions, nil
	case "http":
		return TasksGetResponseKindHTTP, nil
	}
	var t TasksGetResponseKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TasksGetResponseKind) Ptr() *TasksGetResponseKind {
	return &t
}

type TasksGetResponseResults struct {
	Passed   []map[string]interface{} `json:"passed,omitempty" url:"passed,omitempty"`
	Failed   []map[string]interface{} `json:"failed,omitempty" url:"failed,omitempty"`
	Continue *bool                    `json:"continue,omitempty" url:"continue,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TasksGetResponseResults) GetPassed() []map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Passed
}

func (t *TasksGetResponseResults) GetFailed() []map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Failed
}

func (t *TasksGetResponseResults) GetContinue() *bool {
	if t == nil {
		return nil
	}
	return t.Continue
}

func (t *TasksGetResponseResults) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TasksGetResponseResults) UnmarshalJSON(data []byte) error {
	type unmarshaler TasksGetResponseResults
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TasksGetResponseResults(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TasksGetResponseResults) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TasksGetResponseStatus string

const (
	TasksGetResponseStatusPending    TasksGetResponseStatus = "pending"
	TasksGetResponseStatusWaiting    TasksGetResponseStatus = "waiting"
	TasksGetResponseStatusProcessing TasksGetResponseStatus = "processing"
	TasksGetResponseStatusReady      TasksGetResponseStatus = "ready"
	TasksGetResponseStatusCompleted  TasksGetResponseStatus = "completed"
	TasksGetResponseStatusFailed     TasksGetResponseStatus = "failed"
	TasksGetResponseStatusError      TasksGetResponseStatus = "error"
	TasksGetResponseStatusCancelled  TasksGetResponseStatus = "cancelled"
)

func NewTasksGetResponseStatusFromString(s string) (TasksGetResponseStatus, error) {
	switch s {
	case "pending":
		return TasksGetResponseStatusPending, nil
	case "waiting":
		return TasksGetResponseStatusWaiting, nil
	case "processing":
		return TasksGetResponseStatusProcessing, nil
	case "ready":
		return TasksGetResponseStatusReady, nil
	case "completed":
		return TasksGetResponseStatusCompleted, nil
	case "failed":
		return TasksGetResponseStatusFailed, nil
	case "error":
		return TasksGetResponseStatusError, nil
	case "cancelled":
		return TasksGetResponseStatusCancelled, nil
	}
	var t TasksGetResponseStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TasksGetResponseStatus) Ptr() *TasksGetResponseStatus {
	return &t
}

type TasksListResponseItem struct {
	ID        string                        `json:"id" url:"id"`
	Object    string                        `json:"object" url:"object"`
	Kind      TasksListResponseItemKind     `json:"kind" url:"kind"`
	Input     map[string]interface{}        `json:"input,omitempty" url:"input,omitempty"`
	Options   map[string]interface{}        `json:"options,omitempty" url:"options,omitempty"`
	Output    map[string]interface{}        `json:"output,omitempty" url:"output,omitempty"`
	Status    TasksListResponseItemStatus   `json:"status" url:"status"`
	Progress  *int                          `json:"progress,omitempty" url:"progress,omitempty"`
	Error     *string                       `json:"error,omitempty" url:"error,omitempty"`
	CreatedBy *string                       `json:"created_by,omitempty" url:"created_by,omitempty"`
	Created   time.Time                     `json:"created" url:"created"`
	Updated   time.Time                     `json:"updated" url:"updated"`
	ParentID  *string                       `json:"parent_id,omitempty" url:"parent_id,omitempty"`
	Workflow  []interface{}                 `json:"workflow,omitempty" url:"workflow,omitempty"`
	Results   *TasksListResponseItemResults `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TasksListResponseItem) GetID() string {
	if t == nil {
		return ""
	}
	return t.ID
}

func (t *TasksListResponseItem) GetObject() string {
	if t == nil {
		return ""
	}
	return t.Object
}

func (t *TasksListResponseItem) GetKind() TasksListResponseItemKind {
	if t == nil {
		return ""
	}
	return t.Kind
}

func (t *TasksListResponseItem) GetInput() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Input
}

func (t *TasksListResponseItem) GetOptions() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Options
}

func (t *TasksListResponseItem) GetOutput() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Output
}

func (t *TasksListResponseItem) GetStatus() TasksListResponseItemStatus {
	if t == nil {
		return ""
	}
	return t.Status
}

func (t *TasksListResponseItem) GetProgress() *int {
	if t == nil {
		return nil
	}
	return t.Progress
}

func (t *TasksListResponseItem) GetError() *string {
	if t == nil {
		return nil
	}
	return t.Error
}

func (t *TasksListResponseItem) GetCreatedBy() *string {
	if t == nil {
		return nil
	}
	return t.CreatedBy
}

func (t *TasksListResponseItem) GetCreated() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.Created
}

func (t *TasksListResponseItem) GetUpdated() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.Updated
}

func (t *TasksListResponseItem) GetParentID() *string {
	if t == nil {
		return nil
	}
	return t.ParentID
}

func (t *TasksListResponseItem) GetWorkflow() []interface{} {
	if t == nil {
		return nil
	}
	return t.Workflow
}

func (t *TasksListResponseItem) GetResults() *TasksListResponseItemResults {
	if t == nil {
		return nil
	}
	return t.Results
}

func (t *TasksListResponseItem) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TasksListResponseItem) UnmarshalJSON(data []byte) error {
	type embed TasksListResponseItem
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TasksListResponseItem(unmarshaler.embed)
	t.Created = unmarshaler.Created.Time()
	t.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TasksListResponseItem) MarshalJSON() ([]byte, error) {
	type embed TasksListResponseItem
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*t),
		Created: internal.NewDateTime(t.Created),
		Updated: internal.NewDateTime(t.Updated),
	}
	return json.Marshal(marshaler)
}

func (t *TasksListResponseItem) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TasksListResponseItemKind string

const (
	TasksListResponseItemKindIngest      TasksListResponseItemKind = "ingest"
	TasksListResponseItemKindVideo       TasksListResponseItemKind = "video"
	TasksListResponseItemKindImage       TasksListResponseItemKind = "image"
	TasksListResponseItemKindAudio       TasksListResponseItemKind = "audio"
	TasksListResponseItemKindChapters    TasksListResponseItemKind = "chapters"
	TasksListResponseItemKindSubtitles   TasksListResponseItemKind = "subtitles"
	TasksListResponseItemKindThumbnails  TasksListResponseItemKind = "thumbnails"
	TasksListResponseItemKindNsfw        TasksListResponseItemKind = "nsfw"
	TasksListResponseItemKindSpeech      TasksListResponseItemKind = "speech"
	TasksListResponseItemKindDescription TasksListResponseItemKind = "description"
	TasksListResponseItemKindOutline     TasksListResponseItemKind = "outline"
	TasksListResponseItemKindPrompt      TasksListResponseItemKind = "prompt"
	TasksListResponseItemKindWorkflow    TasksListResponseItemKind = "workflow"
	TasksListResponseItemKindConditions  TasksListResponseItemKind = "conditions"
	TasksListResponseItemKindHTTP        TasksListResponseItemKind = "http"
)

func NewTasksListResponseItemKindFromString(s string) (TasksListResponseItemKind, error) {
	switch s {
	case "ingest":
		return TasksListResponseItemKindIngest, nil
	case "video":
		return TasksListResponseItemKindVideo, nil
	case "image":
		return TasksListResponseItemKindImage, nil
	case "audio":
		return TasksListResponseItemKindAudio, nil
	case "chapters":
		return TasksListResponseItemKindChapters, nil
	case "subtitles":
		return TasksListResponseItemKindSubtitles, nil
	case "thumbnails":
		return TasksListResponseItemKindThumbnails, nil
	case "nsfw":
		return TasksListResponseItemKindNsfw, nil
	case "speech":
		return TasksListResponseItemKindSpeech, nil
	case "description":
		return TasksListResponseItemKindDescription, nil
	case "outline":
		return TasksListResponseItemKindOutline, nil
	case "prompt":
		return TasksListResponseItemKindPrompt, nil
	case "workflow":
		return TasksListResponseItemKindWorkflow, nil
	case "conditions":
		return TasksListResponseItemKindConditions, nil
	case "http":
		return TasksListResponseItemKindHTTP, nil
	}
	var t TasksListResponseItemKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TasksListResponseItemKind) Ptr() *TasksListResponseItemKind {
	return &t
}

type TasksListResponseItemResults struct {
	Passed   []map[string]interface{} `json:"passed,omitempty" url:"passed,omitempty"`
	Failed   []map[string]interface{} `json:"failed,omitempty" url:"failed,omitempty"`
	Continue *bool                    `json:"continue,omitempty" url:"continue,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TasksListResponseItemResults) GetPassed() []map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Passed
}

func (t *TasksListResponseItemResults) GetFailed() []map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Failed
}

func (t *TasksListResponseItemResults) GetContinue() *bool {
	if t == nil {
		return nil
	}
	return t.Continue
}

func (t *TasksListResponseItemResults) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TasksListResponseItemResults) UnmarshalJSON(data []byte) error {
	type unmarshaler TasksListResponseItemResults
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TasksListResponseItemResults(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TasksListResponseItemResults) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TasksListResponseItemStatus string

const (
	TasksListResponseItemStatusPending    TasksListResponseItemStatus = "pending"
	TasksListResponseItemStatusWaiting    TasksListResponseItemStatus = "waiting"
	TasksListResponseItemStatusProcessing TasksListResponseItemStatus = "processing"
	TasksListResponseItemStatusReady      TasksListResponseItemStatus = "ready"
	TasksListResponseItemStatusCompleted  TasksListResponseItemStatus = "completed"
	TasksListResponseItemStatusFailed     TasksListResponseItemStatus = "failed"
	TasksListResponseItemStatusError      TasksListResponseItemStatus = "error"
	TasksListResponseItemStatusCancelled  TasksListResponseItemStatus = "cancelled"
)

func NewTasksListResponseItemStatusFromString(s string) (TasksListResponseItemStatus, error) {
	switch s {
	case "pending":
		return TasksListResponseItemStatusPending, nil
	case "waiting":
		return TasksListResponseItemStatusWaiting, nil
	case "processing":
		return TasksListResponseItemStatusProcessing, nil
	case "ready":
		return TasksListResponseItemStatusReady, nil
	case "completed":
		return TasksListResponseItemStatusCompleted, nil
	case "failed":
		return TasksListResponseItemStatusFailed, nil
	case "error":
		return TasksListResponseItemStatusError, nil
	case "cancelled":
		return TasksListResponseItemStatusCancelled, nil
	}
	var t TasksListResponseItemStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TasksListResponseItemStatus) Ptr() *TasksListResponseItemStatus {
	return &t
}
