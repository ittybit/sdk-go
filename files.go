// This file was auto-generated by Fern from our API Definition.

package ittybit

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/ittybit/sdk-go/internal"
	time "time"
)

type FilesCreateRequest struct {
	// Specifies the API Version
	URL           string                 `json:"url" url:"-"`
	MediaID       *string                `json:"media_id,omitempty" url:"-"`
	Folder        *string                `json:"folder,omitempty" url:"-"`
	Filename      *string                `json:"filename,omitempty" url:"-"`
	Ref           *string                `json:"ref,omitempty" url:"-"`
	Metadata      map[string]interface{} `json:"metadata,omitempty" url:"-"`
	acceptVersion string
}

func (f *FilesCreateRequest) AcceptVersion() string {
	return f.acceptVersion
}

func (f *FilesCreateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler FilesCreateRequest
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*f = FilesCreateRequest(body)
	f.acceptVersion = "2025-08-20"
	return nil
}

func (f *FilesCreateRequest) MarshalJSON() ([]byte, error) {
	type embed FilesCreateRequest
	var marshaler = struct {
		embed
		AcceptVersion string `json:"Accept-Version"`
	}{
		embed:         embed(*f),
		AcceptVersion: "2025-08-20",
	}
	return json.Marshal(marshaler)
}

type FilesListRequest struct {
	// Specifies the API Version
	Page          *int `json:"-" url:"page,omitempty"`
	Limit         *int `json:"-" url:"limit,omitempty"`
	acceptVersion string
}

func (f *FilesListRequest) AcceptVersion() string {
	return f.acceptVersion
}

type FilesCreateResponse struct {
	ID           string                    `json:"id" url:"id"`
	MediaID      string                    `json:"media_id" url:"media_id"`
	Object       FilesCreateResponseObject `json:"object" url:"object"`
	Kind         FilesCreateResponseKind   `json:"kind" url:"kind"`
	Type         string                    `json:"type" url:"type"`
	Codec        *string                   `json:"codec,omitempty" url:"codec,omitempty"`
	Container    *string                   `json:"container,omitempty" url:"container,omitempty"`
	Width        *int                      `json:"width,omitempty" url:"width,omitempty"`
	Height       *int                      `json:"height,omitempty" url:"height,omitempty"`
	Orientation  *string                   `json:"orientation,omitempty" url:"orientation,omitempty"`
	Rotation     *float64                  `json:"rotation,omitempty" url:"rotation,omitempty"`
	Transparency *bool                     `json:"transparency,omitempty" url:"transparency,omitempty"`
	Animated     *bool                     `json:"animated,omitempty" url:"animated,omitempty"`
	Frames       *int                      `json:"frames,omitempty" url:"frames,omitempty"`
	Duration     *float64                  `json:"duration,omitempty" url:"duration,omitempty"`
	Fps          *float64                  `json:"fps,omitempty" url:"fps,omitempty"`
	Filesize     int                       `json:"filesize" url:"filesize"`
	Bitrate      *int                      `json:"bitrate,omitempty" url:"bitrate,omitempty"`
	Language     *string                   `json:"language,omitempty" url:"language,omitempty"`
	Label        *string                   `json:"label,omitempty" url:"label,omitempty"`
	Ref          *string                   `json:"ref,omitempty" url:"ref,omitempty"`
	Folder       *string                   `json:"folder,omitempty" url:"folder,omitempty"`
	Filename     *string                   `json:"filename,omitempty" url:"filename,omitempty"`
	URL          string                    `json:"url" url:"url"`
	Placeholder  *string                   `json:"placeholder,omitempty" url:"placeholder,omitempty"`
	Background   *string                   `json:"background,omitempty" url:"background,omitempty"`
	Metadata     map[string]interface{}    `json:"metadata,omitempty" url:"metadata,omitempty"`
	Original     *bool                     `json:"original,omitempty" url:"original,omitempty"`
	CreatedBy    *string                   `json:"created_by,omitempty" url:"created_by,omitempty"`
	Created      time.Time                 `json:"created" url:"created"`
	Updated      time.Time                 `json:"updated" url:"updated"`
	Status       FilesCreateResponseStatus `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FilesCreateResponse) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FilesCreateResponse) GetMediaID() string {
	if f == nil {
		return ""
	}
	return f.MediaID
}

func (f *FilesCreateResponse) GetObject() FilesCreateResponseObject {
	if f == nil {
		return ""
	}
	return f.Object
}

func (f *FilesCreateResponse) GetKind() FilesCreateResponseKind {
	if f == nil {
		return ""
	}
	return f.Kind
}

func (f *FilesCreateResponse) GetType() string {
	if f == nil {
		return ""
	}
	return f.Type
}

func (f *FilesCreateResponse) GetCodec() *string {
	if f == nil {
		return nil
	}
	return f.Codec
}

func (f *FilesCreateResponse) GetContainer() *string {
	if f == nil {
		return nil
	}
	return f.Container
}

func (f *FilesCreateResponse) GetWidth() *int {
	if f == nil {
		return nil
	}
	return f.Width
}

func (f *FilesCreateResponse) GetHeight() *int {
	if f == nil {
		return nil
	}
	return f.Height
}

func (f *FilesCreateResponse) GetOrientation() *string {
	if f == nil {
		return nil
	}
	return f.Orientation
}

func (f *FilesCreateResponse) GetRotation() *float64 {
	if f == nil {
		return nil
	}
	return f.Rotation
}

func (f *FilesCreateResponse) GetTransparency() *bool {
	if f == nil {
		return nil
	}
	return f.Transparency
}

func (f *FilesCreateResponse) GetAnimated() *bool {
	if f == nil {
		return nil
	}
	return f.Animated
}

func (f *FilesCreateResponse) GetFrames() *int {
	if f == nil {
		return nil
	}
	return f.Frames
}

func (f *FilesCreateResponse) GetDuration() *float64 {
	if f == nil {
		return nil
	}
	return f.Duration
}

func (f *FilesCreateResponse) GetFps() *float64 {
	if f == nil {
		return nil
	}
	return f.Fps
}

func (f *FilesCreateResponse) GetFilesize() int {
	if f == nil {
		return 0
	}
	return f.Filesize
}

func (f *FilesCreateResponse) GetBitrate() *int {
	if f == nil {
		return nil
	}
	return f.Bitrate
}

func (f *FilesCreateResponse) GetLanguage() *string {
	if f == nil {
		return nil
	}
	return f.Language
}

func (f *FilesCreateResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FilesCreateResponse) GetRef() *string {
	if f == nil {
		return nil
	}
	return f.Ref
}

func (f *FilesCreateResponse) GetFolder() *string {
	if f == nil {
		return nil
	}
	return f.Folder
}

func (f *FilesCreateResponse) GetFilename() *string {
	if f == nil {
		return nil
	}
	return f.Filename
}

func (f *FilesCreateResponse) GetURL() string {
	if f == nil {
		return ""
	}
	return f.URL
}

func (f *FilesCreateResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FilesCreateResponse) GetBackground() *string {
	if f == nil {
		return nil
	}
	return f.Background
}

func (f *FilesCreateResponse) GetMetadata() map[string]interface{} {
	if f == nil {
		return nil
	}
	return f.Metadata
}

func (f *FilesCreateResponse) GetOriginal() *bool {
	if f == nil {
		return nil
	}
	return f.Original
}

func (f *FilesCreateResponse) GetCreatedBy() *string {
	if f == nil {
		return nil
	}
	return f.CreatedBy
}

func (f *FilesCreateResponse) GetCreated() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.Created
}

func (f *FilesCreateResponse) GetUpdated() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.Updated
}

func (f *FilesCreateResponse) GetStatus() FilesCreateResponseStatus {
	if f == nil {
		return ""
	}
	return f.Status
}

func (f *FilesCreateResponse) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FilesCreateResponse) UnmarshalJSON(data []byte) error {
	type embed FilesCreateResponse
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FilesCreateResponse(unmarshaler.embed)
	f.Created = unmarshaler.Created.Time()
	f.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FilesCreateResponse) MarshalJSON() ([]byte, error) {
	type embed FilesCreateResponse
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*f),
		Created: internal.NewDateTime(f.Created),
		Updated: internal.NewDateTime(f.Updated),
	}
	return json.Marshal(marshaler)
}

func (f *FilesCreateResponse) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FilesCreateResponseKind string

const (
	FilesCreateResponseKindVideo FilesCreateResponseKind = "video"
	FilesCreateResponseKindImage FilesCreateResponseKind = "image"
	FilesCreateResponseKindAudio FilesCreateResponseKind = "audio"
)

func NewFilesCreateResponseKindFromString(s string) (FilesCreateResponseKind, error) {
	switch s {
	case "video":
		return FilesCreateResponseKindVideo, nil
	case "image":
		return FilesCreateResponseKindImage, nil
	case "audio":
		return FilesCreateResponseKindAudio, nil
	}
	var t FilesCreateResponseKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FilesCreateResponseKind) Ptr() *FilesCreateResponseKind {
	return &f
}

type FilesCreateResponseObject string

const (
	FilesCreateResponseObjectSource       FilesCreateResponseObject = "source"
	FilesCreateResponseObjectTrack        FilesCreateResponseObject = "track"
	FilesCreateResponseObjectIntelligence FilesCreateResponseObject = "intelligence"
)

func NewFilesCreateResponseObjectFromString(s string) (FilesCreateResponseObject, error) {
	switch s {
	case "source":
		return FilesCreateResponseObjectSource, nil
	case "track":
		return FilesCreateResponseObjectTrack, nil
	case "intelligence":
		return FilesCreateResponseObjectIntelligence, nil
	}
	var t FilesCreateResponseObject
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FilesCreateResponseObject) Ptr() *FilesCreateResponseObject {
	return &f
}

type FilesCreateResponseStatus string

const (
	FilesCreateResponseStatusWaiting    FilesCreateResponseStatus = "waiting"
	FilesCreateResponseStatusProcessing FilesCreateResponseStatus = "processing"
	FilesCreateResponseStatusReady      FilesCreateResponseStatus = "ready"
	FilesCreateResponseStatusFailed     FilesCreateResponseStatus = "failed"
)

func NewFilesCreateResponseStatusFromString(s string) (FilesCreateResponseStatus, error) {
	switch s {
	case "waiting":
		return FilesCreateResponseStatusWaiting, nil
	case "processing":
		return FilesCreateResponseStatusProcessing, nil
	case "ready":
		return FilesCreateResponseStatusReady, nil
	case "failed":
		return FilesCreateResponseStatusFailed, nil
	}
	var t FilesCreateResponseStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FilesCreateResponseStatus) Ptr() *FilesCreateResponseStatus {
	return &f
}

type FilesDeleteResponse struct {
	Message *string `json:"message,omitempty" url:"message,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FilesDeleteResponse) GetMessage() *string {
	if f == nil {
		return nil
	}
	return f.Message
}

func (f *FilesDeleteResponse) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FilesDeleteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler FilesDeleteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FilesDeleteResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FilesDeleteResponse) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FilesGetResponse struct {
	ID           string                 `json:"id" url:"id"`
	MediaID      string                 `json:"media_id" url:"media_id"`
	Object       FilesGetResponseObject `json:"object" url:"object"`
	Kind         FilesGetResponseKind   `json:"kind" url:"kind"`
	Type         string                 `json:"type" url:"type"`
	Codec        *string                `json:"codec,omitempty" url:"codec,omitempty"`
	Container    *string                `json:"container,omitempty" url:"container,omitempty"`
	Width        *int                   `json:"width,omitempty" url:"width,omitempty"`
	Height       *int                   `json:"height,omitempty" url:"height,omitempty"`
	Orientation  *string                `json:"orientation,omitempty" url:"orientation,omitempty"`
	Rotation     *float64               `json:"rotation,omitempty" url:"rotation,omitempty"`
	Transparency *bool                  `json:"transparency,omitempty" url:"transparency,omitempty"`
	Animated     *bool                  `json:"animated,omitempty" url:"animated,omitempty"`
	Frames       *int                   `json:"frames,omitempty" url:"frames,omitempty"`
	Duration     *float64               `json:"duration,omitempty" url:"duration,omitempty"`
	Fps          *float64               `json:"fps,omitempty" url:"fps,omitempty"`
	Filesize     int                    `json:"filesize" url:"filesize"`
	Bitrate      *int                   `json:"bitrate,omitempty" url:"bitrate,omitempty"`
	Language     *string                `json:"language,omitempty" url:"language,omitempty"`
	Label        *string                `json:"label,omitempty" url:"label,omitempty"`
	Ref          *string                `json:"ref,omitempty" url:"ref,omitempty"`
	Folder       *string                `json:"folder,omitempty" url:"folder,omitempty"`
	Filename     *string                `json:"filename,omitempty" url:"filename,omitempty"`
	URL          string                 `json:"url" url:"url"`
	Placeholder  *string                `json:"placeholder,omitempty" url:"placeholder,omitempty"`
	Background   *string                `json:"background,omitempty" url:"background,omitempty"`
	Metadata     map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	Original     *bool                  `json:"original,omitempty" url:"original,omitempty"`
	CreatedBy    *string                `json:"created_by,omitempty" url:"created_by,omitempty"`
	Created      time.Time              `json:"created" url:"created"`
	Updated      time.Time              `json:"updated" url:"updated"`
	Status       FilesGetResponseStatus `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FilesGetResponse) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FilesGetResponse) GetMediaID() string {
	if f == nil {
		return ""
	}
	return f.MediaID
}

func (f *FilesGetResponse) GetObject() FilesGetResponseObject {
	if f == nil {
		return ""
	}
	return f.Object
}

func (f *FilesGetResponse) GetKind() FilesGetResponseKind {
	if f == nil {
		return ""
	}
	return f.Kind
}

func (f *FilesGetResponse) GetType() string {
	if f == nil {
		return ""
	}
	return f.Type
}

func (f *FilesGetResponse) GetCodec() *string {
	if f == nil {
		return nil
	}
	return f.Codec
}

func (f *FilesGetResponse) GetContainer() *string {
	if f == nil {
		return nil
	}
	return f.Container
}

func (f *FilesGetResponse) GetWidth() *int {
	if f == nil {
		return nil
	}
	return f.Width
}

func (f *FilesGetResponse) GetHeight() *int {
	if f == nil {
		return nil
	}
	return f.Height
}

func (f *FilesGetResponse) GetOrientation() *string {
	if f == nil {
		return nil
	}
	return f.Orientation
}

func (f *FilesGetResponse) GetRotation() *float64 {
	if f == nil {
		return nil
	}
	return f.Rotation
}

func (f *FilesGetResponse) GetTransparency() *bool {
	if f == nil {
		return nil
	}
	return f.Transparency
}

func (f *FilesGetResponse) GetAnimated() *bool {
	if f == nil {
		return nil
	}
	return f.Animated
}

func (f *FilesGetResponse) GetFrames() *int {
	if f == nil {
		return nil
	}
	return f.Frames
}

func (f *FilesGetResponse) GetDuration() *float64 {
	if f == nil {
		return nil
	}
	return f.Duration
}

func (f *FilesGetResponse) GetFps() *float64 {
	if f == nil {
		return nil
	}
	return f.Fps
}

func (f *FilesGetResponse) GetFilesize() int {
	if f == nil {
		return 0
	}
	return f.Filesize
}

func (f *FilesGetResponse) GetBitrate() *int {
	if f == nil {
		return nil
	}
	return f.Bitrate
}

func (f *FilesGetResponse) GetLanguage() *string {
	if f == nil {
		return nil
	}
	return f.Language
}

func (f *FilesGetResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FilesGetResponse) GetRef() *string {
	if f == nil {
		return nil
	}
	return f.Ref
}

func (f *FilesGetResponse) GetFolder() *string {
	if f == nil {
		return nil
	}
	return f.Folder
}

func (f *FilesGetResponse) GetFilename() *string {
	if f == nil {
		return nil
	}
	return f.Filename
}

func (f *FilesGetResponse) GetURL() string {
	if f == nil {
		return ""
	}
	return f.URL
}

func (f *FilesGetResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FilesGetResponse) GetBackground() *string {
	if f == nil {
		return nil
	}
	return f.Background
}

func (f *FilesGetResponse) GetMetadata() map[string]interface{} {
	if f == nil {
		return nil
	}
	return f.Metadata
}

func (f *FilesGetResponse) GetOriginal() *bool {
	if f == nil {
		return nil
	}
	return f.Original
}

func (f *FilesGetResponse) GetCreatedBy() *string {
	if f == nil {
		return nil
	}
	return f.CreatedBy
}

func (f *FilesGetResponse) GetCreated() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.Created
}

func (f *FilesGetResponse) GetUpdated() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.Updated
}

func (f *FilesGetResponse) GetStatus() FilesGetResponseStatus {
	if f == nil {
		return ""
	}
	return f.Status
}

func (f *FilesGetResponse) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FilesGetResponse) UnmarshalJSON(data []byte) error {
	type embed FilesGetResponse
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FilesGetResponse(unmarshaler.embed)
	f.Created = unmarshaler.Created.Time()
	f.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FilesGetResponse) MarshalJSON() ([]byte, error) {
	type embed FilesGetResponse
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*f),
		Created: internal.NewDateTime(f.Created),
		Updated: internal.NewDateTime(f.Updated),
	}
	return json.Marshal(marshaler)
}

func (f *FilesGetResponse) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FilesGetResponseKind string

const (
	FilesGetResponseKindVideo FilesGetResponseKind = "video"
	FilesGetResponseKindImage FilesGetResponseKind = "image"
	FilesGetResponseKindAudio FilesGetResponseKind = "audio"
)

func NewFilesGetResponseKindFromString(s string) (FilesGetResponseKind, error) {
	switch s {
	case "video":
		return FilesGetResponseKindVideo, nil
	case "image":
		return FilesGetResponseKindImage, nil
	case "audio":
		return FilesGetResponseKindAudio, nil
	}
	var t FilesGetResponseKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FilesGetResponseKind) Ptr() *FilesGetResponseKind {
	return &f
}

type FilesGetResponseObject string

const (
	FilesGetResponseObjectSource       FilesGetResponseObject = "source"
	FilesGetResponseObjectTrack        FilesGetResponseObject = "track"
	FilesGetResponseObjectIntelligence FilesGetResponseObject = "intelligence"
)

func NewFilesGetResponseObjectFromString(s string) (FilesGetResponseObject, error) {
	switch s {
	case "source":
		return FilesGetResponseObjectSource, nil
	case "track":
		return FilesGetResponseObjectTrack, nil
	case "intelligence":
		return FilesGetResponseObjectIntelligence, nil
	}
	var t FilesGetResponseObject
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FilesGetResponseObject) Ptr() *FilesGetResponseObject {
	return &f
}

type FilesGetResponseStatus string

const (
	FilesGetResponseStatusWaiting    FilesGetResponseStatus = "waiting"
	FilesGetResponseStatusProcessing FilesGetResponseStatus = "processing"
	FilesGetResponseStatusReady      FilesGetResponseStatus = "ready"
	FilesGetResponseStatusFailed     FilesGetResponseStatus = "failed"
)

func NewFilesGetResponseStatusFromString(s string) (FilesGetResponseStatus, error) {
	switch s {
	case "waiting":
		return FilesGetResponseStatusWaiting, nil
	case "processing":
		return FilesGetResponseStatusProcessing, nil
	case "ready":
		return FilesGetResponseStatusReady, nil
	case "failed":
		return FilesGetResponseStatusFailed, nil
	}
	var t FilesGetResponseStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FilesGetResponseStatus) Ptr() *FilesGetResponseStatus {
	return &f
}

type FilesListResponseItem struct {
	ID           string                      `json:"id" url:"id"`
	MediaID      string                      `json:"media_id" url:"media_id"`
	Object       FilesListResponseItemObject `json:"object" url:"object"`
	Kind         FilesListResponseItemKind   `json:"kind" url:"kind"`
	Type         string                      `json:"type" url:"type"`
	Codec        *string                     `json:"codec,omitempty" url:"codec,omitempty"`
	Container    *string                     `json:"container,omitempty" url:"container,omitempty"`
	Width        *int                        `json:"width,omitempty" url:"width,omitempty"`
	Height       *int                        `json:"height,omitempty" url:"height,omitempty"`
	Orientation  *string                     `json:"orientation,omitempty" url:"orientation,omitempty"`
	Rotation     *float64                    `json:"rotation,omitempty" url:"rotation,omitempty"`
	Transparency *bool                       `json:"transparency,omitempty" url:"transparency,omitempty"`
	Animated     *bool                       `json:"animated,omitempty" url:"animated,omitempty"`
	Frames       *int                        `json:"frames,omitempty" url:"frames,omitempty"`
	Duration     *float64                    `json:"duration,omitempty" url:"duration,omitempty"`
	Fps          *float64                    `json:"fps,omitempty" url:"fps,omitempty"`
	Filesize     int                         `json:"filesize" url:"filesize"`
	Bitrate      *int                        `json:"bitrate,omitempty" url:"bitrate,omitempty"`
	Language     *string                     `json:"language,omitempty" url:"language,omitempty"`
	Label        *string                     `json:"label,omitempty" url:"label,omitempty"`
	Ref          *string                     `json:"ref,omitempty" url:"ref,omitempty"`
	Folder       *string                     `json:"folder,omitempty" url:"folder,omitempty"`
	Filename     *string                     `json:"filename,omitempty" url:"filename,omitempty"`
	URL          string                      `json:"url" url:"url"`
	Placeholder  *string                     `json:"placeholder,omitempty" url:"placeholder,omitempty"`
	Background   *string                     `json:"background,omitempty" url:"background,omitempty"`
	Metadata     map[string]interface{}      `json:"metadata,omitempty" url:"metadata,omitempty"`
	Original     *bool                       `json:"original,omitempty" url:"original,omitempty"`
	CreatedBy    *string                     `json:"created_by,omitempty" url:"created_by,omitempty"`
	Created      time.Time                   `json:"created" url:"created"`
	Updated      time.Time                   `json:"updated" url:"updated"`
	Status       FilesListResponseItemStatus `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FilesListResponseItem) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FilesListResponseItem) GetMediaID() string {
	if f == nil {
		return ""
	}
	return f.MediaID
}

func (f *FilesListResponseItem) GetObject() FilesListResponseItemObject {
	if f == nil {
		return ""
	}
	return f.Object
}

func (f *FilesListResponseItem) GetKind() FilesListResponseItemKind {
	if f == nil {
		return ""
	}
	return f.Kind
}

func (f *FilesListResponseItem) GetType() string {
	if f == nil {
		return ""
	}
	return f.Type
}

func (f *FilesListResponseItem) GetCodec() *string {
	if f == nil {
		return nil
	}
	return f.Codec
}

func (f *FilesListResponseItem) GetContainer() *string {
	if f == nil {
		return nil
	}
	return f.Container
}

func (f *FilesListResponseItem) GetWidth() *int {
	if f == nil {
		return nil
	}
	return f.Width
}

func (f *FilesListResponseItem) GetHeight() *int {
	if f == nil {
		return nil
	}
	return f.Height
}

func (f *FilesListResponseItem) GetOrientation() *string {
	if f == nil {
		return nil
	}
	return f.Orientation
}

func (f *FilesListResponseItem) GetRotation() *float64 {
	if f == nil {
		return nil
	}
	return f.Rotation
}

func (f *FilesListResponseItem) GetTransparency() *bool {
	if f == nil {
		return nil
	}
	return f.Transparency
}

func (f *FilesListResponseItem) GetAnimated() *bool {
	if f == nil {
		return nil
	}
	return f.Animated
}

func (f *FilesListResponseItem) GetFrames() *int {
	if f == nil {
		return nil
	}
	return f.Frames
}

func (f *FilesListResponseItem) GetDuration() *float64 {
	if f == nil {
		return nil
	}
	return f.Duration
}

func (f *FilesListResponseItem) GetFps() *float64 {
	if f == nil {
		return nil
	}
	return f.Fps
}

func (f *FilesListResponseItem) GetFilesize() int {
	if f == nil {
		return 0
	}
	return f.Filesize
}

func (f *FilesListResponseItem) GetBitrate() *int {
	if f == nil {
		return nil
	}
	return f.Bitrate
}

func (f *FilesListResponseItem) GetLanguage() *string {
	if f == nil {
		return nil
	}
	return f.Language
}

func (f *FilesListResponseItem) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FilesListResponseItem) GetRef() *string {
	if f == nil {
		return nil
	}
	return f.Ref
}

func (f *FilesListResponseItem) GetFolder() *string {
	if f == nil {
		return nil
	}
	return f.Folder
}

func (f *FilesListResponseItem) GetFilename() *string {
	if f == nil {
		return nil
	}
	return f.Filename
}

func (f *FilesListResponseItem) GetURL() string {
	if f == nil {
		return ""
	}
	return f.URL
}

func (f *FilesListResponseItem) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FilesListResponseItem) GetBackground() *string {
	if f == nil {
		return nil
	}
	return f.Background
}

func (f *FilesListResponseItem) GetMetadata() map[string]interface{} {
	if f == nil {
		return nil
	}
	return f.Metadata
}

func (f *FilesListResponseItem) GetOriginal() *bool {
	if f == nil {
		return nil
	}
	return f.Original
}

func (f *FilesListResponseItem) GetCreatedBy() *string {
	if f == nil {
		return nil
	}
	return f.CreatedBy
}

func (f *FilesListResponseItem) GetCreated() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.Created
}

func (f *FilesListResponseItem) GetUpdated() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.Updated
}

func (f *FilesListResponseItem) GetStatus() FilesListResponseItemStatus {
	if f == nil {
		return ""
	}
	return f.Status
}

func (f *FilesListResponseItem) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FilesListResponseItem) UnmarshalJSON(data []byte) error {
	type embed FilesListResponseItem
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FilesListResponseItem(unmarshaler.embed)
	f.Created = unmarshaler.Created.Time()
	f.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FilesListResponseItem) MarshalJSON() ([]byte, error) {
	type embed FilesListResponseItem
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*f),
		Created: internal.NewDateTime(f.Created),
		Updated: internal.NewDateTime(f.Updated),
	}
	return json.Marshal(marshaler)
}

func (f *FilesListResponseItem) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FilesListResponseItemKind string

const (
	FilesListResponseItemKindVideo FilesListResponseItemKind = "video"
	FilesListResponseItemKindImage FilesListResponseItemKind = "image"
	FilesListResponseItemKindAudio FilesListResponseItemKind = "audio"
)

func NewFilesListResponseItemKindFromString(s string) (FilesListResponseItemKind, error) {
	switch s {
	case "video":
		return FilesListResponseItemKindVideo, nil
	case "image":
		return FilesListResponseItemKindImage, nil
	case "audio":
		return FilesListResponseItemKindAudio, nil
	}
	var t FilesListResponseItemKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FilesListResponseItemKind) Ptr() *FilesListResponseItemKind {
	return &f
}

type FilesListResponseItemObject string

const (
	FilesListResponseItemObjectSource       FilesListResponseItemObject = "source"
	FilesListResponseItemObjectTrack        FilesListResponseItemObject = "track"
	FilesListResponseItemObjectIntelligence FilesListResponseItemObject = "intelligence"
)

func NewFilesListResponseItemObjectFromString(s string) (FilesListResponseItemObject, error) {
	switch s {
	case "source":
		return FilesListResponseItemObjectSource, nil
	case "track":
		return FilesListResponseItemObjectTrack, nil
	case "intelligence":
		return FilesListResponseItemObjectIntelligence, nil
	}
	var t FilesListResponseItemObject
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FilesListResponseItemObject) Ptr() *FilesListResponseItemObject {
	return &f
}

type FilesListResponseItemStatus string

const (
	FilesListResponseItemStatusWaiting    FilesListResponseItemStatus = "waiting"
	FilesListResponseItemStatusProcessing FilesListResponseItemStatus = "processing"
	FilesListResponseItemStatusReady      FilesListResponseItemStatus = "ready"
	FilesListResponseItemStatusFailed     FilesListResponseItemStatus = "failed"
)

func NewFilesListResponseItemStatusFromString(s string) (FilesListResponseItemStatus, error) {
	switch s {
	case "waiting":
		return FilesListResponseItemStatusWaiting, nil
	case "processing":
		return FilesListResponseItemStatusProcessing, nil
	case "ready":
		return FilesListResponseItemStatusReady, nil
	case "failed":
		return FilesListResponseItemStatusFailed, nil
	}
	var t FilesListResponseItemStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FilesListResponseItemStatus) Ptr() *FilesListResponseItemStatus {
	return &f
}

type FilesUpdateResponse struct {
	ID           string                    `json:"id" url:"id"`
	MediaID      string                    `json:"media_id" url:"media_id"`
	Object       FilesUpdateResponseObject `json:"object" url:"object"`
	Kind         FilesUpdateResponseKind   `json:"kind" url:"kind"`
	Type         string                    `json:"type" url:"type"`
	Codec        *string                   `json:"codec,omitempty" url:"codec,omitempty"`
	Container    *string                   `json:"container,omitempty" url:"container,omitempty"`
	Width        *int                      `json:"width,omitempty" url:"width,omitempty"`
	Height       *int                      `json:"height,omitempty" url:"height,omitempty"`
	Orientation  *string                   `json:"orientation,omitempty" url:"orientation,omitempty"`
	Rotation     *float64                  `json:"rotation,omitempty" url:"rotation,omitempty"`
	Transparency *bool                     `json:"transparency,omitempty" url:"transparency,omitempty"`
	Animated     *bool                     `json:"animated,omitempty" url:"animated,omitempty"`
	Frames       *int                      `json:"frames,omitempty" url:"frames,omitempty"`
	Duration     *float64                  `json:"duration,omitempty" url:"duration,omitempty"`
	Fps          *float64                  `json:"fps,omitempty" url:"fps,omitempty"`
	Filesize     int                       `json:"filesize" url:"filesize"`
	Bitrate      *int                      `json:"bitrate,omitempty" url:"bitrate,omitempty"`
	Language     *string                   `json:"language,omitempty" url:"language,omitempty"`
	Label        *string                   `json:"label,omitempty" url:"label,omitempty"`
	Ref          *string                   `json:"ref,omitempty" url:"ref,omitempty"`
	Folder       *string                   `json:"folder,omitempty" url:"folder,omitempty"`
	Filename     *string                   `json:"filename,omitempty" url:"filename,omitempty"`
	URL          string                    `json:"url" url:"url"`
	Placeholder  *string                   `json:"placeholder,omitempty" url:"placeholder,omitempty"`
	Background   *string                   `json:"background,omitempty" url:"background,omitempty"`
	Metadata     map[string]interface{}    `json:"metadata,omitempty" url:"metadata,omitempty"`
	Original     *bool                     `json:"original,omitempty" url:"original,omitempty"`
	CreatedBy    *string                   `json:"created_by,omitempty" url:"created_by,omitempty"`
	Created      time.Time                 `json:"created" url:"created"`
	Updated      time.Time                 `json:"updated" url:"updated"`
	Status       FilesUpdateResponseStatus `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FilesUpdateResponse) GetID() string {
	if f == nil {
		return ""
	}
	return f.ID
}

func (f *FilesUpdateResponse) GetMediaID() string {
	if f == nil {
		return ""
	}
	return f.MediaID
}

func (f *FilesUpdateResponse) GetObject() FilesUpdateResponseObject {
	if f == nil {
		return ""
	}
	return f.Object
}

func (f *FilesUpdateResponse) GetKind() FilesUpdateResponseKind {
	if f == nil {
		return ""
	}
	return f.Kind
}

func (f *FilesUpdateResponse) GetType() string {
	if f == nil {
		return ""
	}
	return f.Type
}

func (f *FilesUpdateResponse) GetCodec() *string {
	if f == nil {
		return nil
	}
	return f.Codec
}

func (f *FilesUpdateResponse) GetContainer() *string {
	if f == nil {
		return nil
	}
	return f.Container
}

func (f *FilesUpdateResponse) GetWidth() *int {
	if f == nil {
		return nil
	}
	return f.Width
}

func (f *FilesUpdateResponse) GetHeight() *int {
	if f == nil {
		return nil
	}
	return f.Height
}

func (f *FilesUpdateResponse) GetOrientation() *string {
	if f == nil {
		return nil
	}
	return f.Orientation
}

func (f *FilesUpdateResponse) GetRotation() *float64 {
	if f == nil {
		return nil
	}
	return f.Rotation
}

func (f *FilesUpdateResponse) GetTransparency() *bool {
	if f == nil {
		return nil
	}
	return f.Transparency
}

func (f *FilesUpdateResponse) GetAnimated() *bool {
	if f == nil {
		return nil
	}
	return f.Animated
}

func (f *FilesUpdateResponse) GetFrames() *int {
	if f == nil {
		return nil
	}
	return f.Frames
}

func (f *FilesUpdateResponse) GetDuration() *float64 {
	if f == nil {
		return nil
	}
	return f.Duration
}

func (f *FilesUpdateResponse) GetFps() *float64 {
	if f == nil {
		return nil
	}
	return f.Fps
}

func (f *FilesUpdateResponse) GetFilesize() int {
	if f == nil {
		return 0
	}
	return f.Filesize
}

func (f *FilesUpdateResponse) GetBitrate() *int {
	if f == nil {
		return nil
	}
	return f.Bitrate
}

func (f *FilesUpdateResponse) GetLanguage() *string {
	if f == nil {
		return nil
	}
	return f.Language
}

func (f *FilesUpdateResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FilesUpdateResponse) GetRef() *string {
	if f == nil {
		return nil
	}
	return f.Ref
}

func (f *FilesUpdateResponse) GetFolder() *string {
	if f == nil {
		return nil
	}
	return f.Folder
}

func (f *FilesUpdateResponse) GetFilename() *string {
	if f == nil {
		return nil
	}
	return f.Filename
}

func (f *FilesUpdateResponse) GetURL() string {
	if f == nil {
		return ""
	}
	return f.URL
}

func (f *FilesUpdateResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FilesUpdateResponse) GetBackground() *string {
	if f == nil {
		return nil
	}
	return f.Background
}

func (f *FilesUpdateResponse) GetMetadata() map[string]interface{} {
	if f == nil {
		return nil
	}
	return f.Metadata
}

func (f *FilesUpdateResponse) GetOriginal() *bool {
	if f == nil {
		return nil
	}
	return f.Original
}

func (f *FilesUpdateResponse) GetCreatedBy() *string {
	if f == nil {
		return nil
	}
	return f.CreatedBy
}

func (f *FilesUpdateResponse) GetCreated() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.Created
}

func (f *FilesUpdateResponse) GetUpdated() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.Updated
}

func (f *FilesUpdateResponse) GetStatus() FilesUpdateResponseStatus {
	if f == nil {
		return ""
	}
	return f.Status
}

func (f *FilesUpdateResponse) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FilesUpdateResponse) UnmarshalJSON(data []byte) error {
	type embed FilesUpdateResponse
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FilesUpdateResponse(unmarshaler.embed)
	f.Created = unmarshaler.Created.Time()
	f.Updated = unmarshaler.Updated.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FilesUpdateResponse) MarshalJSON() ([]byte, error) {
	type embed FilesUpdateResponse
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created"`
		Updated *internal.DateTime `json:"updated"`
	}{
		embed:   embed(*f),
		Created: internal.NewDateTime(f.Created),
		Updated: internal.NewDateTime(f.Updated),
	}
	return json.Marshal(marshaler)
}

func (f *FilesUpdateResponse) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FilesUpdateResponseKind string

const (
	FilesUpdateResponseKindVideo FilesUpdateResponseKind = "video"
	FilesUpdateResponseKindImage FilesUpdateResponseKind = "image"
	FilesUpdateResponseKindAudio FilesUpdateResponseKind = "audio"
)

func NewFilesUpdateResponseKindFromString(s string) (FilesUpdateResponseKind, error) {
	switch s {
	case "video":
		return FilesUpdateResponseKindVideo, nil
	case "image":
		return FilesUpdateResponseKindImage, nil
	case "audio":
		return FilesUpdateResponseKindAudio, nil
	}
	var t FilesUpdateResponseKind
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FilesUpdateResponseKind) Ptr() *FilesUpdateResponseKind {
	return &f
}

type FilesUpdateResponseObject string

const (
	FilesUpdateResponseObjectSource       FilesUpdateResponseObject = "source"
	FilesUpdateResponseObjectTrack        FilesUpdateResponseObject = "track"
	FilesUpdateResponseObjectIntelligence FilesUpdateResponseObject = "intelligence"
)

func NewFilesUpdateResponseObjectFromString(s string) (FilesUpdateResponseObject, error) {
	switch s {
	case "source":
		return FilesUpdateResponseObjectSource, nil
	case "track":
		return FilesUpdateResponseObjectTrack, nil
	case "intelligence":
		return FilesUpdateResponseObjectIntelligence, nil
	}
	var t FilesUpdateResponseObject
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FilesUpdateResponseObject) Ptr() *FilesUpdateResponseObject {
	return &f
}

type FilesUpdateResponseStatus string

const (
	FilesUpdateResponseStatusWaiting    FilesUpdateResponseStatus = "waiting"
	FilesUpdateResponseStatusProcessing FilesUpdateResponseStatus = "processing"
	FilesUpdateResponseStatusReady      FilesUpdateResponseStatus = "ready"
	FilesUpdateResponseStatusFailed     FilesUpdateResponseStatus = "failed"
)

func NewFilesUpdateResponseStatusFromString(s string) (FilesUpdateResponseStatus, error) {
	switch s {
	case "waiting":
		return FilesUpdateResponseStatusWaiting, nil
	case "processing":
		return FilesUpdateResponseStatusProcessing, nil
	case "ready":
		return FilesUpdateResponseStatusReady, nil
	case "failed":
		return FilesUpdateResponseStatusFailed, nil
	}
	var t FilesUpdateResponseStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FilesUpdateResponseStatus) Ptr() *FilesUpdateResponseStatus {
	return &f
}

type FilesUpdateRequest struct {
	// Specifies the API Version
	Folder        *string                `json:"folder,omitempty" url:"-"`
	Filename      *string                `json:"filename,omitempty" url:"-"`
	Ref           *string                `json:"ref,omitempty" url:"-"`
	Metadata      map[string]interface{} `json:"metadata,omitempty" url:"-"`
	acceptVersion string
}

func (f *FilesUpdateRequest) AcceptVersion() string {
	return f.acceptVersion
}

func (f *FilesUpdateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler FilesUpdateRequest
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*f = FilesUpdateRequest(body)
	f.acceptVersion = "2025-08-20"
	return nil
}

func (f *FilesUpdateRequest) MarshalJSON() ([]byte, error) {
	type embed FilesUpdateRequest
	var marshaler = struct {
		embed
		AcceptVersion string `json:"Accept-Version"`
	}{
		embed:         embed(*f),
		AcceptVersion: "2025-08-20",
	}
	return json.Marshal(marshaler)
}
