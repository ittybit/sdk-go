// This file was auto-generated by Fern from our API Definition.

package ittybit

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/ittybit/sdk-go/internal"
)

type SignaturesCreateRequest struct {
	Filename string                         `json:"filename" url:"-"`
	Folder   *string                        `json:"folder,omitempty" url:"-"`
	Expiry   *int                           `json:"expiry,omitempty" url:"-"`
	Method   *SignaturesCreateRequestMethod `json:"method,omitempty" url:"-"`
}

type Signature struct {
	Domain    string  `json:"domain" url:"domain"`
	Filename  string  `json:"filename" url:"filename"`
	Folder    *string `json:"folder,omitempty" url:"folder,omitempty"`
	Expiry    int     `json:"expiry" url:"expiry"`
	Method    string  `json:"method" url:"method"`
	Signature string  `json:"signature" url:"signature"`
	URL       string  `json:"url" url:"url"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *Signature) GetDomain() string {
	if s == nil {
		return ""
	}
	return s.Domain
}

func (s *Signature) GetFilename() string {
	if s == nil {
		return ""
	}
	return s.Filename
}

func (s *Signature) GetFolder() *string {
	if s == nil {
		return nil
	}
	return s.Folder
}

func (s *Signature) GetExpiry() int {
	if s == nil {
		return 0
	}
	return s.Expiry
}

func (s *Signature) GetMethod() string {
	if s == nil {
		return ""
	}
	return s.Method
}

func (s *Signature) GetSignature() string {
	if s == nil {
		return ""
	}
	return s.Signature
}

func (s *Signature) GetURL() string {
	if s == nil {
		return ""
	}
	return s.URL
}

func (s *Signature) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Signature) UnmarshalJSON(data []byte) error {
	type unmarshaler Signature
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = Signature(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *Signature) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SignatureResponse struct {
	Meta  *Meta      `json:"meta,omitempty" url:"meta,omitempty"`
	Data  *Signature `json:"data,omitempty" url:"data,omitempty"`
	Error *Error     `json:"error,omitempty" url:"error,omitempty"`
	Links *Links     `json:"links,omitempty" url:"links,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SignatureResponse) GetMeta() *Meta {
	if s == nil {
		return nil
	}
	return s.Meta
}

func (s *SignatureResponse) GetData() *Signature {
	if s == nil {
		return nil
	}
	return s.Data
}

func (s *SignatureResponse) GetError() *Error {
	if s == nil {
		return nil
	}
	return s.Error
}

func (s *SignatureResponse) GetLinks() *Links {
	if s == nil {
		return nil
	}
	return s.Links
}

func (s *SignatureResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SignatureResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SignatureResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SignatureResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SignatureResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SignaturesCreateRequestMethod string

const (
	SignaturesCreateRequestMethodGet SignaturesCreateRequestMethod = "get"
	SignaturesCreateRequestMethodPut SignaturesCreateRequestMethod = "put"
)

func NewSignaturesCreateRequestMethodFromString(s string) (SignaturesCreateRequestMethod, error) {
	switch s {
	case "get":
		return SignaturesCreateRequestMethodGet, nil
	case "put":
		return SignaturesCreateRequestMethodPut, nil
	}
	var t SignaturesCreateRequestMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SignaturesCreateRequestMethod) Ptr() *SignaturesCreateRequestMethod {
	return &s
}
