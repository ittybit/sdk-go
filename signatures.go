// This file was auto-generated by Fern from our API Definition.

package ittybit

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/ittybit/sdk-go/internal"
)

type SignaturesCreateRequest struct {
	// Specifies the API Version
	Filename      string                         `json:"filename" url:"-"`
	Folder        *string                        `json:"folder,omitempty" url:"-"`
	Expiry        *int                           `json:"expiry,omitempty" url:"-"`
	Method        *SignaturesCreateRequestMethod `json:"method,omitempty" url:"-"`
	acceptVersion string
}

func (s *SignaturesCreateRequest) AcceptVersion() string {
	return s.acceptVersion
}

func (s *SignaturesCreateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SignaturesCreateRequest
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*s = SignaturesCreateRequest(body)
	s.acceptVersion = "2025-08-20"
	return nil
}

func (s *SignaturesCreateRequest) MarshalJSON() ([]byte, error) {
	type embed SignaturesCreateRequest
	var marshaler = struct {
		embed
		AcceptVersion string `json:"Accept-Version"`
	}{
		embed:         embed(*s),
		AcceptVersion: "2025-08-20",
	}
	return json.Marshal(marshaler)
}

type SignaturesCreateRequestMethod string

const (
	SignaturesCreateRequestMethodGet SignaturesCreateRequestMethod = "get"
	SignaturesCreateRequestMethodPut SignaturesCreateRequestMethod = "put"
)

func NewSignaturesCreateRequestMethodFromString(s string) (SignaturesCreateRequestMethod, error) {
	switch s {
	case "get":
		return SignaturesCreateRequestMethodGet, nil
	case "put":
		return SignaturesCreateRequestMethodPut, nil
	}
	var t SignaturesCreateRequestMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SignaturesCreateRequestMethod) Ptr() *SignaturesCreateRequestMethod {
	return &s
}

type SignaturesCreateResponse struct {
	Domain    string  `json:"domain" url:"domain"`
	Filename  string  `json:"filename" url:"filename"`
	Folder    *string `json:"folder,omitempty" url:"folder,omitempty"`
	Expiry    int     `json:"expiry" url:"expiry"`
	Method    string  `json:"method" url:"method"`
	Signature string  `json:"signature" url:"signature"`
	URL       string  `json:"url" url:"url"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SignaturesCreateResponse) GetDomain() string {
	if s == nil {
		return ""
	}
	return s.Domain
}

func (s *SignaturesCreateResponse) GetFilename() string {
	if s == nil {
		return ""
	}
	return s.Filename
}

func (s *SignaturesCreateResponse) GetFolder() *string {
	if s == nil {
		return nil
	}
	return s.Folder
}

func (s *SignaturesCreateResponse) GetExpiry() int {
	if s == nil {
		return 0
	}
	return s.Expiry
}

func (s *SignaturesCreateResponse) GetMethod() string {
	if s == nil {
		return ""
	}
	return s.Method
}

func (s *SignaturesCreateResponse) GetSignature() string {
	if s == nil {
		return ""
	}
	return s.Signature
}

func (s *SignaturesCreateResponse) GetURL() string {
	if s == nil {
		return ""
	}
	return s.URL
}

func (s *SignaturesCreateResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SignaturesCreateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SignaturesCreateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SignaturesCreateResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SignaturesCreateResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
